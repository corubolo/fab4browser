// Generated from teh JBIG2 Library
// Licensed under GPL v3
// see: http://jbig2dec.sourceforge.net/

package jbig2dec;
/* This file was generated from jbig2dec by Mips2Java on Wed Nov 25 01:38:46 CET 2009 */

public final class Jbig2dec extends org.ibex.nestedvm.Runtime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                case 0x10004:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x100fc;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x10164;
                    continue;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x10060;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 4 << 16;
                    addr=r17+-10200;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                        pc=0x100e8;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 4 << 16;
                    r2 = readPages[(r16+-12708)>>>12][((r16+-12708)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x100c8;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = readPages[(r16+-12708)>>>12][((r16+-12708)>>>2)&0x3ff];
                    r2 = r2 + 4;
                case 0x100a4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+-12708)>>>12][((r16+-12708)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x100ac;
                    return;
                case 0x100ac:
                    r2 = readPages[(r16+-12708)>>>12][((r16+-12708)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x100a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r2 = 0 << 16;
                case 0x100c8:
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x100e4;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -12720;
                    r31=0x100e0;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x100e0:
                    r2 = r0 + 1;
                case 0x100e4:
                    addr=r17+-10200;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x100e8:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x100fc:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r4 = 4 << 16;
                    r5 = 4 << 16;
                    r2 = r2 + 0;
                case 0x10110:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r4 = r4 + -12720;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + -10192;
                        pc=0x10128;
                        continue;
                    }
                    r5 = r5 + -10192;
                    /* Next insn is delay slot */ 
                    r31=0x10128;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10128:
                    r2 = 4 << 16;
                    r3 = readPages[(r2+-12716)>>>12][((r2+-12716)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + -12716;
                        pc=0x10154;
                        continue;
                    }
                    r4 = r2 + -12716;
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x10154;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10154:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x10164:
                    r29 = r29 + -32;
                    r2 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = r2 + -30204;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + -4;
                        pc=0x101ac;
                        continue;
                    }
                    r16 = r2 + -4;
                    r3 = r4 + r0;
                    r17 = r0 + -1;
                case 0x10194:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r3;
                    r31=0x1019c;
                    return;
                case 0x1019c:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x10194;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x101ac:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x101c0:
                    r2 = r4 + 1;
                case 0x101c4:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x101c4;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x101d8:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x10200;
                    return;
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x10208;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x1020c;
                        return;
                    }
                case 0x1020c:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x10214;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x10218;
                        return;
                    }
                case 0x10218:
                    r29 = r29 + -8;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r16;
                    r8 = r6 + r0;
                    r10 = r4 + r0;
                    r9 = r7 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r14 = r5 + r0;
                        pc=0x10620;
                        run_10600(); return;
                    }
                    r14 = r5 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x103ac;
                        continue;
                    }
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 + r0;
                        pc=0x10390;
                        continue;
                    }
                    r3 = r7 + r0;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r6 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r6 = r6 << 3;
                case 0x1025c:
                    r2 = r3 >>> (r6&0x1f);
                    r3 = 4 << 16;
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r6;
                    r7 = r2 - r4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 - r7;
                        pc=0x10298;
                        continue;
                    }
                    r2 = r2 - r7;
                    r2 = r14 >>> (r2&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r14 = r14 << (r7&0x1f);
                    r9 = r9 << (r7&0x1f);
                case 0x10298:
                    r7 = r9 >>> 16;
                    if(r7!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r12 = r9 & 65535;
                    r4 = r14 >>> 16;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x102b4;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x102b4:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r6 = r2 | r4;
                    r11 = lo;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10308;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r6 = r6 + r9;
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x10308;
                        continue;
                    }
                    r11 = r11 + -1;
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10308;
                        continue;
                    }
                    r11 = r11 + -1;
                    r6 = r6 + r9;
                case 0x10308:
                    r6 = r6 - r5;
                    if(r7!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r4 = r14 & 65535;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10320;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10320:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r8 = lo;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x10370;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -1;
                        pc=0x10370;
                        continue;
                    }
                    r8 = r8 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 << 16;
                        pc=0x10374;
                        continue;
                    }
                    r2 = r11 << 16;
                    r8 = r8 + -1;
                case 0x10370:
                    r2 = r11 << 16;
                case 0x10374:
                    r3 = r2 | r8;
                case 0x10378:
                    r6 = r0 + r0;
                case 0x1037c:
                    r17 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r16 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x10390:
                    r2 = 255 << 16;
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 16;
                        pc=0x1025c;
                        continue;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x1025c;
                    continue;
                case 0x103ac:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                        pc=0x103d4;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r6!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x103c8;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x103c8:
                    r9 = lo;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                case 0x103d4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x10608;
                        run_10600(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r9&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x103e8:
                    r3 = 4 << 16;
                    r2 = r9 >>> (r5&0x1f);
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 - r7;
                        pc=0x104fc;
                        continue;
                    }
                    r5 = r2 - r7;
                    r10 = r10 - r9;
                    r6 = r0 + 1;
                    r8 = r9 >>> 16;
                    r16 = r9 & 65535;
                case 0x10420:
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r14 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10434;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10434:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r7 = r2 | r4;
                    r11 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r7 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10488;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r7 = r7 + r9;
                    r2 = ((r7 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x10488;
                        continue;
                    }
                    r11 = r11 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10488;
                        continue;
                    }
                    r11 = r11 + -1;
                    r7 = r7 + r9;
                case 0x10488:
                    r7 = r7 - r5;
                    if(r8!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r14 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x104a0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x104a0:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r10 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x104f0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r10 + -1;
                        pc=0x104f0;
                        continue;
                    }
                    r10 = r10 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 << 16;
                        pc=0x104f4;
                        continue;
                    }
                    r2 = r11 << 16;
                    r10 = r10 + -1;
                case 0x104f0:
                    r2 = r11 << 16;
                case 0x104f4:
                    /* Next insn is delay slot */ 
                    r3 = r2 | r10;
                    pc=0x1037c;
                    run_10200(); return;
                case 0x104fc:
                    r9 = r9 << (r7&0x1f);
                    r8 = r9 >>> 16;
                    r12 = r10 >>> (r5&0x1f);
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r16 = r9 & 65535;
                    r3 = r14 >>> (r5&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    r14 = r14 << (r7&0x1f);
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10530;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10530:
                    r11 = r8 + r0;
                    r17 = r16 + r0;
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r7 = r4 | r5;
                    r15 = lo;
                    { long hilo = (long)(r6) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1058c;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r7 = r7 + r9;
                    r2 = ((r7 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r6 + -1;
                        pc=0x1058c;
                        continue;
                    }
                    r15 = r6 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1058c;
                        continue;
                    }
                    r15 = r15 + -1;
                    r7 = r7 + r9;
                case 0x1058c:
                    r7 = r7 - r13;
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x105a4;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x105a4:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r17); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x105f8;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x105f8;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r15 << 16;
                        pc=0x105fc;
                        continue;
                    }
                    r2 = r15 << 16;
                    r6 = r6 + -1;
                    r4 = r4 + r9;
                case 0x105f8:
                    r2 = r15 << 16;
                case 0x105fc:
                    r6 = r2 | r6;
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    /* Next insn is delay slot */ 
                    r10 = r4 - r13;
                    pc=0x10420;
                    run_10400(); return;
                case 0x10608:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x103e8;
                        run_10200(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x103e8;
                    run_10200(); return;
                case 0x10620:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x10378;
                        run_10200(); return;
                    }
                    r3 = r0 + r0;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x107d4;
                        continue;
                    }
                    r2 = 255 << 16;
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x10648:
                    r3 = 4 << 16;
                    r2 = r8 >>> (r5&0x1f);
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10690;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 1;
                        pc=0x10378;
                        run_10200(); return;
                    }
                    r3 = r0 + 1;
                    r2 = ((r14 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x10378;
                        run_10200(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r0 + 1;
                    pc=0x10378;
                    run_10200(); return;
                case 0x10690:
                    r5 = r2 - r7;
                    r2 = r9 >>> (r5&0x1f);
                    r3 = r8 << (r7&0x1f);
                    r8 = r3 | r2;
                    r11 = r8 >>> 16;
                    r12 = r10 >>> (r5&0x1f);
                    if(r11!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r16 = r8 & 65535;
                    r3 = r14 >>> (r5&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    r14 = r14 << (r7&0x1f);
                    r9 = r9 << (r7&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x106d4;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x106d4:
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r7 = r4 | r5;
                    r15 = lo;
                    { long hilo = (long)(r6) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x10728;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r7 = r7 + r8;
                    r2 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r6 + -1;
                        pc=0x10728;
                        continue;
                    }
                    r15 = r6 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10728;
                        continue;
                    }
                    r15 = r15 + -1;
                    r7 = r7 + r8;
                case 0x10728:
                    r7 = r7 - r13;
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10740;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10740:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x10794;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x10794;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r15 << 16;
                        pc=0x10798;
                        continue;
                    }
                    r2 = r15 << 16;
                    r4 = r4 + r8;
                    r6 = r6 + -1;
                case 0x10794:
                    r2 = r15 << 16;
                case 0x10798:
                    r3 = r2 | r6;
                    r4 = r4 - r13;
                    { long hilo = (r3 & 0xffffffffL) * (r9 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r5 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107cc;
                        continue;
                    }
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x1037c;
                        run_10200(); return;
                    }
                    r6 = r0 + r0;
                    r4 = lo;
                    r2 = ((r14 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1037c;
                        run_10200(); return;
                    }
                case 0x107cc:
                    /* Next insn is delay slot */ 
                    r3 = r3 + -1;
                    pc=0x10378;
                    run_10200(); return;
                case 0x107d4:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x10648;
                        continue;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x10648;
                    continue;
                case 0x107ec:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r17;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r16;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    r8 = r6 + r0;
                    r19 = r29 + r0;
                    r11 = r7 + r0;
                    r15 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 + r0;
                        pc=0x10b9c;
                        run_10a00(); return;
                    }
                    r10 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x10984;
                        continue;
                    }
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 + r0;
                        pc=0x10968;
                        continue;
                    }
                    r3 = r7 + r0;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r6 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r6 = r6 << 3;
                case 0x1083c:
                    r2 = r3 >>> (r6&0x1f);
                    r3 = 4 << 16;
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r6;
                    r7 = r2 - r4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r11 >>> 16;
                        pc=0x10880;
                        continue;
                    }
                    r6 = r11 >>> 16;
                    r2 = r2 - r7;
                    r2 = r15 >>> (r2&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r11 = r11 << (r7&0x1f);
                    r15 = r15 << (r7&0x1f);
                    r6 = r11 >>> 16;
                case 0x10880:
                    if(r6!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r9 = r11 & 65535;
                    r4 = r15 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10898;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10898:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = lo;
                    r3 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x108d8;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r5 = r5 + r11;
                    r2 = ((r5 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                        pc=0x108d8;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108d8;
                        continue;
                    }
                    r5 = r5 + r11;
                case 0x108d8:
                    r5 = r5 - r8;
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r4 = r15 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108f0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x108f0:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x10930;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r4 - r8;
                        pc=0x10934;
                        continue;
                    }
                    r15 = r4 - r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x10934;
                        continue;
                    }
                    r4 = r4 + r11;
                case 0x10930:
                    r15 = r4 - r8;
                case 0x10934:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = r15 >>> (r7&0x1f);
                        pc=0x10948;
                        continue;
                    }
                    r25 = r15 >>> (r7&0x1f);
                    r24 = r0 + r0;
                case 0x10940:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r24;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r25;
                case 0x10948:
                    r2 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r19 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r16 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x10968:
                    r2 = 255 << 16;
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 16;
                        pc=0x1083c;
                        continue;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x1083c;
                    continue;
                case 0x10984:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                        pc=0x109ac;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r6!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x109a0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x109a0:
                    r11 = lo;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x109ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x10b84;
                        run_10a00(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r11&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x109c0:
                    r3 = 4 << 16;
                    r2 = r11 >>> (r5&0x1f);
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 - r7;
                        pc=0x10aa8;
                        run_10a00(); return;
                    }
                    r16 = r2 - r7;
                    r10 = r10 - r11;
                    r8 = r11 >>> 16;
                    r14 = r11 & 65535;
                case 0x109f4:
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r15 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a08;
                        run_10a00(); return;
                    }
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    throw new ExecutionException("Break");
                case 0x10a08:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10a48;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r5 = r5 + r11;
                    r2 = ((r5 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10a48;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a48;
                        continue;
                    }
                    r5 = r5 + r11;
                case 0x10a48:
                    r5 = r5 - r6;
                    if(r8!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r15 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a60;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10a60:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10aa0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r4 - r6;
                        pc=0x10934;
                        run_10800(); return;
                    }
                    r15 = r4 - r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x10934;
                        run_10800(); return;
                    }
                    r4 = r4 + r11;
                case 0x10aa0:
                    /* Next insn is delay slot */ 
                    r15 = r4 - r6;
                    pc=0x10934;
                    run_10800(); return;
                case 0x10aa8:
                    r11 = r11 << (r7&0x1f);
                    r8 = r11 >>> 16;
                    r13 = r10 >>> (r16&0x1f);
                    if(r8!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r14 = r11 & 65535;
                    r3 = r15 >>> (r16&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10ad8;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10ad8:
                    r12 = r8 + r0;
                    r15 = r15 << (r7&0x1f);
                    r16 = r14 + r0;
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r9 = r4 | r5;
                    { long hilo = (long)(r6) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x10b24;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r9 = r9 + r11;
                    r2 = ((r9 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10b24;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b24;
                        continue;
                    }
                    r9 = r9 + r11;
                case 0x10b24:
                    r9 = r9 - r6;
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b3c;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10b3c:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x10b7c;
                        continue;
                    }
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 - r6;
                        pc=0x109f4;
                        run_10800(); return;
                    }
                    r10 = r4 - r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x109f4;
                        run_10800(); return;
                    }
                    r4 = r4 + r11;
                case 0x10b7c:
                    /* Next insn is delay slot */ 
                    r10 = r4 - r6;
                    pc=0x109f4;
                    run_10800(); return;
                case 0x10b84:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x109c0;
                        run_10800(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x109c0;
                    run_10800(); return;
                case 0x10b9c:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x10bbc;
                        continue;
                    }
                    r2 = r0 | 65535;
                    r25 = r5 + r0;
                    r24 = r4 + r0;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r24;
                    /* Next insn is delay slot */ 
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r25;
                    pc=0x10948;
                    run_10800(); return;
                case 0x10bbc:
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x10da4;
                        run_10c00(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x10bd4:
                    r3 = 4 << 16;
                    r2 = r8 >>> (r5&0x1f);
                    r3 = r3 + -12976;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 - r7;
                        pc=0x10c34;
                        run_10c00(); return;
                    }
                    r16 = r2 - r7;
                    r2 = ((r8 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r15 - r11;
                        pc=0x10c14;
                        continue;
                    }
                    r4 = r15 - r11;
                    r2 = ((r15 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c24;
                        continue;
                    }
                case 0x10c14:
                    r2 = ((r15 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = r10 - r8;
                    r10 = r3 - r2;
                    r15 = r4 + r0;
                case 0x10c24:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = r15 + r0;
                        pc=0x10948;
                        run_10800(); return;
                    }
                    r25 = r15 + r0;
                    /* Next insn is delay slot */ 
                    r24 = r10 + r0;
                    pc=0x10940;
                    run_10800(); return;
                case 0x10c34:
                    r2 = r11 >>> (r16&0x1f);
                    r3 = r8 << (r7&0x1f);
                    r8 = r3 | r2;
                    r12 = r8 >>> 16;
                    r13 = r10 >>> (r16&0x1f);
                    if(r12!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r18 = r8 & 65535;
                    r2 = r15 >>> (r16&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r5 = r10 >>> 16;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c6c;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10c6c:
                    r11 = r11 << (r7&0x1f);
                    r15 = r15 << (r7&0x1f);
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r9 = r4 | r5;
                    r17 = lo;
                    { long hilo = (long)(r6) * ((long)r18); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r14 = lo;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x10cc8;
                        continue;
                    }
                    if(r12!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + -1;
                        pc=0x10cc8;
                        continue;
                    }
                    r17 = r6 + -1;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10cc8;
                        continue;
                    }
                    r17 = r17 + -1;
                    r9 = r9 + r8;
                case 0x10cc8:
                    r9 = r9 - r14;
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10ce0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x10ce0:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r18); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r14 = lo;
                    r3 = ((r5 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x10d34;
                        continue;
                    }
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r5 = r5 + r8;
                    r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x10d34;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r5 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r17 << 16;
                        pc=0x10d38;
                        continue;
                    }
                    r2 = r17 << 16;
                    r6 = r6 + -1;
                    r5 = r5 + r8;
                case 0x10d34:
                    r2 = r17 << 16;
                case 0x10d38:
                    r2 = r2 | r6;
                    r5 = r5 - r14;
                    { long hilo = (r2 & 0xffffffffL) * (r11 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r6 = hi;
                    r3 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r9 - r11;
                        pc=0x10d90;
                        continue;
                    }
                    r4 = r9 - r11;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        r2 = ((r15 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                        pc=0x10d88;
                        continue;
                    }
                    r2 = ((r15 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                case 0x10d60:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r15 - r9;
                        pc=0x10948;
                        run_10800(); return;
                    }
                    r3 = r15 - r9;
                    r4 = r5 - r6;
                    r2 = ((r15 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 - r2;
                    r5 = r10 << (r16&0x1f);
                    r3 = r3 >>> (r7&0x1f);
                    r25 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r24 = r10 >>> (r7&0x1f);
                    pc=0x10940;
                    run_10800(); return;
                case 0x10d88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r9 - r11;
                        pc=0x10d60;
                        continue;
                    }
                    r4 = r9 - r11;
                case 0x10d90:
                    r2 = ((r9 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = r6 - r8;
                    r6 = r3 - r2;
                    /* Next insn is delay slot */ 
                    r9 = r4 + r0;
                    pc=0x10d60;
                    continue;
                case 0x10da4:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x10bd4;
                        run_10a00(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x10bd4;
                    run_10a00(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r28 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r4 + r0;
                        pc=0x10e1c;
                        continue;
                    }
                    r16 = r4 + r0;
                    r2 = 4 << 16;
                    r28 = r2 + 22160;
                case 0x10e1c:
                    r1 = 4 << 16;
                    writePages[(r1+-10248)>>>12][((r1+-10248)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x10e2c;
                    pc=0x10000;
                    run_10000(); return;
                case 0x10e2c:
                    r4 = 1 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 56;
                    r31=0x10e38;
                    pc=0x29200;
                    run_29200(); return;
                case 0x10e38:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e60;
                        continue;
                    }
                    r3 = r16 + r0;
                case 0x10e4c:
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e4c;
                        continue;
                    }
                case 0x10e60:
                    r6 = 4 << 16;
                    r6 = readPages[(r6+-10248)>>>12][((r6+-10248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x10e70;
                    pc=0x11200;
                    run_11200(); return;
                case 0x10e70:
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x10e78;
                    pc=0x29600;
                    run_29600(); return;
                case 0x10e78:
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r29 = r29 + -24;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r6 = 4 << 16;
                    r7 = 4 << 16;
                    r5 = r5 + -10544;
                    r6 = r6 + -28672;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -10536;
                    r31=0x1102c;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x1102c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r29 = r29 + -4256;
                    writePages[(r29+4224)>>>12][((r29+4224)>>>2)&0x3ff] = r18;
                    r2 = r0 + 2;
                    r18 = r29 + 4120;
                    writePages[(r29+4120)>>>12][((r29+4120)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    r2 = r0 + 3;
                    r6 = r18 + r0;
                    writePages[(r29+4232)>>>12][((r29+4232)>>>2)&0x3ff] = r20;
                    writePages[(r29+4228)>>>12][((r29+4228)>>>2)&0x3ff] = r19;
                    writePages[(r29+4220)>>>12][((r29+4220)>>>2)&0x3ff] = r17;
                    writePages[(r29+4216)>>>12][((r29+4216)>>>2)&0x3ff] = r16;
                    writePages[(r29+4248)>>>12][((r29+4248)>>>2)&0x3ff] = r31;
                    writePages[(r29+4244)>>>12][((r29+4244)>>>2)&0x3ff] = r23;
                    writePages[(r29+4240)>>>12][((r29+4240)>>>2)&0x3ff] = r22;
                    writePages[(r29+4236)>>>12][((r29+4236)>>>2)&0x3ff] = r21;
                    r19 = r4 + r0;
                    r20 = r5 + r0;
                    writePages[(r29+4124)>>>12][((r29+4124)>>>2)&0x3ff] = r3;
                    writePages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff] = r0;
                    writePages[(r29+4136)>>>12][((r29+4136)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+4140)>>>12][((r29+4140)>>>2)&0x3ff] = r2;
                    r31=0x1125c;
                    pc=0x11800;
                    run_11800(); return;
                case 0x1125c:
                    r16 = r2 + r0;
                    r2 = readPages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11694;
                        run_11600(); return;
                    }
                case 0x11270:
                    r3 = readPages[(r29+4120)>>>12][((r29+4120)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x11670;
                        run_11600(); return;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x116d8;
                        run_11600(); return;
                    }
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11308;
                        continue;
                    }
                case 0x11294:
                    r4 = readPages[(r29+4136)>>>12][((r29+4136)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x112f8;
                        continue;
                    }
                case 0x112a4:
                    r2 = readPages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x112e4;
                        continue;
                    }
                case 0x112b4:
                    r2 = r0 + r0;
                case 0x112b8:
                    r31 = readPages[(r29+4248)>>>12][((r29+4248)>>>2)&0x3ff];
                    r23 = readPages[(r29+4244)>>>12][((r29+4244)>>>2)&0x3ff];
                    r22 = readPages[(r29+4240)>>>12][((r29+4240)>>>2)&0x3ff];
                    r21 = readPages[(r29+4236)>>>12][((r29+4236)>>>2)&0x3ff];
                    r20 = readPages[(r29+4232)>>>12][((r29+4232)>>>2)&0x3ff];
                    r19 = readPages[(r29+4228)>>>12][((r29+4228)>>>2)&0x3ff];
                    r18 = readPages[(r29+4224)>>>12][((r29+4224)>>>2)&0x3ff];
                    r17 = readPages[(r29+4220)>>>12][((r29+4220)>>>2)&0x3ff];
                    r16 = readPages[(r29+4216)>>>12][((r29+4216)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 4256;
                    pc=r31;
                    return;
                case 0x112e4:
                    r4 = readPages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x112f0;
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x112f0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff] = r0;
                    pc=0x112b4;
                    continue;
                case 0x112f8:
                    /* Next insn is delay slot */ 
                    r31=0x11300;
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x11300:
                    /* Next insn is delay slot */ 
                    pc=0x112a4;
                    continue;
                case 0x11308:
                    r4 = r19 - r16;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x11644;
                        run_11600(); return;
                    }
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x11340;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = 4 << 16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r4 + -28660;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1000;
                    r31=0x11338;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x11338:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=0x112b8;
                    continue;
                case 0x11340:
                    r22 = r16 << 2;
                    r3 = r22 + r20;
                    r19 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r17 = r2 + -10528;
                    r4 = r19 + r0;
                    r5 = r17 + r0;
                    r21 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11368;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x11368:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x1162c;
                        run_11600(); return;
                    }
                    r16 = r2 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x1137c;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x1137c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x11608;
                        run_11600(); return;
                    }
                    r17 = r2 + r0;
                case 0x11384:
                    r21 = 1 << 16;
                    r5 = ((r0 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r7 = r21 + 7168;
                    r4 = r0 + r0;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    r31=0x113a0;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x113a0:
                    r19 = r2 + r0;
                case 0x113a4:
                    r4 = r29 + 24;
                    r5 = r0 + 1;
                    r6 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r7 = r16 + r0;
                    r31=0x113b8;
                    pc=0x2b000;
                    run_2b000(); return;
                case 0x113b8:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x113d8;
                        continue;
                    }
                    r4 = r19 + r0;
                    r5 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x113d0;
                    pc=0x16000;
                    run_16000(); return;
                case 0x113d0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x113a4;
                        continue;
                    }
                case 0x113d8:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x113e0;
                    pc=0x29800;
                    run_29800(); return;
                case 0x113e0:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11464;
                        run_11400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x113f0;
                    pc=0x17200;
                    run_17200(); return;
                case 0x113f0:
                    r6 = r2 + r0;
                    r7 = r21 + 7168;
                    r4 = r0 + r0;
                    r5 = r0 + 1;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    r31=0x1140c;
                    pc=0x15e00;
                    run_15e00(); return;
                case 0x1140c:
                    r19 = r2 + r0;
                case 0x11410:
                    r4 = r29 + 24;
                    r5 = r0 + 1;
                    r6 = r0 + 4096;
                    /* Next insn is delay slot */ 
                    r7 = r17 + r0;
                    r31=0x11424;
                    pc=0x2b000;
                    run_2b000(); return;
                case 0x11424:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x11444;
                        continue;
                    }
                    r4 = r19 + r0;
                    r5 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x1143c;
                    pc=0x16000;
                    run_16000(); return;
                case 0x1143c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11410;
                        continue;
                    }
                case 0x11444:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x1144c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x1144c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x11454;
                    pc=0x17400;
                    run_17400(); return;
                case 0x11454:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11464;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x11464;
                    pc=0x19c00;
                    run_19c00(); return;
                case 0x11464:
                    r4 = readPages[(r29+4136)>>>12][((r29+4136)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115dc;
                        continue;
                    }
                    r2 = r22 + r20;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -10524;
                    r31=0x11488;
                    pc=0x11e00;
                    run_11e00(); return;
                case 0x11488:
                    writePages[(r29+4136)>>>12][((r29+4136)>>>2)&0x3ff] = r2;
                case 0x1148c:
                    r2 = r0 + 1;
                    writePages[(r29+4140)>>>12][((r29+4140)>>>2)&0x3ff] = r2;
                case 0x11494:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x1149c;
                    pc=0x1a200;
                    run_1a200(); return;
                case 0x1149c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x114fc;
                        continue;
                    }
                    r16 = r2 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x114b0;
                    pc=0x12000;
                    run_12000(); return;
                case 0x114b0:
                    r3 = readPages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x114d4;
                        continue;
                    }
                case 0x114c0:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x114cc;
                    pc=0x1a400;
                    run_1a400(); return;
                case 0x114cc:
                    /* Next insn is delay slot */ 
                    pc=0x11494;
                    continue;
                case 0x114d4:
                    r6 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = readPages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff];
                    { long hilo = (long)(r6) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x114f4;
                    pc=0x13e00;
                    run_13e00(); return;
                case 0x114f4:
                    /* Next insn is delay slot */ 
                    pc=0x114c0;
                    continue;
                case 0x114fc:
                    r2 = readPages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1151c;
                        continue;
                    }
                case 0x1150c:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x11514;
                    pc=0x17000;
                    run_17000(); return;
                case 0x11514:
                    /* Next insn is delay slot */ 
                    pc=0x11294;
                    run_11200(); return;
                case 0x1151c:
                    r5 = 4 << 16;
                    r4 = readPages[(r29+4136)>>>12][((r29+4136)>>>2)&0x3ff];
                    r5 = r5 + -10516;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x11530;
                    pc=0x30200;
                    run_30200(); return;
                case 0x11530:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115c8;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r22 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                case 0x11544:
                    r4 = 4 << 16;
                    r4 = r4 + -27656;
                    r5 = r0 + 1;
                    r6 = r0 + 26;
                    /* Next insn is delay slot */ 
                    r7 = r22 + r0;
                    r31=0x1155c;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x1155c:
                    r16 = r29 + 4144;
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r29 + 4168;
                    r31=0x11570;
                    pc=0x14000;
                    run_14000(); return;
                case 0x11570:
                    r21 = 4 << 16;
                    r18 = r16 + r0;
                    r17 = r23 + r0;
                    r20 = r29 + 4164;
                case 0x11580:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r4 = r17 + r0;
                    r5 = r0 + 3;
                    r6 = r21 + -10512;
                    /* Next insn is delay slot */ 
                    r18 = r18 + 1;
                    r31=0x11598;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x11598:
                    r2 = r18 < r20 ? 1 : 0;
                    r17 = r17 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 1;
                        pc=0x11580;
                        continue;
                    }
                    r16 = r16 + 1;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r22 + r0;
                    r31=0x115b4;
                    pc=0x2ae00;
                    run_2ae00(); return;
                case 0x115b4:
                    r4 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r5 = r22 + r0;
                    r31=0x115c0;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x115c0:
                    /* Next insn is delay slot */ 
                    pc=0x1150c;
                    continue;
                case 0x115c8:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r22 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x11544;
                    continue;
                case 0x115dc:
                    /* Next insn is delay slot */ 
                    r31=0x115e4;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x115e4:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11494;
                        continue;
                    }
                    r3 = readPages[(r29+4140)>>>12][((r29+4140)>>>2)&0x3ff];
                    r2 = r0 + 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11494;
                        continue;
                    }
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    /* Next insn is delay slot */ 
                    pc=0x1148c;
                    run_11400(); return;
                case 0x11608:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -27628;
                    r6 = r21 + r0;
                case 0x1161c:
                    /* Next insn is delay slot */ 
                    r31=0x11624;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x11624:
                    /* Next insn is delay slot */ 
                    pc=0x11338;
                    run_11200(); return;
                case 0x1162c:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -27628;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    pc=0x1161c;
                    continue;
                case 0x11644:
                    r22 = r16 << 2;
                    r2 = r22 + r20;
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -10528;
                    r31=0x11660;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x11660:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x11384;
                        run_11200(); return;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1162c;
                    continue;
                case 0x11670:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = 4 << 16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r4 + -27608;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 40;
                    r31=0x1168c;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x1168c:
                    /* Next insn is delay slot */ 
                    pc=0x11294;
                    run_11200(); return;
                case 0x11694:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 92;
                    r31=0x1169c;
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x1169c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff] = r2;
                        pc=0x116b4;
                        continue;
                    }
                    writePages[(r29+4132)>>>12][((r29+4132)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x116ac;
                    pc=0x13c00;
                    run_13c00(); return;
                case 0x116ac:
                    /* Next insn is delay slot */ 
                    pc=0x11270;
                    run_11200(); return;
                case 0x116b4:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = 4 << 16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r4 + -27564;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 30;
                    r31=0x116d0;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x116d0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+4128)>>>12][((r29+4128)>>>2)&0x3ff] = r0;
                    pc=0x11270;
                    run_11200(); return;
                case 0x116d8:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = 4 << 16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r4 + -28660;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1000;
                    r31=0x116f4;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x116f4:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    r31=0x116fc;
                    pc=0x29600;
                    run_29600(); return;
                case 0x116fc:
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r29 = r29 + -72;
                    r2 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r23;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    r21 = r4 + r0;
                    r20 = r5 + r0;
                    r16 = r6 + r0;
                    r19 = 4 << 16;
                    r18 = r29 + 24;
                    r17 = r2 + -12704;
                    r22 = r0 + 1;
                    r30 = 4 << 16;
                    r23 = 4 << 16;
                case 0x1185c:
                    r6 = r19 + -27532;
                    r4 = r21 + r0;
                    r5 = r20 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    r31=0x11874;
                    pc=0x15a00;
                    run_15a00(); return;
                case 0x11874:
                    r6 = r2 + r0;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x119e4;
                        continue;
                    }
                    r2 = r0 + 109;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x119dc;
                        continue;
                    }
                    r2 = r6 < 110 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11954;
                        continue;
                    }
                    r2 = r0 + 100;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1194c;
                        continue;
                    }
                    r2 = r6 < 101 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11944;
                        continue;
                    }
                    r2 = r0 + 86;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11a18;
                        run_11a00(); return;
                    }
                    r2 = r6 < 87 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11918;
                        continue;
                    }
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 63;
                        pc=0x11910;
                        continue;
                    }
                    r2 = r0 + 63;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1185c;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r2 = r2 << 4;
                    r2 = r2 + r17;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r30 + -27520;
                case 0x11900:
                    /* Next insn is delay slot */ 
                    r31=0x11908;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x11908:
                    /* Next insn is delay slot */ 
                    pc=0x1185c;
                    continue;
                case 0x11910:
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1193c;
                        continue;
                    }
                case 0x11918:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1185c;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = r23 + -27492;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x11900;
                    continue;
                case 0x1193c:
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    pc=0x1185c;
                    continue;
                case 0x11944:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 104;
                    pc=0x11910;
                    continue;
                case 0x1194c:
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r22;
                    pc=0x1185c;
                    continue;
                case 0x11954:
                    r2 = r0 + 113;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x119d4;
                        continue;
                    }
                    r2 = r6 < 114 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1198c;
                        continue;
                    }
                    r2 = r0 + 111;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11918;
                        continue;
                    }
                    r4 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11984;
                    pc=0x2fe00;
                    run_2fe00(); return;
                case 0x11984:
                    /* Next insn is delay slot */ 
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    pc=0x1185c;
                    continue;
                case 0x1198c:
                    r2 = r0 + 116;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x119cc;
                        continue;
                    }
                    r2 = r0 + 118;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11918;
                        continue;
                    }
                    r4 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x119bc;
                        continue;
                    }
                case 0x119b4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    pc=0x1185c;
                    continue;
                case 0x119bc:
                    /* Next insn is delay slot */ 
                    r31=0x119c4;
                    pc=0x29400;
                    run_29400(); return;
                case 0x119c4:
                    /* Next insn is delay slot */ 
                    pc=0x119b4;
                    continue;
                case 0x119cc:
                    /* Next insn is delay slot */ 
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r22;
                    pc=0x1185c;
                    continue;
                case 0x119d4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    pc=0x1185c;
                    continue;
                case 0x119dc:
                    /* Next insn is delay slot */ 
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r22;
                    pc=0x1185c;
                    continue;
                case 0x119e4:
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r23 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x11a18:
                    /* Next insn is delay slot */ 
                    r31=0x11a20;
                    pc=0x11000;
                    run_11000(); return;
                case 0x11a20:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    r31=0x11a28;
                    pc=0x29600;
                    run_29600(); return;
                case 0x11a28:
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    r29 = r29 + -64;
                    r2 = r0 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        r17 = r5 + r0;
                        pc=0x11cf0;
                        continue;
                    }
                    r17 = r5 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11cd0;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11cb4;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11ca8;
                        continue;
                    }
                    r2 = 4 << 16;
                    r16 = r2 + -27464;
                case 0x11c44:
                    r2 = r0 + -1;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x11ca0;
                        continue;
                    }
                    r6 = 4 << 16;
                    r4 = r29 + 24;
                    r5 = r0 + 22;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -27448;
                    r31=0x11c64;
                    pc=0x2f200;
                    run_2f200(); return;
                case 0x11c64:
                    r2 = r29 + 24;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r5 = r5 + -27428;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r17 + r0;
                    r31=0x11c88;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x11c88:
                    r31 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x11ca0:
                    /* Next insn is delay slot */ 
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x11c64;
                    continue;
                case 0x11ca8:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r16 = r2 + -27408;
                    pc=0x11c44;
                    continue;
                case 0x11cb4:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c88;
                        continue;
                    }
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r16 = r2 + -10504;
                    pc=0x11c44;
                    continue;
                case 0x11cd0:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c88;
                        continue;
                    }
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r16 = r2 + -10496;
                    pc=0x11c44;
                    continue;
                case 0x11cf0:
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c88;
                        continue;
                    }
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r16 = r2 + -10488;
                    pc=0x11c44;
                    continue;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r16 = r4 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r5 + r0;
                        pc=0x11f58;
                        continue;
                    }
                    r19 = r5 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11f4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r5 = r0 + 47;
                    r31=0x11e34;
                    pc=0x30600;
                    run_30600(); return;
                case 0x11e34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r2 + r0;
                        pc=0x11f30;
                        continue;
                    }
                    r18 = r2 + r0;
                case 0x11e3c:
                    r18 = r18 + 1;
                case 0x11e40:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e58;
                        continue;
                    }
                    r2 = 4 << 16;
                    r18 = r2 + -10480;
                case 0x11e58:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x11e60;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x11e60:
                    r4 = r18 + r0;
                    r5 = r0 + 46;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x11e70;
                    pc=0x30600;
                    run_30600(); return;
                case 0x11e70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11f20;
                        continue;
                    }
                case 0x11e78:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x11e80;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x11e80:
                    r2 = r16 + r2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x11e90;
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x11e90:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x11ef4;
                        continue;
                    }
                    r17 = r2 + r0;
                    r5 = r18 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x11ea8;
                    pc=0x30400;
                    run_30400(); return;
                case 0x11ea8:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x11eb0;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x11eb0:
                    r16 = r17 + r16;
                    r5 = r19 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x11ec4;
                    pc=0x30400;
                    run_30400(); return;
                case 0x11ec4:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x11ecc;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x11ecc:
                    r16 = r16 + r2;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r17 + r0;
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x11ef4:
                    r4 = 4 << 16;
                    r4 = r4 + -27396;
                    r5 = r0 + 1;
                    r6 = r0 + 45;
                case 0x11f04:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f18;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x11f18:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1;
                    r31=0x11f20;
                    pc=0x29600;
                    run_29600(); return;
                case 0x11f20:
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x11f28;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x11f28:
                    /* Next insn is delay slot */ 
                    r16 = r16 - r2;
                    pc=0x11e78;
                    continue;
                case 0x11f30:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 92;
                    r31=0x11f3c;
                    pc=0x30600;
                    run_30600(); return;
                case 0x11f3c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r2 + r0;
                        pc=0x11e3c;
                        continue;
                    }
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r16 + r0;
                    pc=0x11e40;
                    continue;
                case 0x11f4c:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r18 = r2 + -10480;
                    pc=0x11e40;
                    continue;
                case 0x11f58:
                    r4 = 4 << 16;
                    r4 = r4 + -27348;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 47;
                    pc=0x11f04;
                    continue;
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    r4 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r5 = r5 + -10516;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x1202c;
                    pc=0x30200;
                    run_30200(); return;
                case 0x1202c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12094;
                        continue;
                    }
                    r3 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12078;
                        continue;
                    }
                case 0x12044:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = 4 << 16;
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r4 + -27300;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 27;
                    r31=0x12060;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x12060:
                    r2 = r0 + 1;
                case 0x12064:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x12078:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1208c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x1208c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x12064;
                    continue;
                case 0x12094:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x120cc;
                        continue;
                    }
                case 0x120a8:
                    r3 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12044;
                        continue;
                    }
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x120c4;
                    pc=0x25e00;
                    run_25e00(); return;
                case 0x120c4:
                    /* Next insn is delay slot */ 
                    pc=0x1208c;
                    continue;
                case 0x120cc:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27272;
                    r31=0x120e4;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x120e4:
                    /* Next insn is delay slot */ 
                    pc=0x120a8;
                    continue;
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r29 = r29 + -168;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    r23 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r22 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r24 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    r25 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r23 ^ r22;
                    r11 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r24 & r2;
                    r6 = r25 >>> 27;
                    r2 = r2 ^ r22;
                    r3 = r25 << 5;
                    r30 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 | r6;
                    r2 = r2 + r11;
                    r2 = r2 + r3;
                    r6 = r24 << 30;
                    r3 = r24 >>> 2;
                    r8 = 23170 << 16;
                    r8 = r8 | 31129;
                    r24 = r6 | r3;
                    r2 = r30 + r2;
                    r30 = r2 + r8;
                    r2 = r24 ^ r23;
                    r12 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r25 & r2;
                    r6 = r30 >>> 27;
                    r2 = r2 ^ r23;
                    r3 = r30 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r12;
                    r2 = r2 + r3;
                    r6 = r25 << 30;
                    r3 = r25 >>> 2;
                    r25 = r6 | r3;
                    r2 = r22 + r2;
                    r22 = r2 + r8;
                    r2 = r25 ^ r24;
                    r7 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r2 = r30 & r2;
                    r6 = r22 >>> 27;
                    r2 = r2 ^ r24;
                    r3 = r22 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r7;
                    r2 = r2 + r3;
                    r6 = r30 << 30;
                    r3 = r30 >>> 2;
                    r30 = r6 | r3;
                    r2 = r23 + r2;
                    r23 = r2 + r8;
                    r2 = r30 ^ r25;
                    r9 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = r22 & r2;
                    r6 = r23 >>> 27;
                    r2 = r2 ^ r25;
                    r3 = r23 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r9;
                    r2 = r2 + r3;
                    r6 = r22 << 30;
                    r3 = r22 >>> 2;
                    r22 = r6 | r3;
                    r2 = r24 + r2;
                    r24 = r2 + r8;
                    r2 = r22 ^ r30;
                    r10 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r23 & r2;
                    r6 = r24 >>> 27;
                    r2 = r2 ^ r30;
                    r3 = r24 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r10;
                    r2 = r2 + r3;
                    r6 = r23 << 30;
                    r3 = r23 >>> 2;
                    r23 = r6 | r3;
                    r2 = r25 + r2;
                    r25 = r2 + r8;
                    r2 = r23 ^ r22;
                    r15 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                    r2 = r24 & r2;
                    r6 = r25 >>> 27;
                    r2 = r2 ^ r22;
                    r3 = r25 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r15;
                    r2 = r2 + r3;
                    r6 = r24 << 30;
                    r3 = r24 >>> 2;
                    r24 = r6 | r3;
                    r2 = r30 + r2;
                    r30 = r2 + r8;
                    r2 = r24 ^ r23;
                    r3 = readPages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff];
                    r2 = r25 & r2;
                    r2 = r2 ^ r23;
                    r6 = r30 >>> 27;
                    r2 = r2 + r3;
                    r3 = r30 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r3;
                    r6 = r25 << 30;
                    r3 = r25 >>> 2;
                    r25 = r6 | r3;
                    r2 = r22 + r2;
                    r22 = r2 + r8;
                    r2 = r25 ^ r24;
                    r6 = readPages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff];
                    r2 = r30 & r2;
                    r2 = r2 ^ r24;
                    r2 = r2 + r6;
                    r3 = r22 << 5;
                    r6 = r22 >>> 27;
                    r3 = r3 | r6;
                    r2 = r2 + r3;
                    r6 = r30 << 30;
                    r3 = r30 >>> 2;
                    r30 = r6 | r3;
                    r2 = r23 + r2;
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r23 = r2 + r8;
                    r2 = r30 ^ r25;
                    r13 = readPages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff];
                    r2 = r22 & r2;
                    r6 = r23 >>> 27;
                    r2 = r2 ^ r25;
                    r3 = r23 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r13;
                    r2 = r2 + r3;
                    r6 = r22 << 30;
                    r3 = r22 >>> 2;
                    r22 = r6 | r3;
                    r2 = r24 + r2;
                    r24 = r2 + r8;
                    r2 = r22 ^ r30;
                    r18 = readPages[(r5+36)>>>12][((r5+36)>>>2)&0x3ff];
                    r2 = r23 & r2;
                    r6 = r24 >>> 27;
                    r2 = r2 ^ r30;
                    r3 = r24 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r18;
                    r2 = r2 + r3;
                    r6 = r23 << 30;
                    r3 = r23 >>> 2;
                    r23 = r6 | r3;
                    r2 = r25 + r2;
                    r25 = r2 + r8;
                    r2 = r23 ^ r22;
                    r17 = readPages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff];
                    r2 = r24 & r2;
                    r6 = r25 >>> 27;
                    r2 = r2 ^ r22;
                    r3 = r25 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r17;
                    r2 = r2 + r3;
                    r6 = r24 << 30;
                    r3 = r24 >>> 2;
                    r24 = r6 | r3;
                    r2 = r30 + r2;
                    r30 = r2 + r8;
                    r2 = r24 ^ r23;
                    r3 = readPages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff];
                    r2 = r25 & r2;
                    r2 = r2 ^ r23;
                    r6 = r30 >>> 27;
                    r2 = r2 + r3;
                    r3 = r30 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r3;
                    r6 = r25 << 30;
                    r3 = r25 >>> 2;
                    r25 = r6 | r3;
                    r2 = r22 + r2;
                    r22 = r2 + r8;
                    r2 = r25 ^ r24;
                    r6 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r30 & r2;
                    r2 = r2 ^ r24;
                    r2 = r2 + r6;
                    r3 = r22 << 5;
                    r6 = r22 >>> 27;
                    r3 = r3 | r6;
                    r2 = r2 + r3;
                    r6 = r30 << 30;
                    r3 = r30 >>> 2;
                    r30 = r6 | r3;
                    r2 = r23 + r2;
                    r23 = r2 + r8;
                    r2 = r30 ^ r25;
                    r13 = readPages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff];
                    r2 = r22 & r2;
                    r6 = r23 >>> 27;
                    r2 = r2 ^ r25;
                    r3 = r23 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r13;
                    r2 = r2 + r3;
                    r6 = r22 << 30;
                    r3 = r22 >>> 2;
                    r22 = r6 | r3;
                    r2 = r24 + r2;
                    r24 = r2 + r8;
                    r2 = r22 ^ r30;
                    r17 = readPages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff];
                    r2 = r23 & r2;
                    r6 = r24 >>> 27;
                    r2 = r2 ^ r30;
                    r3 = r24 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r17;
                    r2 = r2 + r3;
                    r6 = r23 << 30;
                    r3 = r23 >>> 2;
                    r23 = r6 | r3;
                    r2 = r25 + r2;
                    r25 = r2 + r8;
                    r2 = r23 ^ r22;
                    r3 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    r2 = r24 & r2;
                    r2 = r2 ^ r22;
                    r6 = r25 >>> 27;
                    r2 = r2 + r3;
                    r3 = r25 << 5;
                    r3 = r3 | r6;
                    r2 = r2 + r3;
                    r2 = r30 + r2;
                    r30 = r2 + r8;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r6 = readPages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff];
                    r3 = r24 ^ r23;
                    r2 = r13 ^ r6;
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r11;
                    r3 = r25 & r3;
                    r16 = r2 << 1;
                    r2 = r2 >>> 31;
                    r16 = r16 | r2;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r16;
                    r3 = r3 + r2;
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r2 = r17 ^ r18;
                    r3 = r22 + r3;
                    r2 = r2 ^ r9;
                    r22 = r3 + r8;
                    r2 = r2 ^ r12;
                    r3 = r25 ^ r24;
                    r3 = r30 & r3;
                    r14 = r2 << 1;
                    r2 = r2 >>> 31;
                    r14 = r14 | r2;
                    r6 = r22 >>> 27;
                    r3 = r3 ^ r24;
                    r2 = r22 << 5;
                    r11 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    r13 = readPages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r14;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r2 = r11 ^ r13;
                    r3 = r23 + r3;
                    r2 = r2 ^ r10;
                    r23 = r3 + r8;
                    r2 = r2 ^ r7;
                    r3 = r30 ^ r25;
                    r3 = r22 & r3;
                    r13 = r2 << 1;
                    r2 = r2 >>> 31;
                    r13 = r13 | r2;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    r17 = readPages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r13;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r2 = r16 ^ r17;
                    r3 = r24 + r3;
                    r2 = r2 ^ r15;
                    r24 = r3 + r8;
                    r2 = r2 ^ r9;
                    r3 = r22 ^ r30;
                    r3 = r23 & r3;
                    r11 = r2 << 1;
                    r2 = r2 >>> 31;
                    r11 = r11 | r2;
                    r6 = r24 >>> 27;
                    r3 = r3 ^ r30;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r11;
                    r3 = r3 + r2;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r7 = r23 << 30;
                    r3 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r23 >>> 2;
                    r23 = r7 | r2;
                    r7 = readPages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff];
                    r2 = r14 ^ r3;
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r10;
                    r6 = r24 ^ r23;
                    r12 = r2 << 1;
                    r2 = r2 >>> 31;
                    r12 = r12 | r2;
                    r3 = r25 >>> 27;
                    r6 = r6 ^ r22;
                    r2 = r25 << 5;
                    r2 = r2 | r3;
                    r6 = r6 + r12;
                    r6 = r6 + r2;
                    r8 = 28377 << 16;
                    r8 = r8 | 60321;
                    r17 = readPages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff];
                    r6 = r30 + r6;
                    r30 = r6 + r8;
                    r7 = r24 << 30;
                    r6 = readPages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff];
                    r2 = r24 >>> 2;
                    r24 = r7 | r2;
                    r2 = r13 ^ r17;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r15;
                    r3 = r25 ^ r24;
                    r7 = r2 << 1;
                    r2 = r2 >>> 31;
                    r7 = r7 | r2;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r7;
                    r17 = readPages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r6 = readPages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff];
                    r2 = r11 ^ r17;
                    r17 = readPages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff];
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r17;
                    r3 = r22 + r3;
                    r22 = r3 + r8;
                    r9 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r9 = r9 | r2;
                    r6 = r22 >>> 27;
                    r3 = r3 ^ r24;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r9;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r6 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    r17 = readPages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff];
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    r2 = r12 ^ r6;
                    r2 = r2 ^ r18;
                    r2 = r2 ^ r17;
                    r3 = r23 + r3;
                    r23 = r3 + r8;
                    r10 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r10 = r10 | r2;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r10;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r6 = readPages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff];
                    r17 = readPages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff];
                    r2 = r7 ^ r16;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r17;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                    r15 = r2 << 1;
                    r3 = r23 ^ r22;
                    r2 = r2 >>> 31;
                    r15 = r15 | r2;
                    r6 = r24 >>> 27;
                    r3 = r3 ^ r30;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r15;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r6 = readPages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff];
                    r2 = r9 ^ r14;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r18;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r17 = r2 << 1;
                    r3 = r24 ^ r23;
                    r2 = r2 >>> 31;
                    r2 = r17 | r2;
                    r3 = r3 ^ r22;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r2;
                    r6 = r25 >>> 27;
                    r3 = r3 + r2;
                    r2 = r25 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r6 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r17 = readPages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff];
                    r2 = r10 ^ r13;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r17;
                    r3 = r30 + r3;
                    r30 = r3 + r8;
                    r18 = r2 << 1;
                    r3 = r25 ^ r24;
                    r2 = r2 >>> 31;
                    r18 = r18 | r2;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r18;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r6 = readPages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff];
                    r17 = readPages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff];
                    r2 = r15 ^ r11;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r17;
                    r3 = r22 + r3;
                    r22 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r2 = r6 | r2;
                    r3 = r3 ^ r24;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r2;
                    r6 = r22 >>> 27;
                    r3 = r3 + r2;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r17 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r6 = readPages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff];
                    r2 = r17 ^ r12;
                    r17 = readPages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff];
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r17;
                    r3 = r23 + r3;
                    r23 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r2 = r6 | r2;
                    r3 = r3 ^ r25;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r6 = r23 >>> 27;
                    r3 = r3 + r2;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r17 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r6 = readPages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff];
                    r2 = r18 ^ r7;
                    r2 = r2 ^ r17;
                    r2 = r2 ^ r6;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    r17 = r2 << 1;
                    r3 = r23 ^ r22;
                    r2 = r2 >>> 31;
                    r2 = r17 | r2;
                    r3 = r3 ^ r30;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r6 = r24 >>> 27;
                    r3 = r3 + r2;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r6 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r17 = readPages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff];
                    r2 = r6 ^ r9;
                    r2 = r2 ^ r16;
                    r2 = r2 ^ r17;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r24 ^ r23;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r25 << 5;
                    r6 = r25 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = readPages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff];
                    r2 = r6 ^ r10;
                    r2 = r2 ^ r14;
                    r2 = r2 ^ r17;
                    r3 = r30 + r3;
                    r30 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r25 ^ r24;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r23;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r30 << 5;
                    r6 = r30 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r22 + r3;
                    r2 = r6 ^ r15;
                    r2 = r2 ^ r13;
                    r2 = r2 ^ r16;
                    r22 = r3 + r8;
                    r16 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r16 = r16 | r2;
                    r6 = r22 >>> 27;
                    r3 = r3 ^ r24;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r16;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r17 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r6 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r3 = r23 + r3;
                    r2 = r17 ^ r6;
                    r2 = r2 ^ r11;
                    r2 = r2 ^ r14;
                    r23 = r3 + r8;
                    r14 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r14 = r14 | r2;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r14;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r2 = r17 ^ r18;
                    r2 = r2 ^ r12;
                    r2 = r2 ^ r13;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r23 ^ r22;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r24 << 5;
                    r6 = r24 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r6 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r3 = r25 + r3;
                    r2 = r16 ^ r6;
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r11;
                    r25 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r24 ^ r23;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r2 = r25 << 5;
                    r6 = r25 >>> 27;
                    r11 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r2 = r14 ^ r11;
                    r2 = r2 ^ r9;
                    r2 = r2 ^ r12;
                    r3 = r30 + r3;
                    r30 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r25 ^ r24;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r30 << 5;
                    r6 = r30 >>> 27;
                    r13 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r2 = r13 ^ r17;
                    r2 = r2 ^ r10;
                    r2 = r2 ^ r7;
                    r3 = r22 + r3;
                    r22 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r24;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r22 << 5;
                    r6 = r22 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = r23 + r3;
                    r2 = r6 ^ r7;
                    r2 = r2 ^ r15;
                    r2 = r2 ^ r9;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r19 = r6 | r2;
                    r23 = r3 + r8;
                    r3 = r22 ^ r30;
                    writePages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff] = r19;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    r11 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r13 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r19;
                    r17 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r2 = r11 ^ r13;
                    r2 = r2 ^ r17;
                    r2 = r2 ^ r10;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                    r6 = r2 << 1;
                    r3 = r23 ^ r22;
                    r2 = r2 >>> 31;
                    r17 = r6 | r2;
                    r3 = r3 ^ r30;
                    r6 = r24 >>> 27;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r17;
                    r3 = r3 + r2;
                    r7 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r7 | r2;
                    r6 = r24 | r23;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r6 = r6 & r22;
                    r3 = r24 & r23;
                    writePages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff] = r17;
                    r6 = r6 | r3;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r7 = r24 << 30;
                    r2 = r3 ^ r16;
                    r2 = r2 ^ r18;
                    r2 = r2 ^ r15;
                    r13 = r2 << 1;
                    r2 = r2 >>> 31;
                    r13 = r13 | r2;
                    r3 = r25 >>> 27;
                    r2 = r25 << 5;
                    r2 = r2 | r3;
                    r6 = r6 + r13;
                    r6 = r6 + r2;
                    r2 = r24 >>> 2;
                    r24 = r7 | r2;
                    r8 = 36635 << 16;
                    r8 = r8 | 48348;
                    r3 = r25 | r24;
                    r6 = r30 + r6;
                    writePages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff] = r13;
                    r30 = r6 + r8;
                    r3 = r3 & r23;
                    r6 = r25 & r24;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r7 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r2 = r19 ^ r14;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r7;
                    r12 = r2 << 1;
                    r2 = r2 >>> 31;
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r12 = r12 | r2;
                    r6 = r30 >>> 27;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r12;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r3 = r22 + r3;
                    writePages[(r5+36)>>>12][((r5+36)>>>2)&0x3ff] = r12;
                    r22 = r3 + r8;
                    r3 = r30 | r25;
                    r11 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = r30 & r25;
                    r3 = r3 & r24;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r17 ^ r11;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r18;
                    r11 = r2 << 1;
                    r2 = r2 >>> 31;
                    r11 = r11 | r2;
                    r6 = r22 >>> 27;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r11;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r3 = r23 + r3;
                    writePages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff] = r11;
                    r23 = r3 + r8;
                    r3 = r22 | r30;
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r6 = r22 & r30;
                    r3 = r3 & r25;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r13 ^ r7;
                    r7 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r7;
                    r10 = r2 << 1;
                    r2 = r2 >>> 31;
                    r10 = r10 | r2;
                    r6 = r23 >>> 27;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r10;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                    r3 = r23 | r22;
                    writePages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff] = r10;
                    r6 = r23 & r22;
                    r3 = r3 & r30;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r12 ^ r6;
                    r6 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r6;
                    r9 = r2 << 1;
                    r2 = r2 >>> 31;
                    r9 = r9 | r2;
                    r6 = r24 >>> 27;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r9;
                    r3 = r3 + r2;
                    r7 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r7 | r2;
                    writePages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff] = r9;
                    r6 = r24 | r23;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r3 = r24 & r23;
                    r6 = r6 & r22;
                    r6 = r6 | r3;
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r11 ^ r7;
                    r7 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 ^ r3;
                    r2 = r2 ^ r7;
                    r3 = r2 << 1;
                    r2 = r2 >>> 31;
                    r20 = r3 | r2;
                    r3 = r25 >>> 27;
                    r2 = r25 << 5;
                    r2 = r2 | r3;
                    r6 = r6 + r20;
                    r6 = r6 + r2;
                    r7 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r7 | r2;
                    r3 = r25 | r24;
                    writePages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff] = r20;
                    r2 = r25 & r24;
                    r6 = r30 + r6;
                    r3 = r3 & r23;
                    r30 = r6 + r8;
                    r3 = r3 | r2;
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r10 ^ r19;
                    r2 = r2 ^ r16;
                    r2 = r2 ^ r6;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r21 = r6 | r2;
                    r6 = r30 >>> 27;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r21;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r3 = r22 + r3;
                    r22 = r3 + r8;
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    r3 = r30 | r25;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r8;
                    r2 = r30 & r25;
                    writePages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff] = r21;
                    r3 = r3 & r24;
                    r7 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r3 | r2;
                    r2 = r9 ^ r17;
                    r2 = r2 ^ r14;
                    r2 = r2 ^ r7;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r2 = r6 | r2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r6 = r22 >>> 27;
                    writePages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff] = r2;
                    r3 = r3 + r2;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r3 = r23 + r3;
                    r23 = r3 + r8;
                    r3 = r22 | r30;
                    r7 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r22 & r30;
                    r3 = r3 & r25;
                    r3 = r3 | r2;
                    r2 = r20 ^ r13;
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r16;
                    r18 = r2 << 1;
                    r2 = r2 >>> 31;
                    r18 = r18 | r2;
                    r6 = r23 >>> 27;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r18;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r3 = r24 + r3;
                    r24 = r3 + r8;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r18;
                    r3 = r23 | r22;
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r23 & r22;
                    r3 = r3 & r30;
                    r3 = r3 | r2;
                    r2 = r21 ^ r12;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r14;
                    r7 = r2 << 1;
                    r2 = r2 >>> 31;
                    r2 = r7 | r2;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    r6 = r24 >>> 27;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r3 = r3 + r2;
                    r2 = r24 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r3 = r25 + r3;
                    r25 = r3 + r8;
                    r6 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r24 | r23;
                    r2 = r24 & r23;
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r3 & r22;
                    r3 = r3 | r2;
                    r2 = r6 ^ r11;
                    r6 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 ^ r7;
                    r2 = r2 ^ r6;
                    r7 = r2 << 1;
                    r2 = r2 >>> 31;
                    r2 = r7 | r2;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    r6 = r25 >>> 27;
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    r3 = r3 + r2;
                    r2 = r25 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r3 = r30 + r3;
                    r30 = r3 + r8;
                    r3 = r25 | r24;
                    r6 = r25 & r24;
                    r3 = r3 & r23;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r18 ^ r10;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r7;
                    r16 = r2 << 1;
                    r2 = r2 >>> 31;
                    r16 = r16 | r2;
                    r6 = r30 >>> 27;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r16;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r3 = r22 + r3;
                    r22 = r3 + r8;
                    r3 = r30 | r25;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r16;
                    r6 = r30 & r25;
                    r3 = r3 & r24;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r6 ^ r9;
                    r2 = r2 ^ r19;
                    r2 = r2 ^ r7;
                    r14 = r2 << 1;
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    r2 = r2 >>> 31;
                    r14 = r14 | r2;
                    r6 = r22 >>> 27;
                    r2 = r22 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r14;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r3 = r23 + r3;
                    r23 = r3 + r8;
                    r3 = r22 | r30;
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r14;
                    r6 = r22 & r30;
                    r3 = r3 & r25;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r7 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r6 ^ r20;
                    r2 = r2 ^ r17;
                    r2 = r2 ^ r7;
                    r15 = r2 << 1;
                    r2 = r2 >>> 31;
                    r15 = r15 | r2;
                    r6 = r23 >>> 27;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r15;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r3 = r24 + r3;
                    r2 = r16 ^ r21;
                    r24 = r3 + r8;
                    r2 = r2 ^ r13;
                    r3 = r23 | r22;
                    r6 = r23 & r22;
                    r2 = r2 ^ r19;
                    r3 = r3 & r30;
                    r3 = r3 | r6;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    writePages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff] = r15;
                    r3 = r3 + r6;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r6;
                    r2 = r24 << 5;
                    r6 = r24 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r25 + r3;
                    r25 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r3 = r24 | r23;
                    r6 = r24 & r23;
                    r3 = r3 & r22;
                    r3 = r3 | r6;
                    r6 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r14 ^ r6;
                    r2 = r2 ^ r12;
                    r2 = r2 ^ r17;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r25 << 5;
                    r6 = r25 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r3 = r30 + r3;
                    r2 = r15 ^ r18;
                    r30 = r3 + r7;
                    r2 = r2 ^ r11;
                    r3 = r25 | r24;
                    r6 = r25 & r24;
                    r2 = r2 ^ r13;
                    r3 = r3 & r23;
                    r3 = r3 | r6;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r30 << 5;
                    r6 = r30 >>> 27;
                    r13 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r17 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r2 = r13 ^ r17;
                    r3 = r22 + r3;
                    r2 = r2 ^ r10;
                    r22 = r3 + r7;
                    r2 = r2 ^ r12;
                    r3 = r30 | r25;
                    r6 = r30 & r25;
                    r3 = r3 & r24;
                    r8 = r2 << 1;
                    r2 = r2 >>> 31;
                    r8 = r8 | r2;
                    r3 = r3 | r6;
                    r2 = r22 << 5;
                    r6 = r22 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r8;
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r3 = r23 + r3;
                    r23 = r3 + r7;
                    r3 = r22 | r30;
                    r6 = r22 & r30;
                    r3 = r3 & r25;
                    r7 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r3 = r3 | r6;
                    r6 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r13 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r6 ^ r7;
                    r2 = r2 ^ r9;
                    r2 = r2 ^ r11;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r23 << 5;
                    r6 = r23 >>> 27;
                    r2 = r2 | r6;
                    r11 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r3 = r24 + r3;
                    r2 = r13 ^ r16;
                    r24 = r3 + r11;
                    r2 = r2 ^ r20;
                    r3 = r23 | r22;
                    r6 = r23 & r22;
                    r2 = r2 ^ r10;
                    r3 = r3 & r30;
                    r3 = r3 | r6;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r24 << 5;
                    r6 = r24 >>> 27;
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r7 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r7 | r2;
                    r2 = r8 ^ r14;
                    r2 = r2 ^ r21;
                    r2 = r2 ^ r9;
                    r3 = r25 + r3;
                    r25 = r3 + r11;
                    r6 = r24 ^ r23;
                    r3 = r2 << 1;
                    r2 = r2 >>> 31;
                    r3 = r3 | r2;
                    r6 = r6 ^ r22;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r3;
                    r6 = r6 + r3;
                    r2 = r25 << 5;
                    r3 = r25 >>> 27;
                    r2 = r2 | r3;
                    r6 = r6 + r2;
                    r12 = 51810 << 16;
                    r12 = r12 | 49622;
                    r17 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r6 = r30 + r6;
                    r30 = r6 + r12;
                    r7 = r24 << 30;
                    r6 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r24 >>> 2;
                    r24 = r7 | r2;
                    r2 = r17 ^ r15;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r20;
                    r3 = r25 ^ r24;
                    r6 = r2 << 1;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r23;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r30 << 5;
                    r6 = r30 >>> 27;
                    r7 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r11 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r2 = r7 ^ r11;
                    r2 = r2 ^ r18;
                    r2 = r2 ^ r21;
                    r3 = r22 + r3;
                    r22 = r3 + r12;
                    r6 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r6 = r6 | r2;
                    r3 = r3 ^ r24;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r6;
                    r3 = r3 + r6;
                    r2 = r22 << 5;
                    r6 = r22 >>> 27;
                    r2 = r2 | r6;
                    r13 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r6 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r7 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r13 ^ r17;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r7;
                    r3 = r23 + r3;
                    r23 = r3 + r12;
                    r6 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r21 = r6 | r2;
                    r3 = r3 ^ r25;
                    r6 = r23 >>> 27;
                    r2 = r23 << 5;
                    r11 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r13 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r21;
                    r17 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                    r2 = r11 ^ r13;
                    r2 = r2 ^ r17;
                    r2 = r2 ^ r18;
                    r3 = r24 + r3;
                    r24 = r3 + r12;
                    r6 = r2 << 1;
                    r3 = r23 ^ r22;
                    r2 = r2 >>> 31;
                    r2 = r6 | r2;
                    r3 = r3 ^ r30;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    r6 = r24 >>> 27;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + r2;
                    r2 = r24 << 5;
                    r7 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r11 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = r6 | r2;
                    r2 = r7 ^ r8;
                    r2 = r2 ^ r16;
                    r2 = r2 ^ r11;
                    r3 = r25 + r3;
                    r18 = r2 << 1;
                    r2 = r2 >>> 31;
                    r25 = r3 + r12;
                    r18 = r18 | r2;
                    r3 = r24 ^ r23;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r18;
                    r6 = r25 >>> 27;
                    r3 = r3 ^ r22;
                    r2 = r25 << 5;
                    r13 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r18;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r24 = r6 | r2;
                    r2 = r21 ^ r13;
                    r2 = r2 ^ r14;
                    r2 = r2 ^ r17;
                    r3 = r30 + r3;
                    r30 = r3 + r12;
                    r10 = r2 << 1;
                    r3 = r25 ^ r24;
                    r2 = r2 >>> 31;
                    r10 = r10 | r2;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r10;
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r10;
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r17 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r25 = r6 | r2;
                    r6 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r3 = r22 + r3;
                    r2 = r17 ^ r6;
                    r2 = r2 ^ r15;
                    r2 = r2 ^ r16;
                    r11 = r2 << 1;
                    r2 = r2 >>> 31;
                    r22 = r3 + r12;
                    r11 = r11 | r2;
                    r3 = r30 ^ r25;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r11;
                    r6 = r22 >>> 27;
                    r3 = r3 ^ r24;
                    r2 = r22 << 5;
                    r7 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r11;
                    r13 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r2 = r18 ^ r7;
                    r2 = r2 ^ r13;
                    r2 = r2 ^ r14;
                    r3 = r23 + r3;
                    r23 = r3 + r12;
                    r13 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r13 = r13 | r2;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r13;
                    r2 = r2 | r6;
                    r3 = r3 + r13;
                    r17 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r6 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r2 = r10 ^ r17;
                    r2 = r2 ^ r6;
                    r2 = r2 ^ r15;
                    r3 = r24 + r3;
                    r14 = r2 << 1;
                    r2 = r2 >>> 31;
                    r24 = r3 + r12;
                    r14 = r14 | r2;
                    r3 = r23 ^ r22;
                    writePages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff] = r14;
                    r6 = r24 >>> 27;
                    r3 = r3 ^ r30;
                    r2 = r24 << 5;
                    r7 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r14;
                    r17 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r23 = r6 | r2;
                    r6 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r11 ^ r7;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                    r2 = r2 ^ r17;
                    r2 = r2 ^ r6;
                    r3 = r25 + r3;
                    r25 = r3 + r12;
                    r15 = r2 << 1;
                    r3 = r24 ^ r23;
                    r2 = r2 >>> 31;
                    r15 = r15 | r2;
                    r6 = r25 >>> 27;
                    r3 = r3 ^ r22;
                    r2 = r25 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r15;
                    writePages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff] = r15;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r7 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r24 = r6 | r2;
                    r2 = r13 ^ r21;
                    r2 = r2 ^ r8;
                    r2 = r2 ^ r7;
                    r3 = r30 + r3;
                    r30 = r3 + r12;
                    r16 = r2 << 1;
                    r3 = r25 ^ r24;
                    r2 = r2 >>> 31;
                    r16 = r16 | r2;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    writePages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff] = r16;
                    r2 = r2 | r6;
                    r3 = r3 + r16;
                    r17 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r25 << 30;
                    r2 = r25 >>> 2;
                    r25 = r6 | r2;
                    r6 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r7 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r14 ^ r17;
                    r2 = r2 ^ r6;
                    r3 = r22 + r3;
                    r2 = r2 ^ r7;
                    r22 = r3 + r12;
                    r7 = r2 << 1;
                    r3 = r30 ^ r25;
                    r2 = r2 >>> 31;
                    r7 = r7 | r2;
                    r6 = r22 >>> 27;
                    r3 = r3 ^ r24;
                    r2 = r22 << 5;
                    writePages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff] = r7;
                    r2 = r2 | r6;
                    r3 = r3 + r7;
                    r17 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r6 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r6 | r2;
                    r2 = r15 ^ r18;
                    r2 = r2 ^ r17;
                    r3 = r23 + r3;
                    r2 = r2 ^ r8;
                    r23 = r3 + r12;
                    r8 = r2 << 1;
                    r3 = r22 ^ r30;
                    r2 = r2 >>> 31;
                    r8 = r8 | r2;
                    r6 = r23 >>> 27;
                    r3 = r3 ^ r25;
                    r2 = r23 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r8;
                    writePages[(r5+36)>>>12][((r5+36)>>>2)&0x3ff] = r8;
                    r3 = r3 + r2;
                    r6 = r22 << 30;
                    r2 = r22 >>> 2;
                    r22 = r6 | r2;
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r6 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r10 = r16 ^ r10;
                    r10 = r10 ^ r2;
                    r10 = r10 ^ r6;
                    r9 = r10 << 1;
                    r10 = r10 >>> 31;
                    r9 = r9 | r10;
                    writePages[(r5+40)>>>12][((r5+40)>>>2)&0x3ff] = r9;
                    r3 = r24 + r3;
                    r7 = r7 ^ r11;
                    r11 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r24 = r3 + r12;
                    r3 = r23 ^ r22;
                    r6 = r24 >>> 27;
                    r3 = r3 ^ r30;
                    r2 = r24 << 5;
                    r7 = r7 ^ r11;
                    r2 = r2 | r6;
                    r7 = r7 ^ r17;
                    r3 = r3 + r9;
                    r3 = r3 + r2;
                    r6 = r23 << 30;
                    r2 = r23 >>> 2;
                    r10 = r7 << 1;
                    r7 = r7 >>> 31;
                    r23 = r6 | r2;
                    r10 = r10 | r7;
                    r3 = r25 + r3;
                    r25 = r3 + r12;
                    writePages[(r5+44)>>>12][((r5+44)>>>2)&0x3ff] = r10;
                    r3 = r24 ^ r23;
                    r6 = r25 >>> 27;
                    r3 = r3 ^ r22;
                    r2 = r25 << 5;
                    r8 = r8 ^ r13;
                    r13 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r17 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r2 = r2 | r6;
                    r3 = r3 + r10;
                    r3 = r3 + r2;
                    r6 = r24 << 30;
                    r2 = r24 >>> 2;
                    r8 = r8 ^ r13;
                    r24 = r6 | r2;
                    r8 = r8 ^ r17;
                    r3 = r30 + r3;
                    r30 = r3 + r12;
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    r11 = r8 << 1;
                    r3 = r25 ^ r24;
                    r8 = r8 >>> 31;
                    r11 = r11 | r8;
                    r6 = r30 >>> 27;
                    r3 = r3 ^ r23;
                    r2 = r30 << 5;
                    r2 = r2 | r6;
                    r3 = r3 + r11;
                    r3 = r3 + r2;
                    r7 = r25 << 30;
                    r2 = r25 >>> 2;
                    writePages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff] = r11;
                    r25 = r7 | r2;
                    r9 = r9 ^ r14;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r9 = r9 ^ r21;
                    r9 = r9 ^ r2;
                    r3 = r22 + r3;
                    r22 = r3 + r12;
                    r6 = r30 ^ r25;
                    r3 = r9 << 1;
                    r9 = r9 >>> 31;
                    r3 = r3 | r9;
                    r6 = r6 ^ r24;
                    writePages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff] = r3;
                    r6 = r6 + r3;
                    r2 = r22 << 5;
                    r3 = r22 >>> 27;
                    r2 = r2 | r3;
                    r6 = r6 + r2;
                    r3 = r30 << 30;
                    r2 = r30 >>> 2;
                    r30 = r3 | r2;
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r10 = r10 ^ r15;
                    r10 = r10 ^ r3;
                    r10 = r10 ^ r13;
                    r6 = r23 + r6;
                    r23 = r6 + r12;
                    r3 = r10 << 1;
                    r6 = r22 ^ r30;
                    r10 = r10 >>> 31;
                    r3 = r3 | r10;
                    r6 = r6 ^ r25;
                    writePages[(r5+56)>>>12][((r5+56)>>>2)&0x3ff] = r3;
                    r6 = r6 + r3;
                    r2 = r23 << 5;
                    r3 = r23 >>> 27;
                    r2 = r2 | r3;
                    r11 = r11 ^ r16;
                    r6 = r6 + r2;
                    r3 = r22 << 30;
                    r2 = r22 >>> 2;
                    r11 = r11 ^ r18;
                    r22 = r3 | r2;
                    r11 = r11 ^ r21;
                    r6 = r24 + r6;
                    r24 = r6 + r12;
                    r3 = r11 << 1;
                    r6 = r23 ^ r22;
                    r11 = r11 >>> 31;
                    r3 = r3 | r11;
                    r6 = r6 ^ r30;
                    writePages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff] = r3;
                    r6 = r6 + r3;
                    r2 = r24 << 5;
                    r3 = r24 >>> 27;
                    r2 = r2 | r3;
                    r6 = r6 + r2;
                    r6 = r25 + r6;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r25 = r6 + r12;
                    r2 = r2 + r25;
                    r5 = r23 << 30;
                    r3 = r23 >>> 2;
                    r23 = r5 | r3;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r3 = r3 + r24;
                    r2 = r2 + r23;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 + r22;
                    r2 = r2 + r30;
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 168;
                    pc=r31;
                    return;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    r2 = 26437 << 16;
                    r2 = r2 | 8961;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = 61389 << 16;
                    r2 = 39098 << 16;
                    r3 = r3 | 43913;
                    r2 = r2 | 56574;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r3 = 4146 << 16;
                    r2 = 50130 << 16;
                    r3 = r3 | 21622;
                    r2 = r2 | 57840;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r2;
                    writePages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    pc=r31;
                    return;
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r4 = r6 << 3;
                    r3 = r2 >>> 3;
                    r2 = r2 + r4;
                    writePages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff] = r2;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r21 = r5 + r0;
                    r20 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r3 & 63;
                        pc=0x13e5c;
                        continue;
                    }
                    r7 = r3 & 63;
                    r2 = readPages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r2;
                case 0x13e5c:
                    r3 = readPages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff];
                    r2 = r20 >>> 29;
                    r3 = r3 + r2;
                    r2 = r7 + r20;
                    r2 = (r2&0xffffffffL) < (64&0xffffffffL) ? 1 : 0;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x13eb4;
                        continue;
                    }
                    r18 = r0 + r0;
                case 0x13e7c:
                    r4 = r19 + r7;
                    r6 = r20 - r18;
                    r5 = r21 + r18;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 28;
                    r31=0x13e90;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x13e90:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x13eb4:
                    r2 = r0 + 64;
                    r18 = r2 - r7;
                    r4 = r19 + r7;
                    r4 = r4 + 28;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x13ecc;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x13ecc:
                    r5 = r19 + 28;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x13ed8;
                    pc=0x12200;
                    run_12200(); return;
                case 0x13ed8:
                    r3 = r18 + 63;
                    r2 = ((r3 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13f10;
                        continue;
                    }
                    r17 = r3 + r0;
                    r16 = r18 + r21;
                case 0x13ef0:
                    r5 = r16 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + 64;
                    r31=0x13f00;
                    pc=0x12200;
                    run_12200(); return;
                case 0x13f00:
                    r2 = ((r17 & 0xffffffffL) < (r20 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 + 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 64;
                        pc=0x13ef0;
                        continue;
                    }
                    r16 = r16 + 64;
                case 0x13f10:
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    pc=0x13e7c;
                    continue;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r5;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r6 = r0 + r0;
                    r7 = r0 + 3;
                    r5 = r29 + 16;
                case 0x14040:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 20;
                        pc=0x14050;
                        continue;
                    }
                    r3 = r0 + 20;
                    r3 = r0 + 16;
                case 0x14050:
                    r4 = r19 + r3;
                    r3 = r6 & 3;
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r3 = r7 - r3;
                    r3 = r3 << 3;
                    r2 = r2 >>> (r3&0x1f);
                    r6 = r6 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = (r6&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x14040;
                        continue;
                    }
                    r5 = r5 + 1;
                    r3 = readPages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r20 = r2 + -10476;
                    r2 = r3 >>> 3;
                    r3 = r3 + 8;
                    writePages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff] = r3;
                    r3 = (r3&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 & 63;
                        pc=0x140b0;
                        continue;
                    }
                    r5 = r2 & 63;
                    r2 = readPages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r2;
                case 0x140b0:
                    r2 = r5 + 1;
                    r2 = (r2&0xffffffffL) < (64&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14320;
                        run_14200(); return;
                    }
                    r18 = r0 + r0;
                    r23 = r19 + 28;
                case 0x140c8:
                    r4 = r19 + r5;
                    r6 = r0 + 1;
                    r4 = r4 + 28;
                    r6 = r6 - r18;
                    /* Next insn is delay slot */ 
                    r5 = r20 + r18;
                    r31=0x140e0;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x140e0:
                    r4 = readPages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff];
                    r2 = r0 + 448;
                    r3 = r4 & 504;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x14168;
                        continue;
                    }
                    r6 = r4 + r0;
                    r2 = 4 << 16;
                    r20 = r2 + -10472;
                    r30 = r0 + 64;
                    r22 = r0 + 1;
                    r21 = r0 + 448;
                case 0x14108:
                    r2 = r6 + 8;
                    r3 = r6 >>> 3;
                    writePages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff] = r2;
                    r2 = (r2&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 & 63;
                        pc=0x14130;
                        continue;
                    }
                    r3 = r3 & 63;
                    r2 = readPages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r2;
                case 0x14130:
                    r2 = r3 + 1;
                    r2 = (r2&0xffffffffL) < (64&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x142c4;
                        run_14200(); return;
                    }
                    r18 = r0 + r0;
                case 0x14140:
                    r4 = r19 + r3;
                    r4 = r4 + 28;
                    r6 = r22 - r18;
                    /* Next insn is delay slot */ 
                    r5 = r20 + r18;
                    r31=0x14154;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x14154:
                    r4 = readPages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff];
                    r2 = r4 & 504;
                    if(r2 != r21) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x14108;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x14168:
                    r2 = r4 + 64;
                    r3 = r4 >>> 3;
                    writePages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff] = r2;
                    r2 = (r2&0xffffffffL) < (64&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 & 63;
                        pc=0x14190;
                        continue;
                    }
                    r3 = r3 & 63;
                    r2 = readPages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r2;
                case 0x14190:
                    r2 = r3 + 8;
                    r2 = (r2&0xffffffffL) < (64&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x14258;
                        run_14200(); return;
                    }
                    r18 = r0 + r0;
                case 0x141a0:
                    r4 = r19 + r3;
                    r2 = r29 + 16;
                    r6 = r0 + 8;
                    r6 = r6 - r18;
                    r5 = r2 + r18;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 28;
                    r31=0x141bc;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x141bc:
                    r5 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = r0 + 3;
                case 0x141c8:
                    r4 = r6 >>> 2;
                    r4 = r4 << 2;
                    r3 = r6 & 3;
                    r4 = r4 + r19;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r7 - r3;
                    r3 = r3 << 3;
                    r2 = r2 >>> (r3&0x1f);
                    r6 = r6 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x141c8;
                        continue;
                    }
                    r5 = r5 + 1;
                    r4 = r23 + r0;
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 64;
                    r31=0x1420c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1420c:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r0;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r0;
                    writePages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff] = r0;
                    writePages[(r19+12)>>>12][((r19+12)>>>2)&0x3ff] = r0;
                    writePages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff] = r0;
                    writePages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff] = r0;
                    writePages[(r19+24)>>>12][((r19+24)>>>2)&0x3ff] = r0;
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x14258:
                    r2 = r0 + 64;
                    r18 = r2 - r3;
                    r4 = r19 + r3;
                    r4 = r4 + 28;
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x14274;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x14274:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x14280;
                    pc=0x12200;
                    run_12200(); return;
                case 0x14280:
                    r3 = r18 + 63;
                    r2 = (r3&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142bc;
                        continue;
                    }
                    r2 = r29 + 16;
                    r17 = r3 + r0;
                    r16 = r18 + r2;
                case 0x1429c:
                    r5 = r16 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + 64;
                    r31=0x142ac;
                    pc=0x12200;
                    run_12200(); return;
                case 0x142ac:
                    r2 = (r17&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    r18 = r18 + 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 64;
                        pc=0x1429c;
                        continue;
                    }
                    r16 = r16 + 64;
                case 0x142bc:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x141a0;
                    run_14000(); return;
                case 0x142c4:
                    r18 = r30 - r3;
                    r4 = r19 + r3;
                    r4 = r4 + 28;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x142dc;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x142dc:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x142e8;
                    pc=0x12200;
                    run_12200(); return;
                case 0x142e8:
                    r2 = r18 + 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14318;
                        continue;
                    }
                    r17 = r2 + r0;
                    r16 = r18 + r20;
                case 0x142fc:
                    r5 = r16 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + 64;
                    r31=0x1430c;
                    pc=0x12200;
                    run_12200(); return;
                case 0x1430c:
                    r18 = r18 + 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 64;
                        pc=0x142fc;
                        continue;
                    }
                    r16 = r16 + 64;
                case 0x14318:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x14140;
                    run_14000(); return;
                case 0x14320:
                    r2 = r0 + 64;
                    r18 = r2 - r5;
                    r4 = r19 + r5;
                    r4 = r4 + 28;
                    r5 = r20 + r0;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r19 + 28;
                    r31=0x14340;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x14340:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x1434c;
                    pc=0x12200;
                    run_12200(); return;
                case 0x1434c:
                    r2 = r18 + 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1437c;
                        continue;
                    }
                    r17 = r2 + r0;
                    r16 = r18 + r20;
                case 0x14360:
                    r5 = r16 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + 64;
                    r31=0x14370;
                    pc=0x12200;
                    run_12200(); return;
                case 0x14370:
                    r18 = r18 + 64;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 64;
                        pc=0x14360;
                        continue;
                    }
                    r16 = r16 + 64;
                case 0x1437c:
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x140c8;
                    run_14000(); return;
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + r0;
                        pc=0x14430;
                        continue;
                    }
                    r7 = r0 + r0;
                case 0x14408:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14438;
                        continue;
                    }
                    r7 = r7 + 1;
                    r2 = ((r7 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x14408;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x14430:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x14438:
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x14448;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = r0 + 1;
                case 0x14448:
                    /* Next insn is delay slot */ 
                    r2 = r3 + r0;
                    pc=r31;
                    return;
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r2 = readPages[(r28+-32624)>>>12][((r28+-32624)>>>2)&0x3ff];
                    r29 = r29 + -104;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r30;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r23;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r22;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r21;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r20;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r19;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r18;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r16;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r5;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r7;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 58;
                    r30 = r4 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r23 = r6 + r0;
                        pc=0x15704;
                        run_15600(); return;
                    }
                    r23 = r6 + r0;
                case 0x14650:
                    if(r30 <= 0) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + -1;
                        pc=0x1483c;
                        run_14800(); return;
                    }
                    r7 = r0 + -1;
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r0;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156f4;
                        run_15600(); return;
                    }
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10240)>>>12][((r2+-10240)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x146f8;
                        continue;
                    }
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156f4;
                        run_15600(); return;
                    }
                case 0x14688:
                    r4 = 4 << 16;
                    r4 = r4 + -27240;
                    r1 = 4 << 16;
                    writePages[(r1+-10220)>>>12][((r1+-10220)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10224)>>>12][((r1+-10224)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x146b0;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x146b0:
                    r1 = 4 << 16;
                    writePages[(r1+-10228)>>>12][((r1+-10228)>>>2)&0x3ff] = r2;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r4 = r2 + r0;
                    r2 = r0 + 45;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r16 = r23 + r0;
                        pc=0x156e0;
                        run_15600(); return;
                    }
                    r16 = r23 + r0;
                    r2 = r0 + 43;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x156d0;
                        run_15600(); return;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156bc;
                        run_15600(); return;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10232)>>>12][((r1+-10232)>>>2)&0x3ff] = r0;
                case 0x146e8:
                    r2 = r0 + 1;
                    r23 = r16 + r0;
                    r1 = 4 << 16;
                    writePages[(r1+-10240)>>>12][((r1+-10240)>>>2)&0x3ff] = r2;
                case 0x146f8:
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10236)>>>12][((r5+-10236)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1471c;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148a8;
                        run_14800(); return;
                    }
                case 0x1471c:
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10220)>>>12][((r2+-10220)>>>2)&0x3ff];
                    r2 = r8 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14740;
                        continue;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10220)>>>12][((r1+-10220)>>>2)&0x3ff] = r8;
                case 0x14740:
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10224)>>>12][((r2+-10224)>>>2)&0x3ff];
                    r2 = r8 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14760;
                        continue;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10224)>>>12][((r1+-10224)>>>2)&0x3ff] = r8;
                case 0x14760:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10232)>>>12][((r3+-10232)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15608;
                        run_15600(); return;
                    }
                case 0x14774:
                    if(r8 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x155c4;
                        run_15400(); return;
                    }
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r4;
                    r5 = 4 << 16;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -10456;
                    r31=0x14798;
                    pc=0x2fc00;
                    run_2fc00(); return;
                case 0x14798:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x155fc;
                        run_15400(); return;
                    }
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10220)>>>12][((r3+-10220)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10224)>>>12][((r2+-10224)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x155ec;
                        run_15400(); return;
                    }
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x147d8;
                        continue;
                    }
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x147d8;
                    pc=0x15800;
                    run_15800(); return;
                case 0x147d8:
                    r8 = r30 + r0;
                    r1 = 4 << 16;
                    writePages[(r1+-10220)>>>12][((r1+-10220)>>>2)&0x3ff] = r30;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r30;
                case 0x147e8:
                    if(r8 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x155c4;
                        run_15400(); return;
                    }
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r6;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    r2 = r0 + 45;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14870;
                        continue;
                    }
                case 0x14814:
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10232)>>>12][((r2+-10232)>>>2)&0x3ff];
                    r7 = r0 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1483c;
                        continue;
                    }
                    r8 = r8 + 1;
                    r7 = r0 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r3;
                case 0x1483c:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r30 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r23 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r22 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r21 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r20 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r19 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r18 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r16 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r7 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 104;
                    pc=r31;
                    return;
                case 0x14870:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14814;
                        continue;
                    }
                    r6 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14898;
                        continue;
                    }
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x155bc;
                        run_15400(); return;
                    }
                case 0x14898:
                    r2 = r3 + r2;
                    r5 = r2 + 1;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                case 0x148a8:
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14950;
                        continue;
                    }
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15000;
                        run_15000(); return;
                    }
                    r4 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14950;
                        continue;
                    }
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15000;
                        run_15000(); return;
                    }
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r23 + r0;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14944;
                        continue;
                    }
                    r2 = r3 + r0;
                    r4 = r23 + r0;
                case 0x1491c:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        r3 = r6 + r0;
                        pc=0x14948;
                        continue;
                    }
                    r3 = r6 + r0;
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r6 + 1;
                    r3 = r2 << 24;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1491c;
                        continue;
                    }
                case 0x14944:
                    r3 = r0 + r0;
                case 0x14948:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15000;
                        run_15000(); return;
                    }
                case 0x14950:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r16 = tmp;
                    r5 = r5 + 1;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r5 = r23 + r0;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x149a4;
                        continue;
                    }
                    r2 = r3 + r0;
                    r4 = r23 + r0;
                case 0x1497c:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        r6 = r5 + r0;
                        pc=0x149a8;
                        continue;
                    }
                    r6 = r5 + r0;
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 1;
                    r3 = r2 << 24;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1497c;
                        continue;
                    }
                case 0x149a4:
                    r6 = r0 + r0;
                case 0x149a8:
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10236)>>>12][((r5+-10236)>>>2)&0x3ff];
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r7 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x149d4;
                        continue;
                    }
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r8 = r2 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                case 0x149d4:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f94;
                        run_14e00(); return;
                    }
                    r17 = r0 + 58;
                    if(r16 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14f94;
                        run_14e00(); return;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 87;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14b0c;
                        run_14a00(); return;
                    }
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    r2 = r4 << 24;
                    r17 = r2 >> 24;
                    r3 = r0 + 58;
                    if(r17 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x14a1c;
                        continue;
                    }
                case 0x14a14:
                    /* Next insn is delay slot */ 
                    r7 = r16 + r0;
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14a1c:
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14aec;
                        continue;
                    }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a60;
                        continue;
                    }
                case 0x14a3c:
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r7;
                    r8 = r2 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                case 0x14a50:
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x14a14;
                    continue;
                case 0x14a60:
                    r3 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    if(r3 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x14a98;
                        continue;
                    }
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r3 << 2;
                    r2 = r2 + r4;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r3;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x14a50;
                    continue;
                case 0x14a98:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ac4;
                        continue;
                    }
                case 0x14aa8:
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r16;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r0 + 58;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14a50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r0 + 63;
                    pc=0x14a50;
                    continue;
                case 0x14ac4:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = r5 + -27224;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r16 + r0;
                    r31=0x14ae4;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14ae4:
                    /* Next insn is delay slot */ 
                    pc=0x14aa8;
                    continue;
                case 0x14aec:
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14a3c;
                        continue;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x14a50;
                    continue;
                case 0x14b0c:
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 59;
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14a00;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f08;
                        run_14e00(); return;
                    }
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r5;
                    r8 = r2 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                case 0x14b54:
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10244)>>>12][((r5+-10244)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r20 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ba0;
                        continue;
                    }
                    r2 = r0 + 61;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14ba0;
                        continue;
                    }
                case 0x14b84:
                    r5 = r5 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r20 = r20 + 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ba0;
                        continue;
                    }
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14b84;
                        continue;
                    }
                case 0x14ba0:
                    r19 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e18;
                        run_14e00(); return;
                    }
                    r21 = r0 + r0;
                    r17 = r19 + r0;
                    r18 = r19 + r0;
                case 0x14bc4:
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10236)>>>12][((r5+-10236)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r20 - r5;
                    r31=0x14bd8;
                    pc=0x30200;
                    run_30200(); return;
                case 0x14bd8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14eb0;
                        run_14e00(); return;
                    }
                case 0x14be0:
                    r17 = r17 + 16;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r19 = r19 + 16;
                    r18 = r18 + 16;
                    r22 = r22 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x14bc4;
                        continue;
                    }
                    r21 = r21 + 1;
                case 0x14bfc:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c1c;
                        continue;
                    }
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e2c;
                        run_14e00(); return;
                    }
                case 0x14c1c:
                    r4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e18;
                        run_14e00(); return;
                    }
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d3c;
                        continue;
                    }
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14cd0;
                        continue;
                    }
                    r2 = r20 + 1;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r2;
                case 0x14c58:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14c68;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x14c68:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r4 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14c94;
                        continue;
                    }
                    r6 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r6;
                case 0x14c94:
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14cbc;
                        continue;
                    }
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                case 0x14cb0:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14cbc:
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r7 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14cd0:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d10;
                        continue;
                    }
                case 0x14ce0:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14cf0;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x14cf0:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                case 0x14d08:
                    /* Next insn is delay slot */ 
                    r7 = r0 + 63;
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14d10:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27184;
                    r31=0x14d34;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14d34:
                    /* Next insn is delay slot */ 
                    pc=0x14ce0;
                    continue;
                case 0x14d3c:
                    r4 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14c58;
                        continue;
                    }
                    r3 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r2 = r3 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14d90;
                        continue;
                    }
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r3 << 2;
                    r2 = r2 + r6;
                    r8 = r3 + 1;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x14c58;
                    continue;
                case 0x14d90:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14de0;
                        continue;
                    }
                case 0x14da0:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14db0;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x14db0:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r7 = r0 + 58;
                    r5 = r3 + r2;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 58;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14d08;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14de0:
                    r2 = r3 << 2;
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r2 = r2 + r3;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r7 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    r5 = r5 + -27136;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14e10;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14e10:
                    /* Next insn is delay slot */ 
                    pc=0x14da0;
                    run_14c00(); return;
                case 0x14e18:
                    r7 = r0 + 87;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x1483c;
                    run_14800(); return;
                case 0x14e2c:
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e78;
                        continue;
                    }
                case 0x14e3c:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14e4c;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x14e4c:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    r8 = r2 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x14d08;
                    run_14c00(); return;
                case 0x14e78:
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27096;
                    r31=0x14ea8;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14ea8:
                    /* Next insn is delay slot */ 
                    pc=0x14e3c;
                    continue;
                case 0x14eb0:
                    r16 = 4 << 16;
                    r16 = readPages[(r16+-10236)>>>12][((r16+-10236)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r20 - r16;
                    r31=0x14ec4;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x14ec4:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14ef4;
                        continue;
                    }
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ee8;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    pc=0x14be0;
                    run_14a00(); return;
                case 0x14ee8:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r21;
                    pc=0x14be0;
                    run_14a00(); return;
                case 0x14ef4:
                    r3 = r0 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    pc=0x14bfc;
                    run_14a00(); return;
                case 0x14f08:
                    r3 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    if(r3 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x14f40;
                        continue;
                    }
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r3 << 2;
                    r2 = r2 + r4;
                    r8 = r3 + 1;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x14b54;
                    run_14a00(); return;
                case 0x14f40:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f6c;
                        continue;
                    }
                case 0x14f50:
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r16;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r16 = r0 + 58;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x14a14;
                        run_14a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r0 + 63;
                    pc=0x14a14;
                    run_14a00(); return;
                case 0x14f6c:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = r5 + -27224;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r16 + r0;
                    r31=0x14f8c;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14f8c:
                    /* Next insn is delay slot */ 
                    pc=0x14f50;
                    continue;
                case 0x14f94:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14fd8;
                        continue;
                    }
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10228)>>>12][((r2+-10228)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14fe4;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = r5 + -27060;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x14fd0:
                    /* Next insn is delay slot */ 
                    r7 = r16 + r0;
                    r31=0x14fd8;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x14fd8:
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x14d08;
                    run_14c00(); return;
                case 0x14fe4:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27032;
                    pc=0x14fd0;
                    continue;
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    r6 = r0 + -1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r20 = r5 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15054;
                        continue;
                    }
                    r2 = r0 + 61;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15054;
                        continue;
                    }
                    r4 = r0 + 61;
                    r3 = r5 + r0;
                case 0x15038:
                    r3 = r3 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r20 = r20 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15054;
                        continue;
                    }
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x15038;
                        continue;
                    }
                case 0x15054:
                    r19 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15344;
                        run_15200(); return;
                    }
                    r21 = r0 + r0;
                    r18 = r19 + r0;
                    r17 = r19 + r0;
                case 0x15078:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r20 - r5;
                    r31=0x15084;
                    pc=0x30200;
                    run_30200(); return;
                case 0x15084:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1550c;
                        run_15400(); return;
                    }
                case 0x1508c:
                    r17 = r17 + 16;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r19 = r19 + 16;
                    r18 = r18 + 16;
                    r22 = r22 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x150b8;
                        continue;
                    }
                    r21 = r21 + 1;
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10236)>>>12][((r5+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x15078;
                    continue;
                case 0x150b8:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x150d8;
                        continue;
                    }
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15494;
                        run_15400(); return;
                    }
                case 0x150d8:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15344;
                        run_15200(); return;
                    }
                    r7 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r8 = r7 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15268;
                        run_15200(); return;
                    }
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x151a0;
                        continue;
                    }
                    r2 = r20 + 1;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r2;
                case 0x1512c:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1513c;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x1513c:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r6 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15168;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x15168:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1518c;
                        continue;
                    }
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x14cb0;
                    run_14c00(); return;
                case 0x1518c:
                    r6 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1483c;
                    run_14800(); return;
                case 0x151a0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15200;
                        run_15200(); return;
                    }
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r6;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15240;
                        run_15200(); return;
                    }
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27004;
                    r31=0x15200;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15210;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x15210:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x14d08;
                    run_14c00(); return;
                case 0x15240:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26956;
                    r31=0x15260;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x15260:
                    /* Next insn is delay slot */ 
                    pc=0x15200;
                    continue;
                case 0x15268:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1512c;
                        run_15000(); return;
                    }
                    r2 = r8 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x152b4;
                        continue;
                    }
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r6;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r8 = r7 + 2;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    r1 = 4 << 16;
                    writePages[(r1+-10244)>>>12][((r1+-10244)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x1512c;
                    run_15000(); return;
                case 0x152b4:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15310;
                        continue;
                    }
                case 0x152c4:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x152d4;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x152d4:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r2;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 58;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + 58;
                        pc=0x15308;
                        continue;
                    }
                    r4 = r0 + 58;
                    r4 = r0 + 63;
                case 0x15308:
                    /* Next insn is delay slot */ 
                    r7 = r4 + r0;
                    pc=0x1483c;
                    run_14800(); return;
                case 0x15310:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r3;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r7 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27136;
                    r31=0x1533c;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x1533c:
                    /* Next insn is delay slot */ 
                    pc=0x152c4;
                    continue;
                case 0x15344:
                    r2 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15488;
                        run_15400(); return;
                    }
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r3;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x153d8;
                        continue;
                    }
                    r5 = 4 << 16;
                    r5 = readPages[(r5+-10236)>>>12][((r5+-10236)>>>2)&0x3ff];
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = r23 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    addr=r23+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153cc;
                        continue;
                    }
                    r2 = r3 + r0;
                    r4 = r23 + r0;
                case 0x153a4:
                    r2 = r2 << 24;
                    r2 = r2 >> 24;
                    if(r2 == r7) {
                        /* Next insn is delay slot */ 
                        r3 = r6 + r0;
                        pc=0x153d0;
                        continue;
                    }
                    r3 = r6 + r0;
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r6 + 1;
                    r3 = r2 << 24;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153a4;
                        continue;
                    }
                case 0x153cc:
                    r3 = r0 + r0;
                case 0x153d0:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14950;
                        run_14800(); return;
                    }
                case 0x153d8:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1543c;
                        run_15400(); return;
                    }
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r2 = r2 + r6;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15460;
                        continue;
                    }
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10236)>>>12][((r2+-10236)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26908;
                    r31=0x15438;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x15438:
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                case 0x1543c:
                    r2 = 4 << 16;
                    r5 = r2 + -10452;
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    r8 = r8 + 1;
                case 0x15450:
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    writePages[(r28+-32620)>>>12][((r28+-32620)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    pc=0x14d08;
                    run_14c00(); return;
                case 0x15460:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r7 = readPages[(r7+-10236)>>>12][((r7+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26876;
                    r31=0x15480;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x15480:
                    /* Next insn is delay slot */ 
                    pc=0x15438;
                    continue;
                case 0x15488:
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x153d8;
                    run_15200(); return;
                case 0x15494:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x154d8;
                        continue;
                    }
                case 0x154a4:
                    r4 = 4 << 16;
                    r4 = readPages[(r4+-10236)>>>12][((r4+-10236)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x154b4;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x154b4:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10236)>>>12][((r3+-10236)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r1 = 4 << 16;
                    writePages[(r1+-10236)>>>12][((r1+-10236)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 1;
                    pc=0x15450;
                    continue;
                case 0x154d8:
                    r2 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r2 = r2 + r6;
                    r5 = 4 << 16;
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26844;
                    r31=0x15504;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x15504:
                    /* Next insn is delay slot */ 
                    pc=0x154a4;
                    continue;
                case 0x1550c:
                    r16 = 4 << 16;
                    r16 = readPages[(r16+-10236)>>>12][((r16+-10236)>>>2)&0x3ff];
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r20 - r16;
                    r31=0x15520;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x15520:
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x155a8;
                        continue;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1559c;
                        continue;
                    }
                    r3 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15560;
                        continue;
                    }
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1556c;
                        continue;
                    }
                case 0x15560:
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r6;
                    pc=0x1508c;
                    run_15000(); return;
                case 0x1556c:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15560;
                        continue;
                    }
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15560;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1508c;
                    run_15000(); return;
                case 0x1559c:
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    pc=0x1508c;
                    run_15000(); return;
                case 0x155a8:
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    pc=0x150b8;
                    run_15000(); return;
                case 0x155bc:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=0x14898;
                    run_14800(); return;
                case 0x155c4:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10224)>>>12][((r3+-10224)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10220)>>>12][((r2+-10220)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x155e4;
                        continue;
                    }
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r3;
                case 0x155e4:
                    /* Next insn is delay slot */ 
                    r7 = r0 + -1;
                    pc=0x1483c;
                    run_14800(); return;
                case 0x155ec:
                    r1 = 4 << 16;
                    writePages[(r1+-10224)>>>12][((r1+-10224)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x147d8;
                    run_14600(); return;
                case 0x155fc:
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    /* Next insn is delay slot */ 
                    pc=0x147e8;
                    run_14600(); return;
                case 0x15608:
                    r3 = 4 << 16;
                    r3 = readPages[(r3+-10224)>>>12][((r3+-10224)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10220)>>>12][((r2+-10220)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x156a4;
                        continue;
                    }
                    if(r2 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1563c;
                        continue;
                    }
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15638;
                    pc=0x15800;
                    run_15800(); return;
                case 0x15638:
                    r8 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                case 0x1563c:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = r8 << 2;
                    r5 = r0 + 45;
                    r4 = r2 + r3;
                case 0x1564c:
                    r2 = r8 < r30 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15694;
                        continue;
                    }
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x15684;
                        continue;
                    }
                case 0x15670:
                    r8 = r8 + 1;
                    r4 = r4 + 4;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1564c;
                    continue;
                case 0x15684:
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15670;
                        continue;
                    }
                case 0x15694:
                    r1 = 4 << 16;
                    writePages[(r1+-10220)>>>12][((r1+-10220)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x14774;
                    run_14600(); return;
                case 0x156a4:
                    if(r3 == r8) {
                        /* Next insn is delay slot */ 
                        pc=0x1563c;
                        continue;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10224)>>>12][((r1+-10224)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x1563c;
                    continue;
                case 0x156bc:
                    r2 = r0 + 1;
                    r1 = 4 << 16;
                    writePages[(r1+-10232)>>>12][((r1+-10232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x146e8;
                    run_14600(); return;
                case 0x156d0:
                    r1 = 4 << 16;
                    writePages[(r1+-10232)>>>12][((r1+-10232)>>>2)&0x3ff] = r0;
                case 0x156d8:
                    /* Next insn is delay slot */ 
                    r16 = r23 + 1;
                    pc=0x146e8;
                    run_14600(); return;
                case 0x156e0:
                    r2 = r0 + 2;
                    r1 = 4 << 16;
                    writePages[(r1+-10232)>>>12][((r1+-10232)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x156d8;
                    continue;
                case 0x156f4:
                    r8 = r0 + 1;
                    writePages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x14688;
                    run_14600(); return;
                case 0x15704:
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    pc=0x14650;
                    run_14600(); return;
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r14 = readPages[(r28+-32628)>>>12][((r28+-32628)>>>2)&0x3ff];
                    r10 = 4 << 16;
                    r10 = readPages[(r10+-10220)>>>12][((r10+-10220)>>>2)&0x3ff];
                    r15 = 4 << 16;
                    r15 = readPages[(r15+-10224)>>>12][((r15+-10224)>>>2)&0x3ff];
                    r12 = r10 < r14 ? 1 : 0;
                    r11 = r15 + r0;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r14 + r0;
                        pc=0x158a4;
                        continue;
                    }
                    r13 = r14 + r0;
                    r2 = r15 < r10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158a4;
                        continue;
                    }
                    r24 = r10 << 2;
                case 0x15834:
                    r9 = r13 - r10;
                    r8 = r10 - r11;
                    r2 = r8 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158c0;
                        continue;
                    }
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15888;
                        continue;
                    }
                    r2 = r13 - r8;
                    r2 = r2 << 2;
                    r3 = r11 << 2;
                    r7 = r8 + r0;
                    r6 = r2 + r4;
                    r3 = r3 + r4;
                case 0x15868:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    r3 = r3 + 4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x15868;
                        continue;
                    }
                    r6 = r6 + 4;
                case 0x15888:
                    r13 = r13 - r8;
                    r12 = r10 < r13 ? 1 : 0;
                case 0x15890:
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158a4;
                        continue;
                    }
                    r2 = r11 < r10 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15834;
                        continue;
                    }
                case 0x158a4:
                    r2 = r14 - r10;
                    r2 = r15 + r2;
                    r1 = 4 << 16;
                    writePages[(r1+-10224)>>>12][((r1+-10224)>>>2)&0x3ff] = r2;
                    r1 = 4 << 16;
                    /* Next insn is delay slot */ 
                    writePages[(r1+-10220)>>>12][((r1+-10220)>>>2)&0x3ff] = r14;
                    pc=r31;
                    return;
                case 0x158c0:
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x158f8;
                        continue;
                    }
                    r2 = r11 << 2;
                    r7 = r9 + r0;
                    r6 = r24 + r4;
                    r3 = r2 + r4;
                case 0x158d8:
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = r7 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r5;
                    r3 = r3 + 4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x158d8;
                        continue;
                    }
                    r6 = r6 + 4;
                case 0x158f8:
                    /* Next insn is delay slot */ 
                    r11 = r11 + r9;
                    pc=0x15890;
                    continue;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r29 = r29 + -32;
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    r31=0x15a18;
                    pc=0x14600;
                    run_14600(); return;
                case 0x15a18:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r29 = r29 + -1056;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r18;
                    writePages[(r29+1044)>>>12][((r29+1044)>>>2)&0x3ff] = r17;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r16 = r4 + r0;
                    r18 = r6 + r0;
                    r4 = r29 + 16;
                    r6 = r7 + r0;
                    r5 = r0 + 1024;
                    r7 = r29 + 1072;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x15c38;
                    pc=0x33400;
                    run_33400(); return;
                case 0x15c38:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x15c98;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = r0 + 1024;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15c98;
                        continue;
                    }
                case 0x15c4c:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r18 + r0;
                    pc=r2;
                    r31=0x15c64;
                    return;
                case 0x15c64:
                    r3 = r2 + r0;
                    r2 = r0 + 3;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15c90;
                        continue;
                    }
                case 0x15c74:
                    r31 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r18 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r17 = readPages[(r29+1044)>>>12][((r29+1044)>>>2)&0x3ff];
                    r16 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1056;
                    pc=r31;
                    return;
                case 0x15c90:
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x15c74;
                    continue;
                case 0x15c98:
                    r5 = 4 << 16;
                    r4 = r29 + 16;
                    r5 = r5 + -26812;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1024;
                    r31=0x15cac;
                    pc=0x30400;
                    run_30400(); return;
                case 0x15cac:
                    /* Next insn is delay slot */ 
                    pc=0x15c4c;
                    continue;
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r19 = r5 + r0;
                    r20 = r6 + r0;
                    r18 = r7 + r0;
                    r21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f48;
                        continue;
                    }
                case 0x15e3c:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15f3c;
                        continue;
                    }
                case 0x15e44:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 76;
                    pc=r2;
                    r31=0x15e54;
                    return;
                case 0x15e54:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x15f1c;
                        continue;
                    }
                    r16 = r2 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r19;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r20;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r18;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r21;
                    r2 = r19 & 1;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r2;
                    r2 = r0 + 16;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 64;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r0;
                    pc=r2;
                    r31=0x15e98;
                    return;
                case 0x15e98:
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r2;
                    r2 = r0 + 4;
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r0;
                    writePages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 176;
                    pc=r2;
                    r31=0x15ebc;
                    return;
                case 0x15ebc:
                    r3 = r2 + r0;
                    writePages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ef4;
                        continue;
                    }
                case 0x15ed4:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r4 < r2 ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+40)>>>12][((r3+40)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 44;
                        pc=0x15ed4;
                        continue;
                    }
                    r3 = r3 + 44;
                case 0x15ef4:
                    r2 = r16 + r0;
                case 0x15ef8:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x15f1c:
                    r5 = 4 << 16;
                    r4 = r21 + r0;
                    r5 = r5 + -26764;
                    r6 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r0 + -1;
                    pc=r18;
                    r31=0x15f34;
                    return;
                case 0x15f34:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x15ef8;
                    continue;
                case 0x15f3c:
                    r2 = 2 << 16;
                    /* Next insn is delay slot */ 
                    r18 = r2 + -32768;
                    pc=0x15e44;
                    continue;
                case 0x15f48:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r17 = r2 + -12560;
                    pc=0x15e3c;
                    continue;
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    r17 = r4 + r0;
                    r4 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r20 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r6 + r0;
                        pc=0x1646c;
                        run_16400(); return;
                    }
                    r19 = r6 + r0;
                    r16 = r0 + 1024;
                case 0x16034:
                    r16 = r16 << 1;
                    r2 = ((r16 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16034;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1605c;
                    return;
                case 0x1605c:
                    r4 = r2 + r0;
                    r3 = r0 + r0;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r16;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r0;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                case 0x16074:
                    r5 = r20 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r4 + r3;
                    r31=0x16084;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x16084:
                    r2 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r18 = 4 << 16;
                    r2 = r2 + r19;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r2;
                    r19 = r29 + 24;
                    r20 = 4 << 16;
                case 0x1609c:
                    r5 = r18 + -10448;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    r31=0x160ac;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x160ac:
                    r3 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1609c;
                        continue;
                    }
                    r2 = r20 + -26420;
                    r3 = r3 << 2;
                    r3 = r3 + r2;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x160dc:
                    r2 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = r2 - r3;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1624c;
                        run_16200(); return;
                    }
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r5 = r29 + 24;
                    r4 = r4 + r3;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 8;
                    r31=0x1610c;
                    pc=0x14400;
                    run_14400(); return;
                case 0x1610c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162a8;
                        run_16200(); return;
                    }
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r7 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r2 = r2 + r7;
                    addr=r2+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 & 252;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r17+40;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x16280;
                        run_16200(); return;
                    }
                    addr=r17+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x16138:
                    addr=r17+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16270;
                        run_16200(); return;
                    }
                    r2 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = r2 - r7;
                    r2 = (r2&0xffffffffL) < (13&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1624c;
                        run_16200(); return;
                    }
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r2 = r2 + r7;
                    r5 = r2 + 9;
                    addr=r2+9;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 << 16;
                    r4 = r4 << 24;
                    r4 = r4 | r2;
                    r3 = r3 << 8;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 | r3;
                    r4 = r4 | r2;
                    r3 = r0 + 1;
                    r2 = r7 + 13;
                    writePages[(r17+44)>>>12][((r17+44)>>>2)&0x3ff] = r4;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                        pc=0x1622c;
                        run_16200(); return;
                    }
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r5 = r0 + 1;
                    r4 = r17 + r0;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26728;
                    r31=0x161cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x161cc:
                    addr=r17+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x161d4:
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1620c;
                        run_16200(); return;
                    }
                    r7 = 4 << 16;
                    r2 = r0 + 1;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + -1;
                    r7 = r7 + -26684;
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                case 0x161fc:
                    /* Next insn is delay slot */ 
                    r31=0x16204;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                case 0x16204:
                    /* Next insn is delay slot */ 
                    pc=0x1609c;
                    run_16000(); return;
                case 0x1620c:
                    r2 = r0 + 3;
                    r7 = 4 << 16;
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26636;
                    pc=0x161fc;
                    run_16000(); return;
                case 0x1622c:
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26584;
                    r31=0x16244;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x16244:
                    /* Next insn is delay slot */ 
                    pc=0x161cc;
                    run_16000(); return;
                case 0x1624c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x16270:
                    r2 = r7 + 9;
                    writePages[(r17+44)>>>12][((r17+44)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    pc=0x161d4;
                    run_16000(); return;
                case 0x16280:
                    r7 = 4 << 16;
                    r7 = r7 + -26536;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r31=0x1629c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1629c:
                    r7 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x16138;
                    run_16000(); return;
                case 0x162a8:
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    r7 = r7 + -26472;
                case 0x162bc:
                    /* Next insn is delay slot */ 
                    r31=0x162c4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x162c4:
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    pc=0x1624c;
                    continue;
                case 0x162cc:
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r5 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r5 + r2;
                    r6 = r6 - r2;
                    /* Next insn is delay slot */ 
                    r7 = r29 + 32;
                    r31=0x162ec;
                    pc=0x18400;
                    run_18400(); return;
                case 0x162ec:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1624c;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r6 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff];
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16368;
                        continue;
                    }
                case 0x1631c:
                    r3 = readPages[(r17+52)>>>12][((r17+52)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r2 = r2 + r3;
                    r4 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r16;
                    r3 = r6 + 1;
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff] = r3;
                        pc=0x1634c;
                        continue;
                    }
                    writePages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff] = r3;
                    r2 = r0 + 2;
                case 0x16344:
                    /* Next insn is delay slot */ 
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                    pc=0x1609c;
                    run_16000(); return;
                case 0x1634c:
                    addr=r16+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 51;
                    r2 = r2 & 63;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1609c;
                        run_16000(); return;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r0 + 4;
                    pc=0x16344;
                    continue;
                case 0x16368:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    writePages[(r17+48)>>>12][((r17+48)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r17+52)>>>12][((r17+52)>>>2)&0x3ff];
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r6 = r6 << 4;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x16388;
                    return;
                case 0x16388:
                    r6 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r17+52)>>>12][((r17+52)>>>2)&0x3ff] = r2;
                    pc=0x1631c;
                    continue;
                case 0x16394:
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r3 = readPages[(r17+52)>>>12][((r17+52)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r5 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = r3 - r5;
                    r3 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1624c;
                        continue;
                    }
                    r4 = r0 + r0;
                    r6 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r6 + r5;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x163d8;
                    pc=0x18a00;
                    run_18a00(); return;
                case 0x163d8:
                    r5 = r2 + r0;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    r3 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r2;
                    r4 = r3 + 1;
                    r3 = readPages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff];
                    r2 = r0 + 4;
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r4;
                        pc=0x16428;
                        continue;
                    }
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r4;
                    r2 = r0 + 1;
                case 0x1640c:
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                case 0x16410:
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1609c;
                        run_16000(); return;
                    }
                    r2 = r0 + 5;
                    r4 = r5 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                    pc=0x1624c;
                    run_16200(); return;
                case 0x16428:
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x16410;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r0 + 5;
                    pc=0x1640c;
                    continue;
                case 0x16440:
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r2 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1624c;
                        run_16200(); return;
                    }
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26448;
                    pc=0x162bc;
                    run_16200(); return;
                case 0x1646c:
                    r3 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r8 = readPages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff];
                    r2 = r3 + r6;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r3 + r0;
                        pc=0x16074;
                        run_16000(); return;
                    }
                    r9 = r3 + r0;
                    r7 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r2 = r8 >>> 1;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r7 + r0;
                        pc=0x164ac;
                        continue;
                    }
                    r5 = r7 + r0;
                    r6 = r3 - r7;
                    r2 = r6 + r19;
                    r2 = ((r8 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1653c;
                        continue;
                    }
                case 0x164ac:
                    r2 = r9 - r5;
                    r18 = r0 + 1024;
                    r3 = r2 + r19;
                case 0x164b8:
                    r18 = r18 << 1;
                    r2 = ((r18 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x164b8;
                        continue;
                    }
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x164e0;
                    return;
                case 0x164e0:
                    r16 = r2 + r0;
                    r6 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r5 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r6 = r6 - r2;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x16500;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x16500:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x16518;
                    return;
                case 0x16518:
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r16;
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r18;
                case 0x16520:
                    r3 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r0;
                    pc=0x16074;
                    run_16000(); return;
                case 0x1653c:
                    /* Next insn is delay slot */ 
                    r5 = r4 + r7;
                    r31=0x16544;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x16544:
                    /* Next insn is delay slot */ 
                    pc=0x16520;
                    continue;
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    r29 = r29 + -24;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x16614;
                    return;
                case 0x16614:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r3;
                    r31=0x16818;
                    return;
                case 0x16818:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x16a18;
                    return;
                case 0x16a18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r3 << 16;
                    r2 = r2 << 24;
                    r2 = r2 | r3;
                    r5 = r5 << 8;
                    addr=r4+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 | r5;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r3;
                    pc=r31;
                    return;
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 << 8;
                    r2 = r2 | r3;
                    r2 = r2 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 >> 16;
                    pc=r31;
                    return;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    pc=r2;
                    r31=0x17030;
                    return;
                case 0x17030:
                    r5 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17094;
                        continue;
                    }
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x17084;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x17050:
                    r2 = r17 + r5;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x17060;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x17060:
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 4;
                        pc=0x17080;
                        continue;
                    }
                    r17 = r17 + 4;
                    r5 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x17050;
                    continue;
                case 0x17080:
                    r5 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                case 0x17084:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x17094;
                    return;
                case 0x17094:
                    r6 = readPages[(r18+72)>>>12][((r18+72)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x170ec;
                        continue;
                    }
                    r3 = readPages[(r18+64)>>>12][((r18+64)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x170dc;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x170b8:
                    r2 = r17 + r6;
                    r5 = readPages[(r2+40)>>>12][((r2+40)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17118;
                        continue;
                    }
                case 0x170cc:
                    r16 = r16 + 1;
                    r2 = r3 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 44;
                        pc=0x170b8;
                        continue;
                    }
                    r17 = r17 + 44;
                case 0x170dc:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r6 + r0;
                    pc=r2;
                    r31=0x170ec;
                    return;
                case 0x170ec:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    pc=r2;
                    r31=0x170fc;
                    return;
                case 0x170fc:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x17118:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x17120;
                    pc=0x25800;
                    run_25800(); return;
                case 0x17120:
                    r6 = readPages[(r18+72)>>>12][((r18+72)>>>2)&0x3ff];
                    r3 = readPages[(r18+64)>>>12][((r18+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x170cc;
                    continue;
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17410;
                    pc=0x17000;
                    run_17000(); return;
                case 0x17410:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r17 = r6 + r0;
                    pc=r2;
                    r31=0x17628;
                    return;
                case 0x17628:
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r16;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r17;
                    r3 = 2 << 16;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r3 + -32256;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x17820;
                    return;
                case 0x17820:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17a14;
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x17a14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17c14;
                    pc=0x2d000;
                    run_2d000(); return;
                case 0x17c14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    r29 = r29 + -24;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x17e18;
                    pc=0x2e600;
                    run_2e600(); return;
                case 0x17e18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                    r29 = r29 + -24;
                    r2 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r3 = r5 + r0;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        r16 = r7 + r0;
                        pc=0x18030;
                        continue;
                    }
                    r16 = r7 + r0;
                case 0x1801c:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x18030:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26396;
                    r31=0x18048;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x18048:
                    r3 = r0 + -1;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1806c;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -26364;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x1806c;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x1806c:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18080;
                    pc=0x2ac00;
                    run_2ac00(); return;
                case 0x18080:
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18094;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x18094:
                    /* Next insn is delay slot */ 
                    pc=0x1801c;
                    continue;
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r5 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r8 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1824c;
                        continue;
                    }
                    r5 = r8 + r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 << 16;
                    r4 = r4 << 24;
                    r4 = r4 | r2;
                    r3 = r3 << 8;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 | r3;
                    r4 = r4 | r2;
                case 0x18244:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x1824c:
                    r2 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x18244;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = r3 - r5;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x18244;
                        continue;
                    }
                    r6 = r0 + r0;
                    r7 = r2 + r0;
                    r3 = r0 + 24;
                    r5 = r5 + r8;
                case 0x18270:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r6 + 1;
                    r2 = r2 << (r3&0x1f);
                    r4 = r4 | r2;
                    r2 = ((r6 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    r5 = r5 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -8;
                        pc=0x18270;
                        continue;
                    }
                    r3 = r3 + -8;
                    /* Next insn is delay slot */ 
                    pc=0x18244;
                    continue;
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r29 = r29 + -72;
                    r2 = (r6&0xffffffffL) < (11&0xffffffffL) ? 1 : 0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r30 = r5 + r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r23;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r4;
                    r18 = r6 + r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x1855c;
                        continue;
                    }
                    r5 = r0 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 28;
                    r31=0x18454;
                    pc=0x16600;
                    run_16600(); return;
                case 0x18454:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    r31=0x18460;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x18460:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    addr=r30+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r17+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r30+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 224;
                    r3 = r4 & 224;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x186ac;
                        run_18600(); return;
                    }
                    r16 = r4 >>> 5;
                    r22 = r0 + 6;
                case 0x1848c:
                    r3 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r16;
                    r2 = (r3&0xffffffffL) < (257&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r0 + 1;
                        pc=0x184b4;
                        continue;
                    }
                    r19 = r0 + 1;
                    r2 = 1 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r0 + 2;
                        pc=0x184b4;
                        continue;
                    }
                    r19 = r0 + 2;
                    r19 = r0 + 4;
                case 0x184b4:
                    addr=r17+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r0 + 4;
                    r2 = r3 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x184cc;
                        continue;
                    }
                    r4 = r0 + 1;
                case 0x184cc:
                    { long hilo = (long)(r16) * ((long)r19); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r2 = r22 + r5;
                    r2 = r2 + r4;
                    r2 = r2 + 4;
                    r2 = ((r18 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18670;
                        run_18600(); return;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x185a4;
                        continue;
                    }
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r0;
                case 0x184f8:
                    r2 = r3 & 64;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18590;
                        continue;
                    }
                    r2 = r30 + r22;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r22 = r22 + 1;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r3;
                case 0x18514:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26344;
                    r31=0x1853c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1853c:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r22;
                    r31=0x18544;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x18544:
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                    r2 = r22 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r17+24)>>>12][((r17+24)>>>2)&0x3ff] = r0;
                    r5 = r17 + r0;
                case 0x1855c:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r23 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x18590:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r22;
                    r31=0x18598;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x18598:
                    r22 = r22 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    pc=0x18514;
                    continue;
                case 0x185a4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r5 = r5 << 2;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x185b8;
                    pc=0x16600;
                    run_16600(); return;
                case 0x185b8:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                        pc=0x1863c;
                        run_18600(); return;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r20 = r22 + r30;
                    r18 = r16 + r0;
                    r23 = r20 + r0;
                    r16 = r2 + r0;
                    r21 = r20 + r0;
                case 0x185d4:
                    r2 = r0 + 1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18664;
                        run_18600(); return;
                    }
                    r3 = r0 + 2;
                    if(r19 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x18654;
                        run_18600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x185f4;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x185f4:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r7 = r2 + -26304;
                    r18 = r18 + -1;
                    r22 = r22 + r19;
                    r21 = r21 + r19;
                    r23 = r23 + r19;
                    /* Next insn is delay slot */ 
                    r20 = r20 + r19;
                    r31=0x18634;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18634:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x185d4;
                        run_18400(); return;
                    }
                    r16 = r16 + 4;
                case 0x1863c:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r3;
                    addr=r17+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x184f8;
                    run_18400(); return;
                case 0x18654:
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1865c;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x1865c:
                    /* Next insn is delay slot */ 
                    pc=0x185f4;
                    run_18400(); return;
                case 0x18664:
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x185f4;
                    run_18400(); return;
                case 0x18670:
                    r2 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26272;
                    r31=0x18690;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18690:
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x186a4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x186a4:
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x1855c;
                    run_18400(); return;
                case 0x186ac:
                    /* Next insn is delay slot */ 
                    r4 = r30 + 5;
                    r31=0x186b4;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x186b4:
                    r3 = 8191 << 16;
                    r3 = r3 | 65535;
                    r16 = r2 & r3;
                    r2 = r16 + 1;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x186d8;
                        continue;
                    }
                case 0x186cc:
                    r2 = r2 >> 3;
                    /* Next insn is delay slot */ 
                    r22 = r2 + 9;
                    pc=0x1848c;
                    run_18400(); return;
                case 0x186d8:
                    /* Next insn is delay slot */ 
                    r2 = r16 + 8;
                    pc=0x186cc;
                    continue;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r6 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r20 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r6 + r0;
                    r31=0x18830;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x18830:
                    r16 = r2 + r0;
                    r3 = 32768 << 16;
                    r2 = 8192 << 16;
                    r17 = r16 & r3;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 & r2;
                        pc=0x18850;
                        continue;
                    }
                    r2 = r16 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188fc;
                        continue;
                    }
                case 0x18850:
                    r2 = 8192 << 16;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x188e4;
                        continue;
                    }
                    r2 = r2 | 2;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x188cc;
                        continue;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188ac;
                        continue;
                    }
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -26212;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x1888c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1888c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x188ac:
                    r7 = 4 << 16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26160;
                    r31=0x188c4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x188c4:
                    /* Next insn is delay slot */ 
                    pc=0x1888c;
                    continue;
                case 0x188cc:
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x188dc;
                    pc=0x26a00;
                    run_26a00(); return;
                case 0x188dc:
                    /* Next insn is delay slot */ 
                    pc=0x1888c;
                    continue;
                case 0x188e4:
                    r4 = r19 + r0;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x188f4;
                    pc=0x26200;
                    run_26200(); return;
                case 0x188f4:
                    /* Next insn is delay slot */ 
                    pc=0x1888c;
                    continue;
                case 0x188fc:
                    r7 = 4 << 16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -26132;
                    r31=0x18914;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18914:
                    /* Next insn is delay slot */ 
                    pc=0x18850;
                    continue;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    r18 = r6 + r0;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r6;
                    addr=r5+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r16 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = r2 & 63;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r7 = r7 + -26052;
                    r5 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r17 = r4 + r0;
                    r31=0x18a50;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18a50:
                    addr=r16+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r3 = r5 & 63;
                    r2 = (r3&0xffffffffL) < (63&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18c14;
                        run_18c00(); return;
                    }
                    r2 = r3 << 2;
                    r3 = 4 << 16;
                    r3 = r3 + -25640;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x18a88:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18a98;
                    pc=0x1a600;
                    run_1a600(); return;
                case 0x18a98:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x18ab0:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18ac0;
                    pc=0x1dc00;
                    run_1dc00(); return;
                case 0x18ac0:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18ac8:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    r7 = r7 + -26004;
                case 0x18adc:
                    /* Next insn is delay slot */ 
                    r31=0x18ae4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18ae4:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18aec:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25960;
                    pc=0x18adc;
                    continue;
                case 0x18b04:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25904;
                    pc=0x18adc;
                    continue;
                case 0x18b1c:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25852;
                    pc=0x18adc;
                    continue;
                case 0x18b34:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25792;
                    pc=0x18adc;
                    continue;
                case 0x18b4c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18b5c;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x18b5c:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18b64:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18b74;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x18b74:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18b7c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18b8c;
                    pc=0x19400;
                    run_19400(); return;
                case 0x18b8c:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18b94:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18ba4;
                    pc=0x19e00;
                    run_19e00(); return;
                case 0x18ba4:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18bac:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18bbc;
                    pc=0x19a00;
                    run_19a00(); return;
                case 0x18bbc:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    continue;
                case 0x18bc4:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r0 + 5;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -25736;
                    /* Next insn is delay slot */ 
                    writePages[(r17+36)>>>12][((r17+36)>>>2)&0x3ff] = r2;
                    pc=0x18adc;
                    continue;
                case 0x18be4:
                    r7 = 4 << 16;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25724;
                    pc=0x18adc;
                    continue;
                case 0x18bfc:
                    r7 = 4 << 16;
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25688;
                    pc=0x18adc;
                    run_18a00(); return;
                case 0x18c14:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r2 = r5 & 63;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    r7 = r7 + -25664;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x18c34;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x18c34:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x18a98;
                    run_18a00(); return;
                case 0x18c3c:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x18c4c;
                    pc=0x18800;
                    run_18800(); return;
                case 0x18c4c:
                    /* Next insn is delay slot */ 
                    pc=0x18a98;
                    run_18a00(); return;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    r5 = readPages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18ee4;
                        continue;
                    }
                case 0x18e24:
                    addr=r16+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 4;
                    r4 = r2 & 63;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x18ec4;
                        continue;
                    }
                    r2 = r4 < 5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e8c;
                        continue;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e6c;
                        continue;
                    }
                case 0x18e4c:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x18e58;
                    pc=0x16800;
                    run_16800(); return;
                case 0x18e58:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x18e6c:
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x18e84;
                    pc=0x1b000;
                    run_1b000(); return;
                case 0x18e84:
                    /* Next insn is delay slot */ 
                    pc=0x18e4c;
                    continue;
                case 0x18e8c:
                    r2 = r0 + 40;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18ec4;
                        continue;
                    }
                    r2 = r0 + 62;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x18e4c;
                        continue;
                    }
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x18ebc;
                    pc=0x26800;
                    run_26800(); return;
                case 0x18ebc:
                    /* Next insn is delay slot */ 
                    pc=0x18e4c;
                    continue;
                case 0x18ec4:
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x18edc;
                    pc=0x25800;
                    run_25800(); return;
                case 0x18edc:
                    /* Next insn is delay slot */ 
                    pc=0x18e4c;
                    continue;
                case 0x18ee4:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18ef0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x18ef0:
                    /* Next insn is delay slot */ 
                    pc=0x18e24;
                    continue;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    r7 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r6 = r2 + -1;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19044;
                        continue;
                    }
                    r3 = readPages[(r4+52)>>>12][((r4+52)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r4 = r2 + r3;
                case 0x19020:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x19094;
                        continue;
                    }
                    r6 = r6 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + -4;
                        pc=0x19020;
                        continue;
                    }
                    r4 = r4 + -4;
                case 0x19044:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19090;
                        continue;
                    }
                    r2 = readPages[(r7+60)>>>12][((r7+60)>>>2)&0x3ff];
                    r6 = r2 + -1;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19090;
                        continue;
                    }
                    r3 = readPages[(r7+52)>>>12][((r7+52)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r4 = r2 + r3;
                case 0x1906c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x19094;
                        continue;
                    }
                    r6 = r6 + -1;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + -4;
                        pc=0x1906c;
                        continue;
                    }
                    r4 = r4 + -4;
                case 0x19090:
                    r2 = r0 + r0;
                case 0x19094:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r16 = r5 + r0;
                    r31=0x19220;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19220:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r16 + 4;
                    r31=0x1922c;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x1922c:
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r16 + 8;
                    r31=0x19238;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19238:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r16 + 12;
                    r31=0x19244;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19244:
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                    addr=r16+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r17+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 7;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r29 = r29 + -72;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    r21 = r6 + r0;
                    r6 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r22 = r5 + r0;
                    r2 = r6 << 1;
                    r2 = r2 + r6;
                    r2 = r2 << 2;
                    r2 = r2 - r6;
                    r5 = readPages[(r4+72)>>>12][((r4+72)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r17 = r5 + r2;
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19470;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19864;
                        run_19800(); return;
                    }
                case 0x19470:
                    r4 = r6 << 1;
                    r2 = r4 + r6;
                    r2 = r2 << 2;
                    r2 = r2 - r6;
                    r7 = r2 << 2;
                    r3 = r7 + r5;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r16 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194d4;
                        continue;
                    }
                    r6 = readPages[(r20+68)>>>12][((r20+68)>>>2)&0x3ff];
                    r17 = r7 + r0;
                    r18 = r4 + r0;
                    r19 = r7 + r0;
                case 0x194a8:
                    r16 = r16 + 1;
                    r2 = r16 < r6 ? 1 : 0;
                    r19 = r19 + 44;
                    r18 = r18 + 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 44;
                        pc=0x197ec;
                        run_19600(); return;
                    }
                    r17 = r17 + 44;
                case 0x194c0:
                    r2 = r17 + r5;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x194a8;
                        continue;
                    }
                case 0x194d4:
                    r2 = r4 + r16;
                    r2 = r2 << 2;
                    writePages[(r20+64)>>>12][((r20+64)>>>2)&0x3ff] = r16;
                    r2 = r2 - r16;
                    r2 = r2 << 2;
                    r3 = readPages[(r22+8)>>>12][((r22+8)>>>2)&0x3ff];
                    r17 = r5 + r2;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r16 = r0 + 1;
                    r2 = (r2&0xffffffffL) < (19&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                        pc=0x1954c;
                        continue;
                    }
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -25388;
                case 0x1951c:
                    /* Next insn is delay slot */ 
                    r31=0x19524;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19524:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x1954c:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x19554;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19554:
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r21 + 4;
                    r31=0x19560;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19560:
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r21 + 8;
                    r31=0x1956c;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x1956c:
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r21 + 12;
                    r31=0x19578;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19578:
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r2;
                    addr=r21+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r21 + 17;
                    /* Next insn is delay slot */ 
                    addr=r17+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x1958c;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x1958c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x197dc;
                        run_19600(); return;
                    }
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r0;
                    addr=r17+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1959c:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x197a8;
                        run_19600(); return;
                    }
                case 0x195ac:
                    writePages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19788;
                        run_19600(); return;
                    }
                case 0x195c4:
                    r3 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19758;
                        run_19600(); return;
                    }
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19714;
                        run_19600(); return;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    r4 = r20 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r7 = r7 + -25368;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r31=0x19624;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19624:
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x196ec;
                        continue;
                    }
                case 0x19634:
                    r6 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x196e0;
                        continue;
                    }
                case 0x19644:
                    r5 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x19650;
                    pc=0x25400;
                    run_25400(); return;
                case 0x19650:
                    writePages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1967c;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25332;
                    pc=0x1951c;
                    run_19400(); return;
                case 0x1967c:
                    addr=r17+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r6 & 4;
                    r31=0x1968c;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1968c:
                    r2 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r7 + -25288;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r17+40)>>>12][((r17+40)>>>2)&0x3ff];
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    { long hilo = (long)(r2) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x196d8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x196d8:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x19524;
                    run_19400(); return;
                case 0x196e0:
                    addr=r17+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r6 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x19644;
                    continue;
                case 0x196ec:
                    addr=r17+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -25248;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x1970c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1970c:
                    /* Next insn is delay slot */ 
                    pc=0x19634;
                    continue;
                case 0x19714:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r7 = r7 + -25220;
                case 0x19748:
                    /* Next insn is delay slot */ 
                    r31=0x19750;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19750:
                    /* Next insn is delay slot */ 
                    pc=0x19624;
                    continue;
                case 0x19758:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -25188;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    pc=0x19748;
                    continue;
                case 0x19788:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25148;
                    r31=0x197a0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x197a0:
                    /* Next insn is delay slot */ 
                    pc=0x195c4;
                    run_19400(); return;
                case 0x197a8:
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x195ac;
                        run_19400(); return;
                    }
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25124;
                    r31=0x197d0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x197d0:
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    pc=0x195ac;
                    run_19400(); return;
                case 0x197dc:
                    r2 = r2 & 32767;
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    addr=r17+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x1959c;
                    run_19400(); return;
                case 0x197ec:
                    r2 = r6 << 2;
                    r6 = r6 << 3;
                    r6 = r6 + r2;
                    r6 = r6 << 2;
                    r6 = r6 - r2;
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    /* Next insn is delay slot */ 
                    writePages[(r20+68)>>>12][((r20+68)>>>2)&0x3ff] = r2;
                    r31=0x19810;
                    pc=0x16a00;
                    run_16a00(); return;
                case 0x19810:
                    r6 = readPages[(r20+68)>>>12][((r20+68)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    writePages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff] = r2;
                    r2 = r16 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r16 + r0;
                        pc=0x19858;
                        continue;
                    }
                    r7 = r16 + r0;
                    r4 = r19 + r5;
                case 0x1982c:
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r20+68)>>>12][((r20+68)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r3 = r7 < r2 ? 1 : 0;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    writePages[(r4+40)>>>12][((r4+40)>>>2)&0x3ff] = r0;
                    r6 = r2 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 44;
                        pc=0x1982c;
                        continue;
                    }
                    r4 = r4 + 44;
                    /* Next insn is delay slot */ 
                    pc=0x194c0;
                    run_19400(); return;
                case 0x19858:
                    r5 = readPages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x194c0;
                    run_19400(); return;
                case 0x19864:
                    r2 = r0 + 2;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + 2;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -25068;
                    r31=0x19880;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19880:
                    r6 = readPages[(r20+64)>>>12][((r20+64)>>>2)&0x3ff];
                    r5 = readPages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x19470;
                    run_19400(); return;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r18;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r17;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r5 = r2 << 1;
                    r5 = r5 + r2;
                    r5 = r5 << 2;
                    r3 = readPages[(r4+72)>>>12][((r4+72)>>>2)&0x3ff];
                    r5 = r5 - r2;
                    r5 = r5 << 2;
                    r5 = r5 + r3;
                    r16 = r6 + r0;
                    r17 = r4 + r0;
                    r6 = r0 + 44;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 24;
                    r31=0x19a4c;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x19a4c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x19a54;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x19a54:
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    r2 = r2 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19aa8;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r5 = r0 + 2;
                    r4 = r17 + r0;
                    r7 = r7 + -25004;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                case 0x19a84:
                    /* Next insn is delay slot */ 
                    r31=0x19a8c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19a8c:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r17 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x19aa8:
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24908;
                    pc=0x19a84;
                    continue;
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r5 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19c48;
                        continue;
                    }
                    r3 = readPages[(r4+52)>>>12][((r4+52)>>>2)&0x3ff];
                    r2 = r5 << 2;
                    r2 = r2 + r3;
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r3 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19c88;
                        continue;
                    }
                case 0x19c48:
                    r3 = readPages[(r16+64)>>>12][((r16+64)>>>2)&0x3ff];
                    r4 = readPages[(r16+72)>>>12][((r16+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r3 = r0 + 2;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x19c88:
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24868;
                    r31=0x19c9c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19c9c:
                    r2 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r3 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r6 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r6 = r6 + r2;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x19cc4;
                    pc=0x18a00;
                    run_18a00(); return;
                case 0x19cc4:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    pc=0x19c48;
                    continue;
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r3 = r2 << 1;
                    r3 = r3 + r2;
                    r3 = r3 << 2;
                    r3 = r3 - r2;
                    r5 = readPages[(r4+72)>>>12][((r4+72)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r3 = r3 + r5;
                    r16 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x19e68;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r7 = r7 + -24784;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r16;
                    r31=0x19e68;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19e68:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -24716;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x19e84;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19e84:
                    r4 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19ebc;
                        continue;
                    }
                    r3 = readPages[(r17+52)>>>12][((r17+52)>>>2)&0x3ff];
                    r2 = r4 << 2;
                    r2 = r2 + r3;
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    r3 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x19f00;
                        continue;
                    }
                case 0x19ebc:
                    r3 = readPages[(r17+64)>>>12][((r17+64)>>>2)&0x3ff];
                    r4 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r3 = r0 + 2;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x19f00:
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24868;
                    r31=0x19f18;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x19f18:
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = readPages[(r17+32)>>>12][((r17+32)>>>2)&0x3ff];
                    r6 = readPages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r6 + r2;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x19f40;
                    pc=0x18a00;
                    run_18a00(); return;
                case 0x19f40:
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r3 = readPages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff];
                    writePages[(r17+28)>>>12][((r17+28)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r17+60)>>>12][((r17+60)>>>2)&0x3ff] = r2;
                    pc=0x19ebc;
                    continue;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r5+28)>>>12][((r5+28)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r16 = r5 + r0;
                    r19 = r6 + r0;
                    r21 = r7 + r0;
                    r18 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a0dc;
                        continue;
                    }
                    r2 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r5 = readPages[(r5+32)>>>12][((r5+32)>>>2)&0x3ff];
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r18 + r2;
                    r17 = r2 + r5;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a0b0;
                        continue;
                    }
                case 0x1a068:
                    r2 = r18 + r5;
                    r5 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r19 + r0;
                    r7 = r21 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    r31=0x1a088;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1a088:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x1a0b0:
                    r7 = 4 << 16;
                    r5 = r0 + r0;
                    r6 = r0 + -1;
                    r7 = r7 + -24700;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r31=0x1a0c8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a0c8:
                    r5 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r17 + r0;
                    r31=0x1a0dc;
                    pc=0x25a00;
                    run_25a00(); return;
                case 0x1a0dc:
                    r5 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1a068;
                    continue;
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r5 = readPages[(r17+68)>>>12][((r17+68)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1a250;
                        continue;
                    }
                    r4 = r0 + r0;
                    r3 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r6 = r0 + 2;
                    r16 = r0 + r0;
                case 0x1a22c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x1a268;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 < r5 ? 1 : 0;
                    r16 = r16 + 44;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 44;
                        pc=0x1a22c;
                        continue;
                    }
                    r3 = r3 + 44;
                case 0x1a250:
                    r2 = r0 + r0;
                case 0x1a254:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1a268:
                    r2 = r0 + 3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r7 = 4 << 16;
                    r3 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r6 = r0 + -1;
                    r7 = r7 + -24644;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r31=0x1a290;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a290:
                    r3 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r3 = r16 + r3;
                    r5 = readPages[(r3+40)>>>12][((r3+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a2a8;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1a2a8:
                    /* Next insn is delay slot */ 
                    pc=0x1a254;
                    continue;
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r17 = r4 + r0;
                    r6 = readPages[(r17+68)>>>12][((r17+68)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    if(r6 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1a450;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    r3 = r2 + 40;
                case 0x1a42c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1a480;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    r16 = r16 + 44;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 44;
                        pc=0x1a42c;
                        continue;
                    }
                    r3 = r3 + 44;
                case 0x1a450:
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24612;
                    r31=0x1a468;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a468:
                    r2 = r0 + 1;
                case 0x1a46c:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1a480:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x1a488;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1a488:
                    r3 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r3 = r16 + r3;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r6 = r0 + -1;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24568;
                    r31=0x1a4b8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a4b8:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x1a46c;
                    continue;
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    r29 = r29 + -168;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r23;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r22;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r31;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r30;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r21;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r20;
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r19;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r18;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r17;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r23 = r4 + r0;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r22 = r5 + r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r6;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                        pc=0x1ad80;
                        run_1ac00(); return;
                    }
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r4 = r6 + r0;
                    r31=0x1a654;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x1a654:
                    r30 = r2 & 65535;
                    r2 = r30 >>> 1;
                    r2 = r2 & 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r30 >>> 10;
                    r2 = r30 >>> 12;
                    r4 = r30 & 1;
                    r3 = r3 & 3;
                    r2 = r2 & 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r30 & 128;
                        pc=0x1a834;
                        run_1a800(); return;
                    }
                    r16 = r30 & 128;
                    r2 = r30 & 12;
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae10;
                        run_1ae00(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a738;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d4;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a720;
                        continue;
                    }
                case 0x1a6d4:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -24536;
                case 0x1a6e8:
                    /* Next insn is delay slot */ 
                    r31=0x1a6f0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a6f0:
                    r31 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r30 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r23 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r22 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r21 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r20 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r19 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r18 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r17 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 168;
                    pc=r31;
                    return;
                case 0x1a720:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24484;
                    pc=0x1a6e8;
                    continue;
                case 0x1a738:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d4;
                        continue;
                    }
                    r5 = 4 << 16;
                    r4 = r23 + r0;
                    r5 = r5 + -16356;
                case 0x1a74c:
                    /* Next insn is delay slot */ 
                    r31=0x1a754;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1a754:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = r30 & 48;
                    r4 = r2 >> 4;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae00;
                        run_1ae00(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7a8;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d4;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d4;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24428;
                    pc=0x1a6e8;
                    continue;
                case 0x1a7a8:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a6d4;
                        continue;
                    }
                    r5 = 4 << 16;
                    r4 = r23 + r0;
                    r5 = r5 + -16572;
                case 0x1a7bc:
                    /* Next insn is delay slot */ 
                    r31=0x1a7c4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1a7c4:
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r30 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7ec;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24372;
                    pc=0x1a6e8;
                    continue;
                case 0x1a7ec:
                    r2 = 4 << 16;
                    r17 = r2 + -16680;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1a800;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r16 = r30 & 128;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                        pc=0x1a824;
                        continue;
                    }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24312;
                    pc=0x1a6e8;
                    run_1a600(); return;
                case 0x1a824:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1a830;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1a830:
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                case 0x1a834:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a85c;
                        continue;
                    }
                    r2 = r30 & 12;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ade0;
                        run_1ac00(); return;
                    }
                case 0x1a850:
                    r2 = r30 & 48;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1adc0;
                        run_1ac00(); return;
                    }
                case 0x1a85c:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ada0;
                        run_1ac00(); return;
                    }
                case 0x1a864:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a888;
                        continue;
                    }
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r16 = r0 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a888;
                        continue;
                    }
                    r16 = r0 + 2;
                case 0x1a888:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r4 = r29 + 76;
                    r5 = r2 + 2;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x1a89c;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1a89c:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r16 + 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad98;
                        run_1ac00(); return;
                    }
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad98;
                        run_1ac00(); return;
                    }
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r16 = r16 + 6;
                    r2 = ((r2 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad80;
                        run_1ac00(); return;
                    }
                    r4 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r6 = r0 + 4;
                    r5 = r4 + r3;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 88;
                    r31=0x1a8e4;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1a8e4:
                    r3 = r16 + r0;
                case 0x1a8e8:
                    r2 = r3 + 8;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad80;
                        run_1ac00(); return;
                    }
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r16 = r2 + r3;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 + 4;
                    r31=0x1a920;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x1a920:
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r31=0x1a92c;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x1a92c:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r23 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -24252;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x1a958;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1a958:
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a9b8;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1a96c:
                    r2 = readPages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a984;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1a984:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a9a4;
                        continue;
                    }
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a9a4;
                        continue;
                    }
                    r21 = r21 + 1;
                case 0x1a9a4:
                    r3 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1a96c;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1a9b8:
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r0;
                        pc=0x1ab38;
                        run_1aa00(); return;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x1aa1c;
                        run_1aa00(); return;
                    }
                    r17 = r0 + r0;
                    r16 = r0 + r0;
                case 0x1a9d0:
                    r2 = readPages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a9e8;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1a9e8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa08;
                        run_1aa00(); return;
                    }
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa08;
                        run_1aa00(); return;
                    }
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r20 = r20 + 1;
                case 0x1aa08:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1a9d0;
                        run_1a800(); return;
                    }
                    r16 = r16 + 4;
                case 0x1aa1c:
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r20 << 2;
                    r31=0x1aa28;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1aa28:
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x1aa9c;
                        continue;
                    }
                    r18 = r0 + r0;
                    r17 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r16 = r0 + r0;
                case 0x1aa44:
                    r2 = readPages[(r22+20)>>>12][((r22+20)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1aa5c;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1aa5c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x1aa88;
                        continue;
                    }
                    r3 = r2 + r0;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1aa88;
                        continue;
                    }
                    r2 = readPages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r17 = r17 + 4;
                case 0x1aa88:
                    r2 = readPages[(r22+16)>>>12][((r22+16)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r2 = r18 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1aa44;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1aa9c:
                    if(r19 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x1aac4;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -24188;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    r31=0x1aac4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1aac4:
                    r19 = r0 < r21 ? 1 : 0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x1aaf0;
                        continue;
                    }
                    r16 = r0 + r0;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r17 = r21 + r0;
                case 0x1aad8:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + r3;
                        pc=0x1aad8;
                        continue;
                    }
                    r16 = r16 + r3;
                case 0x1aaf0:
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 8;
                    r31=0x1aafc;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1aafc:
                    r17 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + r0;
                        pc=0x1ab34;
                        continue;
                    }
                    r7 = r0 + r0;
                    r18 = r16 << 2;
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x1ab18;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1ab18:
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                        pc=0x1acb4;
                        run_1ac00(); return;
                    }
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1ab30;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1ab30:
                    r7 = r0 + r0;
                case 0x1ab34:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                case 0x1ab38:
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1acac;
                        run_1ac00(); return;
                    }
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                case 0x1ab54:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1abe8;
                        continue;
                    }
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r16 = 1 << 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab84;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + 8192;
                        pc=0x1ab84;
                        continue;
                    }
                    r16 = r0 + 8192;
                    r16 = r0 + 1024;
                case 0x1ab84:
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1ab90;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1ab90:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r31=0x1aba4;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1aba4:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1abe8;
                        continue;
                    }
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = r0 + 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1abc8;
                        continue;
                    }
                    r16 = r0 + 8192;
                case 0x1abc8:
                    r4 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1abd4;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1abd4:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x1abe8;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1abe8:
                    r2 = r30 & 256;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac8c;
                        run_1ac00(); return;
                    }
                case 0x1abf4:
                    r2 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r3 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r7 = r2 + r3;
                    r2 = readPages[(r22+12)>>>12][((r22+12)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r2 = r2 - r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r22 + r0;
                    r6 = r29 + 32;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x1ac2c;
                    pc=0x1b600;
                    run_1b600(); return;
                case 0x1ac2c:
                    writePages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac54;
                        continue;
                    }
                case 0x1ac40:
                    r2 = readPages[(r22+24)>>>12][((r22+24)>>>2)&0x3ff];
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -1;
                    pc=0x1a6f0;
                    run_1a600(); return;
                case 0x1ac54:
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1ac60;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1ac60:
                    r5 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1ac6c;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1ac6c:
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1ac78;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1ac78:
                    r5 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1ac84;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1ac84:
                    /* Next insn is delay slot */ 
                    pc=0x1ac40;
                    continue;
                case 0x1ac8c:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24128;
                    r31=0x1aca4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1aca4:
                    /* Next insn is delay slot */ 
                    pc=0x1abf4;
                    run_1aa00(); return;
                case 0x1acac:
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r0;
                    pc=0x1ab54;
                    run_1aa00(); return;
                case 0x1acb4:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x1acc4;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1acc4:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r17 + r0;
                        pc=0x1ab34;
                        run_1aa00(); return;
                    }
                    r7 = r17 + r0;
                    r6 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r17 = r21 + r0;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r6;
                    r21 = r0 + r0;
                case 0x1acdc:
                    r3 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad60;
                        continue;
                    }
                    r20 = r6 + r0;
                    r18 = r0 + r0;
                    r16 = r21 + r0;
                case 0x1ad08:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r6;
                    r2 = r18 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    r31=0x1ad28;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1ad28:
                    r7 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    r3 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r21 = r21 + 4;
                    r3 = r16 + r3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r16 = r16 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r18 = r18 + 4;
                    r2 = r19 < r2 ? 1 : 0;
                    r6 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad08;
                        continue;
                    }
                case 0x1ad60:
                    r4 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    r4 = r4 + 4;
                    r6 = r6 + 4;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r4;
                        pc=0x1acdc;
                        continue;
                    }
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x1ab34;
                    run_1aa00(); return;
                case 0x1ad80:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24072;
                    pc=0x1a6e8;
                    run_1a600(); return;
                case 0x1ad98:
                    /* Next insn is delay slot */ 
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r0;
                    pc=0x1a8e8;
                    run_1a800(); return;
                case 0x1ada0:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -24052;
                    r31=0x1adb8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1adb8:
                    /* Next insn is delay slot */ 
                    pc=0x1a864;
                    run_1a800(); return;
                case 0x1adc0:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23980;
                    r31=0x1add8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1add8:
                    /* Next insn is delay slot */ 
                    pc=0x1a85c;
                    run_1a800(); return;
                case 0x1ade0:
                    r7 = 4 << 16;
                    r6 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23924;
                    r31=0x1adf8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1adf8:
                    /* Next insn is delay slot */ 
                    pc=0x1a850;
                    run_1a800(); return;
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    r5 = 4 << 16;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -16452;
                    pc=0x1a7bc;
                    run_1a600(); return;
                case 0x1ae10:
                    r5 = 4 << 16;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -16248;
                    pc=0x1a74c;
                    run_1a600(); return;
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r5 + r0;
                        pc=0x1b080;
                        continue;
                    }
                    r18 = r5 + r0;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b064;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1b038:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b09c;
                        continue;
                    }
                case 0x1b054:
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1b038;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1b064:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b074;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1b074:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x1b080;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1b080:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1b09c:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x1b0a4;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1b0a4:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1b054;
                    continue;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    r19 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x1b284;
                        continue;
                    }
                    r17 = r0 + r0;
                    r16 = r0 + r0;
                case 0x1b238:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b250;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1b250:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b270;
                        continue;
                    }
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b270;
                        continue;
                    }
                    r19 = r19 + 1;
                case 0x1b270:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1b238;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1b284:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    r29 = r29 + -64;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    r22 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x1b490;
                        continue;
                    }
                    r17 = r0 + r0;
                    r16 = r0 + r0;
                case 0x1b444:
                    r2 = readPages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b45c;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1b45c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b47c;
                        continue;
                    }
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b47c;
                        continue;
                    }
                    r22 = r22 + 1;
                case 0x1b47c:
                    r2 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1b444;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1b490:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r22 << 2;
                    r31=0x1b49c;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1b49c:
                    r23 = r2 + r0;
                    r2 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x1b510;
                        continue;
                    }
                    r18 = r0 + r0;
                    r16 = r0 + r0;
                    r17 = r23 + r0;
                case 0x1b4b8:
                    r2 = readPages[(r19+20)>>>12][((r19+20)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b4d0;
                    pc=0x19000;
                    run_19000(); return;
                case 0x1b4d0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x1b4fc;
                        continue;
                    }
                    r3 = r2 + r0;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 63;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b4fc;
                        continue;
                    }
                    r2 = readPages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r17 = r17 + 4;
                case 0x1b4fc:
                    r2 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r2 = r18 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1b4b8;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1b510:
                    if(r21 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x1b538;
                        continue;
                    }
                    r7 = 4 << 16;
                    r6 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -24188;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r22;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r21;
                    r31=0x1b538;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1b538:
                    r2 = r23 + r0;
                    r31 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r29 = r29 + -288;
                    writePages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff] = r18;
                    r18 = r6 + r0;
                    r6 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    writePages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff] = r5;
                    r5 = r7 + r0;
                    writePages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff] = r21;
                    writePages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff] = r20;
                    writePages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff] = r31;
                    writePages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff] = r30;
                    writePages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff] = r23;
                    writePages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff] = r22;
                    writePages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff] = r19;
                    writePages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff] = r17;
                    writePages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    writePages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff] = r7;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r0;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r0;
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r0;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r0;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r0;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r0;
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = r0;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r0;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r0;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r0;
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r0;
                    r31=0x1b684;
                    pc=0x17600;
                    run_17600(); return;
                case 0x1b684:
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc58;
                        run_1cc00(); return;
                    }
                    r5 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1b6a4;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1b6a4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r2;
                    r31=0x1b6b0;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b6b0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    r31=0x1b6bc;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b6bc:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r2;
                    r31=0x1b6c8;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b6c8:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r31=0x1b6d4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b6d4:
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b754;
                        continue;
                    }
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r3 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r4 = r4 + r3;
                    r3 = r0 + 1;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r2 = r3 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b72c;
                        continue;
                    }
                case 0x1b710:
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    r2 = r3 << (r5&0x1f);
                    r2 = r2 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                        pc=0x1b710;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x1b72c:
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1b738;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1b738:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r2;
                    r31=0x1b744;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b744:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r2;
                    r31=0x1b750;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1b750:
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r2;
                case 0x1b754:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r0 + 8;
                    r17 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b768;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1b768:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r0;
                        pc=0x1b7a0;
                        continue;
                    }
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r0;
                    r19 = r17 << 2;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1b784;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1b784:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                        pc=0x1cc40;
                        run_1cc00(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1b79c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1b79c:
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r0;
                case 0x1b7a0:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c450;
                        run_1c400(); return;
                    }
                    r4 = r21 << 2;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r21;
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r4;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r4;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r4;
                case 0x1b7c8:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc28;
                        run_1cc00(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 96;
                    r31=0x1b7e8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1b7e8:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                case 0x1b7ec:
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cc00;
                        run_1cc00(); return;
                    }
                case 0x1b7fc:
                    r4 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    r2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r5 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r4 = r4 + r2;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r4;
                    r19 = r0 + r0;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r5;
                        pc=0x1cbe4;
                        run_1ca00(); return;
                    }
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r21;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23868;
                    r31=0x1b844;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1b844:
                    r3 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                    r4 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r5 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r30 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r23 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r3;
                    r22 = r4 + r5;
                case 0x1b860:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cbc0;
                        run_1ca00(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cba8;
                        run_1ca00(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 96;
                    r31=0x1b894;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1b894:
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r2;
                case 0x1b898:
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1c278;
                        run_1c200(); return;
                    }
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r19 = r19 + r2;
                    r4 = r4 + r19;
                    if(r19 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r4;
                        pc=0x1c250;
                        run_1c200(); return;
                    }
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r3 + r0;
                        pc=0x1c1c4;
                        run_1c000(); return;
                    }
                    r4 = r3 + r0;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba0c;
                        run_1ba00(); return;
                    }
                case 0x1b8e0:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1ac;
                        run_1c000(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 96;
                    r31=0x1b8f8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1b8f8:
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r2;
                case 0x1b8fc:
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c190;
                        run_1c000(); return;
                    }
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c190;
                        run_1c000(); return;
                    }
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23820;
                    r31=0x1b93c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1b93c:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bfc8;
                        run_1be00(); return;
                    }
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bbb8;
                        run_1ba00(); return;
                    }
                case 0x1b960:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r6 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    writePages[(r2+28)>>>12][((r2+28)>>>2)&0x3ff] = r3;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1b978;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1b978:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x1bab8;
                        run_1ba00(); return;
                    }
                    r16 = r2 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r4 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    r3 = readPages[(r29+304)>>>12][((r29+304)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r5 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r6 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r7 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r4 = r20 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r0;
                    r31=0x1b9c4;
                    pc=0x1ce00;
                    run_1ce00(); return;
                case 0x1b9c4:
                    r2 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r3 = r30 + r3;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r16;
                    r31=0x1b9e0;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1b9e0:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r3 + r21;
                    r3 = r3 << 2;
                    r3 = r3 + r4;
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x1ba04:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x1ba0c:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba28;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ba28;
                        continue;
                    }
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r19;
                case 0x1ba28:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r21;
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r19;
                    r3 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r3 + -23780;
                    r31=0x1ba5c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ba5c:
                    r4 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r5 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r5 = r5 + 4;
                    r2 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r3 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r4;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r5;
                    r4 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r5 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r3 = r3 + 4;
                    r4 = r4 + 1;
                    r5 = r5 + 4;
                    r21 = r21 + 1;
                    r23 = r23 + 4;
                    r30 = r30 + 4;
                    r22 = r22 + 4;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r2;
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r3;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r5;
                    pc=0x1b860;
                    run_1b800(); return;
                case 0x1bab8:
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23748;
                    r31=0x1bad4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1bad4:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r31=0x1bae4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bae4:
                    r4 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb60;
                        continue;
                    }
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r2 = r16 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb40;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1bb14:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bba4;
                        continue;
                    }
                case 0x1bb30:
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1bb14;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1bb40:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bb50;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bb50:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r18 + r0;
                case 0x1bb58:
                    /* Next insn is delay slot */ 
                    r31=0x1bb60;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bb60:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bb70;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bb70:
                    r2 = r0 + r0;
                case 0x1bb74:
                    r31 = readPages[(r29+284)>>>12][((r29+284)>>>2)&0x3ff];
                    r30 = readPages[(r29+280)>>>12][((r29+280)>>>2)&0x3ff];
                    r23 = readPages[(r29+276)>>>12][((r29+276)>>>2)&0x3ff];
                    r22 = readPages[(r29+272)>>>12][((r29+272)>>>2)&0x3ff];
                    r21 = readPages[(r29+268)>>>12][((r29+268)>>>2)&0x3ff];
                    r20 = readPages[(r29+264)>>>12][((r29+264)>>>2)&0x3ff];
                    r19 = readPages[(r29+260)>>>12][((r29+260)>>>2)&0x3ff];
                    r18 = readPages[(r29+256)>>>12][((r29+256)>>>2)&0x3ff];
                    r17 = readPages[(r29+252)>>>12][((r29+252)>>>2)&0x3ff];
                    r16 = readPages[(r29+248)>>>12][((r29+248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 288;
                    pc=r31;
                    return;
                case 0x1bba4:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bbac;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1bbac:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1bb30;
                    continue;
                case 0x1bbb8:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x1bbc4;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1bbc4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                        pc=0x1bfa0;
                        run_1be00(); return;
                    }
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r17 = r3 + r2;
                    r31=0x1bbe4;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1bbe4:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1bc1c;
                        run_1bc00(); return;
                    }
                    r4 = r0 + r0;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r17 << 2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r5;
                    r31=0x1bc00;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                        pc=0x1bf88;
                        run_1be00(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1bc18;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bc18:
                    r4 = r0 + r0;
                case 0x1bc1c:
                    r2 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                        pc=0x1bf64;
                        run_1be00(); return;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    r2 = r2 + r3;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bca8;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1bc54:
                    r3 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bc74;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1bc74:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r3 = r16 + r3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r16 = r16 + 4;
                    r2 = r17 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc54;
                        continue;
                    }
                case 0x1bca8:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 120;
                    r31=0x1bcb4;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1bcb4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r2;
                        pc=0x1beb8;
                        run_1be00(); return;
                    }
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bdfc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bcd4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bcd4:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r5+72)>>>12][((r5+72)>>>2)&0x3ff] = r2;
                    r31=0x1bce4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bce4:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r3+76)>>>12][((r3+76)>>>2)&0x3ff] = r2;
                    r31=0x1bcf4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bcf4:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r4+80)>>>12][((r4+80)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bd08;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bd08:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r0;
                    r4 = r4 + r2;
                    r2 = r0 + 1;
                    r3 = r2 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd50;
                        continue;
                    }
                    r3 = r0 + 1;
                case 0x1bd34:
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    r5 = r5 + 1;
                    r2 = r3 << (r5&0x1f);
                    r2 = r2 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                        pc=0x1bd34;
                        continue;
                    }
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r5;
                case 0x1bd50:
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bd5c;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1bd5c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r3+88)>>>12][((r3+88)>>>2)&0x3ff] = r2;
                    r31=0x1bd6c;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bd6c:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r4+92)>>>12][((r4+92)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bd80;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bd80:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r5+96)>>>12][((r5+96)>>>2)&0x3ff] = r2;
                    r31=0x1bd90;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bd90:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r3+100)>>>12][((r3+100)>>>2)&0x3ff] = r2;
                    r31=0x1bda0;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bda0:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r4+104)>>>12][((r4+104)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bdb4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1bdb4:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    writePages[(r5+108)>>>12][((r5+108)>>>2)&0x3ff] = r2;
                case 0x1bdc0:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r5;
                    writePages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff] = r5;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                    writePages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r0;
                    writePages[(r4+112)>>>12][((r4+112)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r5;
                    pc=0x1b960;
                    run_1b800(); return;
                case 0x1bdfc:
                    r5 = 4 << 16;
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -16068;
                    r31=0x1be0c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be0c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    writePages[(r3+40)>>>12][((r3+40)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -15612;
                    r31=0x1be24;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be24:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    writePages[(r4+44)>>>12][((r4+44)>>>2)&0x3ff] = r2;
                    r5 = r5 + -14904;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1be3c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be3c:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    writePages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff] = r2;
                    r5 = 4 << 16;
                    r5 = r5 + -14304;
                    /* Next insn is delay slot */ 
                    r31=0x1be58;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be58:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    writePages[(r3+52)>>>12][((r3+52)>>>2)&0x3ff] = r2;
                    r5 = 4 << 16;
                    r5 = r5 + -14304;
                    /* Next insn is delay slot */ 
                    r31=0x1be74;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be74:
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r5 = r5 + -14304;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1be8c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1be8c:
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    writePages[(r5+60)>>>12][((r5+60)>>>2)&0x3ff] = r2;
                    r5 = 4 << 16;
                    r5 = r5 + -14304;
                    /* Next insn is delay slot */ 
                    r31=0x1bea8;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1bea8:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r3+64)>>>12][((r3+64)>>>2)&0x3ff] = r2;
                    pc=0x1bdc0;
                    run_1bc00(); return;
                case 0x1beb8:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23712;
                    r31=0x1bed4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1bed4:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bb60;
                        run_1ba00(); return;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf34;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x1bf08:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bf50;
                        continue;
                    }
                case 0x1bf24:
                    r18 = r18 + 1;
                    r2 = r18 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 4;
                        pc=0x1bf08;
                        continue;
                    }
                    r17 = r17 + 4;
                case 0x1bf34:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bf44;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1bf44:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    pc=0x1bb58;
                    run_1ba00(); return;
                case 0x1bf50:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1bf58;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1bf58:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1bf24;
                    continue;
                case 0x1bf64:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23668;
                    r31=0x1bf80;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1bf80:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1bb60;
                    run_1ba00(); return;
                case 0x1bf88:
                    r6 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1bf98;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1bf98:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    pc=0x1bc1c;
                    run_1bc00(); return;
                case 0x1bfa0:
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -23624;
                case 0x1bfb8:
                    /* Next insn is delay slot */ 
                    r31=0x1bfc0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1bfc0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1bb70;
                    run_1ba00(); return;
                case 0x1bfc8:
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r16 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c150;
                        run_1c000(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1bfec;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1bfec:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r6 = r29 + 96;
                    /* Next insn is delay slot */ 
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    r31=0x1c000;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r6 = r29 + 96;
                    /* Next insn is delay slot */ 
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r2;
                    r31=0x1c014;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1c014:
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                case 0x1c018:
                    r3 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r2 = r16 + r21;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c124;
                        continue;
                    }
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = 4 << 16;
                    r7 = r3 + -23580;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1c05c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1c05c:
                    r6 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1c06c;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1c06c:
                    r17 = r2 + r0;
                    r3 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r2 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    r2 = ((r3 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c104;
                        continue;
                    }
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r3 = r3 << 2;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r3 + r4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x1c0a8:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r5 = readPages[(r29+312)>>>12][((r29+312)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r3;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    r7 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r29 + 72;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r31=0x1c0e8;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1c0e8:
                    r2 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r4 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r4 + r3;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    pc=0x1ba04;
                    run_1ba00(); return;
                case 0x1c104:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r2 = r3 - r16;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r3;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c0a8;
                    continue;
                case 0x1c124:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -23508;
                case 0x1c140:
                    /* Next insn is delay slot */ 
                    r31=0x1c148;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1c148:
                    /* Next insn is delay slot */ 
                    pc=0x1bfc0;
                    run_1be00(); return;
                case 0x1c150:
                    r4 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 112;
                    r31=0x1c160;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x1c160:
                    r4 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r6 = r29 + 116;
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r31=0x1c174;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1c174:
                    r4 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    r6 = r29 + 120;
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r31=0x1c188;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1c188:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1c018;
                    continue;
                case 0x1c190:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23468;
                    pc=0x1bfb8;
                    run_1be00(); return;
                case 0x1c1ac:
                    r4 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 108;
                    r31=0x1c1bc;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1c1bc:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1b8fc;
                    run_1b800(); return;
                case 0x1c1c4:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8e0;
                        run_1b800(); return;
                    }
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r18+40)>>>12][((r18+40)>>>2)&0x3ff];
                    r6 = r0 + 8;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                        pc=0x1c1f4;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r6 = r0 + 2;
                case 0x1c1f4:
                    r4 = r29 + 64;
                    /* Next insn is delay slot */ 
                    r5 = r18 + 44;
                    r31=0x1c200;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r6 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1c210;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1c210:
                    r5 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    r7 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r29 + 48;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x1c234;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1c234:
                    r3 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r23 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r16;
                    pc=0x1ba04;
                    run_1ba00(); return;
                case 0x1c250:
                    r2 = r21 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23416;
                    pc=0x1c140;
                    run_1c000(); return;
                case 0x1c278:
                    r3 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -23372;
                case 0x1c298:
                    /* Next insn is delay slot */ 
                    r31=0x1c2a0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1c2a0:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c2c0;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c91c;
                        run_1c800(); return;
                    }
                case 0x1c2c0:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r2 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b7c8;
                        run_1b600(); return;
                    }
                    r4 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c450;
                        run_1c400(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c888;
                        run_1c800(); return;
                    }
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+72)>>>12][((r2+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c308;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c308:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+76)>>>12][((r3+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c31c;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c31c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+80)>>>12][((r2+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c330;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c330:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+84)>>>12][((r3+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c344;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c344:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+88)>>>12][((r2+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c358;
                    pc=0x27c00;
                    run_27c00(); return;
                case 0x1c358:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+92)>>>12][((r3+92)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c36c;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c36c:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+96)>>>12][((r2+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c380;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c380:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+100)>>>12][((r3+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c394;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c394:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+104)>>>12][((r2+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c3a8;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c3a8:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+108)>>>12][((r3+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c3bc;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c3bc:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c3cc;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c3cc:
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r19 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c440;
                        run_1c400(); return;
                    }
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c424;
                        run_1c400(); return;
                    }
                    r16 = r0 + r0;
                case 0x1c3f8:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c874;
                        run_1c800(); return;
                    }
                case 0x1c414:
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1c3f8;
                        run_1c200(); return;
                    }
                    r16 = r16 + 4;
                case 0x1c424:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c434;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c434:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1c440;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c440:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c450;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c450:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+308)>>>12][((r29+308)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c460;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c460:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r0 + 8;
                    r17 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c474;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1c474:
                    r16 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                        pc=0x1c4ac;
                        continue;
                    }
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                    r19 = r17 << 2;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1c490;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1c490:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                        pc=0x1c85c;
                        run_1c800(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1c4a8;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c4a8:
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r0;
                case 0x1c4ac:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r4;
                    r23 = r0 + r0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r0;
                        pc=0x1c844;
                        run_1c800(); return;
                    }
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r0;
                    r30 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                case 0x1c4d0:
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r4 = r3 + r0;
                    r2 = ((r5 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c664;
                        run_1c600(); return;
                    }
                case 0x1c4e4:
                    r2 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c560;
                        continue;
                    }
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c53c;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1c508:
                    r4 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c648;
                        run_1c600(); return;
                    }
                case 0x1c52c:
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1c508;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1c53c:
                    r2 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c550;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c550:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c560;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c560:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c5cc;
                        continue;
                    }
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c5b4;
                        continue;
                    }
                case 0x1c580:
                    r5 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c58c;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c58c:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                case 0x1c594:
                    /* Next insn is delay slot */ 
                    r31=0x1c59c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c59c:
                    r5 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c5a8;
                    pc=0x17800;
                    run_17800(); return;
                case 0x1c5a8:
                    r2 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1bb74;
                    run_1ba00(); return;
                case 0x1c5b4:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c5c4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c5c4:
                    /* Next insn is delay slot */ 
                    pc=0x1c580;
                    continue;
                case 0x1c5cc:
                    r5 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c5d8;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c5d8:
                    r5 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c5e4;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c5e4:
                    r5 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c5f0;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c5f0:
                    r5 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c5fc;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c5fc:
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c61c;
                        continue;
                    }
                case 0x1c60c:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c594;
                    run_1c400(); return;
                case 0x1c61c:
                    r5 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c628;
                    pc=0x27c00;
                    run_27c00(); return;
                case 0x1c628:
                    r5 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c634;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c634:
                    r5 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c640;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1c640:
                    /* Next insn is delay slot */ 
                    pc=0x1c60c;
                    continue;
                case 0x1c648:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c650;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1c650:
                    r5 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c52c;
                    run_1c400(); return;
                case 0x1c664:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c824;
                        run_1c800(); return;
                    }
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r4;
                case 0x1c678:
                    r5 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r4 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r2 = r3 - r5;
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c75c;
                        continue;
                    }
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x1c730;
                        continue;
                    }
                    r17 = r0 + r0;
                    r3 = r23 << 2;
                    r2 = r30 << 2;
                    r21 = r3 - r2;
                    r19 = r3 + r0;
                    r3 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r16 = r3 << 2;
                case 0x1c6b4:
                    r5 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c71c;
                        continue;
                    }
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r22 = r16 + r2;
                    r2 = r23 < r30 ? 1 : 0;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1c744;
                        continue;
                    }
                    r16 = r16 + 4;
                    r3 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r19 + r2;
                case 0x1c6fc:
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c708;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1c708:
                    r4 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r2;
                    r23 = r23 + 1;
                    r19 = r19 + 4;
                    r21 = r21 + 4;
                case 0x1c71c:
                    r17 = r17 + 1;
                    r2 = r17 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6b4;
                        continue;
                    }
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                case 0x1c730:
                    r2 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r2 = r2 ^ 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r2;
                    pc=0x1c4d0;
                    run_1c400(); return;
                case 0x1c744:
                    r5 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r21 + r2;
                    pc=0x1c6fc;
                    continue;
                case 0x1c75c:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r5;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23336;
                    r31=0x1c784;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1c784:
                    r3 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c800;
                        run_1c800(); return;
                    }
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c7dc;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x1c7a8:
                    r4 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c808;
                        run_1c800(); return;
                    }
                case 0x1c7cc:
                    r17 = r17 + 1;
                    r2 = r17 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x1c7a8;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x1c7dc:
                    r2 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c7f0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c7f0:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c800;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    /* Next insn is delay slot */ 
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r0;
                    pc=0x1c4e4;
                    run_1c400(); return;
                case 0x1c808:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c810;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1c810:
                    r5 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c7cc;
                    run_1c600(); return;
                case 0x1c824:
                    r4 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 124;
                    r31=0x1c834;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1c834:
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c678;
                    run_1c600(); return;
                case 0x1c844:
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r30 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r3 + r0;
                        pc=0x1c664;
                        run_1c600(); return;
                    }
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x1c4e4;
                    run_1c400(); return;
                case 0x1c85c:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x1c86c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1c86c:
                    /* Next insn is delay slot */ 
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r16;
                    pc=0x1c4ac;
                    run_1c400(); return;
                case 0x1c874:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c87c;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1c87c:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1c414;
                    run_1c400(); return;
                case 0x1c888:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+40)>>>12][((r2+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c89c;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c89c:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+44)>>>12][((r3+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c8b0;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c8b0:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+48)>>>12][((r2+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c8c4;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c8c4:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+60)>>>12][((r3+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c8d8;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c8d8:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+64)>>>12][((r2+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c8ec;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c8ec:
                    r3 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r3+52)>>>12][((r3+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c900;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c900:
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = readPages[(r2+56)>>>12][((r2+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c914;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1c914:
                    /* Next insn is delay slot */ 
                    pc=0x1c3bc;
                    run_1c200(); return;
                case 0x1c91c:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 96;
                    r31=0x1c92c;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1c92c:
                    r23 = r2 + r0;
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb8c;
                        run_1ca00(); return;
                    }
                    if(r23 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb8c;
                        run_1ca00(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c954;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1c954:
                    r5 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r6 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1c964;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1c964:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r30 = r2 + r0;
                        pc=0x1cb70;
                        run_1ca00(); return;
                    }
                    r30 = r2 + r0;
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cad0;
                        run_1ca00(); return;
                    }
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r22 = r0 + r0;
                    r31=0x1c980;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1c980:
                    r3 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r16 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    r17 = r3 + r2;
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r2 = r3 & 7;
                    r4 = r3 >> 3;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r19 = r4 + r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    { long hilo = (long)(r2) * ((long)r19); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r3 = r21 - r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = r7 + -23276;
                    r23 = lo;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c9e8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1c9e8:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca28;
                        run_1ca00(); return;
                    }
                case 0x1c9f8:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x1ca08;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1ca08:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    r16 = r16 + r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r17 = r17 + r19;
                    r2 = r22 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c9f8;
                        run_1c800(); return;
                    }
                case 0x1ca28:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x1ca34;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1ca34:
                    r22 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r23 = r0 + r0;
                    r2 = ((r22 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cabc;
                        continue;
                    }
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    r2 = r22 << 2;
                    r19 = r2 + r0;
                    r17 = r2 + r4;
                case 0x1ca58:
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1ca68;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1ca68:
                    r5 = r0 + 4;
                    r7 = r0 - r23;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r4 = r20 + r0;
                    r5 = r2 + r0;
                    r6 = r30 + r0;
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r31=0x1ca8c;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1ca8c:
                    r3 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    r23 = r23 + r3;
                    r3 = readPages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff];
                    r17 = r17 + 4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r19 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r16;
                    r2 = ((r22 & 0xffffffffL) < (r21 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 4;
                        pc=0x1ca58;
                        continue;
                    }
                    r19 = r19 + 4;
                case 0x1cabc:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r30 + r0;
                    r31=0x1cac8;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1cac8:
                    /* Next insn is delay slot */ 
                    pc=0x1c2c0;
                    run_1c200(); return;
                case 0x1cad0:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r21 - r4;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r23;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + r0;
                    r7 = r7 + -23216;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1cb0c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1cb0c:
                    r4 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    r31=0x1cb1c;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1cb1c:
                    r3 = readPages[(r29+300)>>>12][((r29+300)>>>2)&0x3ff];
                    r5 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r20 + r0;
                    r6 = r29 + 48;
                    r7 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r23;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    r31=0x1cb40;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x1cb40:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                        pc=0x1ca28;
                        continue;
                    }
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -23156;
                case 0x1cb60:
                    /* Next insn is delay slot */ 
                    r31=0x1cb68;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1cb68:
                    /* Next insn is delay slot */ 
                    pc=0x1bb70;
                    run_1ba00(); return;
                case 0x1cb70:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23120;
                    pc=0x1cb60;
                    continue;
                case 0x1cb8c:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23076;
                    pc=0x1cb60;
                    continue;
                case 0x1cba8:
                    r4 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 104;
                    r31=0x1cbb8;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1cbb8:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1b898;
                    run_1b800(); return;
                case 0x1cbc0:
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -23032;
                    pc=0x1c298;
                    run_1c200(); return;
                case 0x1cbe4:
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22988;
                    pc=0x1bfb8;
                    run_1be00(); return;
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22964;
                    r31=0x1cc20;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1cc20:
                    /* Next insn is delay slot */ 
                    pc=0x1b7fc;
                    run_1b600(); return;
                case 0x1cc28:
                    r4 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 100;
                    r31=0x1cc38;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1cc38:
                    /* Next insn is delay slot */ 
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                    pc=0x1b7ec;
                    run_1b600(); return;
                case 0x1cc40:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x1cc50;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1cc50:
                    /* Next insn is delay slot */ 
                    writePages[(r29+204)>>>12][((r29+204)>>>2)&0x3ff] = r16;
                    pc=0x1b7a0;
                    run_1b600(); return;
                case 0x1cc58:
                    r2 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = r7 + -22916;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1cc74;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1cc74:
                    r5 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1cc80;
                    pc=0x28600;
                    run_28600(); return;
                case 0x1cc80:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14304;
                    /* Next insn is delay slot */ 
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                    r31=0x1cc94;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cc94:
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b754;
                        run_1b600(); return;
                    }
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 << 2;
                    r31=0x1ccb8;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1ccb8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r2;
                        pc=0x1b754;
                        run_1b600(); return;
                    }
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+292)>>>12][((r29+292)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22884;
                    pc=0x1cb60;
                    run_1ca00(); return;
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    r29 = r29 + -648;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r5;
                    r5 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r30;
                    writePages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff] = r23;
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r22;
                    writePages[(r29+616)>>>12][((r29+616)>>>2)&0x3ff] = r18;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r17;
                    writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r31;
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r21;
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r20;
                    writePages[(r29+620)>>>12][((r29+620)>>>2)&0x3ff] = r19;
                    writePages[(r29+608)>>>12][((r29+608)>>>2)&0x3ff] = r16;
                    r22 = r4 + r0;
                    r18 = r6 + r0;
                    r30 = r7 + r0;
                    r23 = r0 + r0;
                    writePages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff] = r0;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r0;
                    writePages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff] = r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x1ce84;
                        continue;
                    }
                    r17 = r0 + r0;
                    r4 = r7 + r0;
                case 0x1ce5c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r2 = r2 + r3;
                    writePages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff] = r2;
                    r2 = ((r17 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ce5c;
                        continue;
                    }
                case 0x1ce84:
                    r3 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r5;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22836;
                    r31=0x1ceac;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ceac:
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0d0;
                        run_1d000(); return;
                    }
                    r3 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22784;
                    r31=0x1ced8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ced8:
                    r5 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1cee4;
                    pc=0x28600;
                    run_28600(); return;
                case 0x1cee4:
                    r23 = r2 + r0;
                    r17 = r0 + r0;
                    r19 = 4 << 16;
                    r16 = r29 + 56;
                case 0x1cef4:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x1cf00;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1cf00:
                    writePages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff] = r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r17;
                    writePages[(r16+-4)>>>12][((r16+-4)>>>2)&0x3ff] = r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + r0;
                    r7 = r19 + -22756;
                    /* Next insn is delay slot */ 
                    r17 = r17 + 1;
                    r31=0x1cf30;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1cf30:
                    r2 = (r17&0xffffffffL) < (35&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 12;
                        pc=0x1cef4;
                        continue;
                    }
                    r16 = r16 + 12;
                    r2 = r29 + 48;
                    r17 = r0 + 35;
                    r4 = r22 + r0;
                    r5 = r29 + 32;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    r31=0x1cf5c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1cf5c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff] = r2;
                        pc=0x1da04;
                        run_1da00(); return;
                    }
                    writePages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r5 = r4 << 1;
                    r5 = r5 + r4;
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 << 2;
                    r31=0x1cf80;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1cf80:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff] = r2;
                        pc=0x1d9e8;
                        run_1d800(); return;
                    }
                    writePages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r17 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9b4;
                        run_1d800(); return;
                    }
                case 0x1cf98:
                    r5 = readPages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 512;
                    r31=0x1cfa8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1cfa8:
                    r16 = r2 + r0;
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d980;
                        run_1d800(); return;
                    }
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d980;
                        run_1d800(); return;
                    }
                    r2 = r16 < 35 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d980;
                        run_1d800(); return;
                    }
                    r2 = r16 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8dc;
                        run_1d800(); return;
                    }
                    r19 = r16 + r0;
                    r21 = r0 + 1;
                case 0x1cfe4:
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    r3 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    r4 = r22 + r0;
                    r7 = r3 + -22728;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1d010;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d010:
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r3 = r17 + r21;
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8a8;
                        run_1d800(); return;
                    }
                case 0x1d024:
                    if(r21 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1d068;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = r17 << 1;
                    r2 = r2 + r17;
                    r5 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r3 = r17 + r0;
                    r4 = r21 + r0;
                    r2 = r2 + r5;
                case 0x1d048:
                    r4 = r4 + -1;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r19;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    r3 = r3 + 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 12;
                        pc=0x1d048;
                        continue;
                    }
                    r2 = r2 + 12;
                    r4 = r21 + r0;
                case 0x1d068:
                    r3 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r17 = r17 + r4;
                    r2 = ((r17 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cf98;
                        run_1ce00(); return;
                    }
                case 0x1d07c:
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r3 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    writePages[(r29+476)>>>12][((r29+476)>>>2)&0x3ff] = r4;
                    r4 = r23 + r0;
                    writePages[(r29+480)>>>12][((r29+480)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+472)>>>12][((r29+472)>>>2)&0x3ff] = r0;
                    r31=0x1d098;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1d098:
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r29 + 472;
                    r31=0x1d0a4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1d0a4:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff] = r2;
                    r31=0x1d0b4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1d0b4:
                    r5 = readPages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d0c0;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1d0c0:
                    r5 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d880;
                        run_1d800(); return;
                    }
                case 0x1d0d0:
                    r5 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d0e0;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1d0e0:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d868;
                        run_1d800(); return;
                    }
                    r5 = readPages[(r18+48)>>>12][((r18+48)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d100;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d100:
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                case 0x1d104:
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r0;
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r0;
                    r3 = lo;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r3;
                        pc=0x1d80c;
                        run_1d800(); return;
                    }
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r3;
                case 0x1d12c:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d850;
                        run_1d800(); return;
                    }
                    r5 = readPages[(r18+48)>>>12][((r18+48)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d14c;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d14c:
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r2;
                case 0x1d150:
                    r3 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r3 = lo;
                    r2 = r2 + r3;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r3;
                    writePages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff] = r2;
                case 0x1d17c:
                    r3 = readPages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d7a8;
                        run_1d600(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d790;
                        run_1d600(); return;
                    }
                    r5 = readPages[(r18+40)>>>12][((r18+40)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d1ac;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d1ac:
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r2;
                case 0x1d1b0:
                    r4 = readPages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff];
                    r2 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    writePages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff] = r0;
                    r20 = r4 + r2;
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r20;
                case 0x1d1c4:
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d788;
                        run_1d600(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d770;
                        run_1d600(); return;
                    }
                    r5 = readPages[(r18+32)>>>12][((r18+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1d1f0;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1d1f0:
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r2;
                case 0x1d1f4:
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r3 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r4 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r21 = r2 + r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d758;
                        run_1d600(); return;
                    }
                    r5 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d21c;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d21c:
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r2;
                case 0x1d220:
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d728;
                        run_1d600(); return;
                    }
                    r6 = r3 + r0;
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d28c;
                        continue;
                    }
                    r7 = r0 + r0;
                    r5 = r30 + r0;
                case 0x1d260:
                    r2 = r4 + r30;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = r6 - r4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = r7 + 4;
                    r2 = ((r6 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r7 + r0;
                        pc=0x1d260;
                        continue;
                    }
                    r4 = r7 + r0;
                case 0x1d28c:
                    r2 = r4 + r30;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d2b0;
                    pc=0x25600;
                    run_25600(); return;
                case 0x1d2b0:
                    r17 = r2 + r0;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d720;
                        run_1d600(); return;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d708;
                        run_1d600(); return;
                    }
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x1d2e0;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1d2e0:
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r2;
                case 0x1d2e4:
                    r2 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3fc;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d694;
                        run_1d600(); return;
                    }
                    r4 = readPages[(r18+96)>>>12][((r18+96)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 548;
                    r31=0x1d314;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d314:
                    r4 = readPages[(r18+100)>>>12][((r18+100)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r6 = r29 + 552;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    r31=0x1d328;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d328:
                    r4 = readPages[(r18+104)>>>12][((r18+104)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r6 = r29 + 556;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    r31=0x1d33c;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d33c:
                    r4 = readPages[(r18+108)>>>12][((r18+108)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r6 = r29 + 560;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    r31=0x1d350;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d350:
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                case 0x1d354:
                    r2 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    r5 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r5 = r5 + r2;
                    r2 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r6 + r2;
                    r31=0x1d374;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1d374:
                    r19 = r17 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x1d618;
                        run_1d600(); return;
                    }
                    r16 = r2 + r0;
                    r2 = readPages[(r18+112)>>>12][((r18+112)>>>2)&0x3ff];
                    r3 = readPages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff];
                    writePages[(r29+488)>>>12][((r29+488)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    r5 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r2 = r2 >> 1;
                    r2 = r2 + r3;
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    writePages[(r29+496)>>>12][((r29+496)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff];
                    r3 = r3 >> 1;
                    r3 = r3 + r2;
                    writePages[(r29+500)>>>12][((r29+500)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r18+116)>>>12][((r18+116)>>>2)&0x3ff];
                    r3 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r7 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r6 = r29 + 488;
                    writePages[(r29+492)>>>12][((r29+492)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+504)>>>12][((r29+504)>>>2)&0x3ff] = r0;
                    writePages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x1d3e0;
                    pc=0x22200;
                    run_22200(); return;
                case 0x1d3e0:
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x1d3ec;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1d3ec:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r17 = r16 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d604;
                        run_1d600(); return;
                    }
                case 0x1d3fc:
                    r5 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5f8;
                        continue;
                    }
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = (r4&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5d8;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x1d428:
                    r2 = r20 + r2;
                    r20 = r2 + -1;
                case 0x1d430:
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d55c;
                        continue;
                    }
                case 0x1d438:
                    r5 = r0 + 1;
                    if(r4 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1d554;
                        continue;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d53c;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d518;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4fc;
                        continue;
                    }
                case 0x1d464:
                    r3 = readPages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff];
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r5 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r7 = readPages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r6 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x1d488;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1d488:
                    r3 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4dc;
                        continue;
                    }
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4bc;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x1d4b4:
                    r2 = r20 + r2;
                    r20 = r2 + -1;
                case 0x1d4bc:
                    r4 = readPages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r4 = r4 + 1;
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d4d4;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1d4d4:
                    /* Next insn is delay slot */ 
                    pc=0x1d17c;
                    run_1d000(); return;
                case 0x1d4dc:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4bc;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d4b4;
                    continue;
                case 0x1d4fc:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = r20 - r2;
                    r2 = r2 + 1;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r2;
                case 0x1d510:
                    /* Next insn is delay slot */ 
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r21;
                    pc=0x1d464;
                    continue;
                case 0x1d518:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r20 - r2;
                    r2 = r2 + 1;
                    r3 = r21 - r3;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r2;
                case 0x1d530:
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r3;
                    pc=0x1d464;
                    continue;
                case 0x1d53c:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r20;
                    r2 = r21 - r2;
                case 0x1d548:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r2;
                    pc=0x1d464;
                    continue;
                case 0x1d554:
                    /* Next insn is delay slot */ 
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r20;
                    pc=0x1d510;
                    continue;
                case 0x1d55c:
                    r2 = r0 + 1;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5d0;
                        continue;
                    }
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5c0;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5a4;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d464;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r2 = r21 - r2;
                    r2 = r2 + 1;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r2;
                case 0x1d59c:
                    /* Next insn is delay slot */ 
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r20;
                    pc=0x1d464;
                    continue;
                case 0x1d5a4:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = r21 - r2;
                    r2 = r2 + 1;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r3 = r20 - r3;
                    pc=0x1d530;
                    continue;
                case 0x1d5c0:
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    r2 = r20 - r2;
                    pc=0x1d548;
                    continue;
                case 0x1d5d0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r21;
                    pc=0x1d59c;
                    continue;
                case 0x1d5d8:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d438;
                        continue;
                    }
                    r2 = r4 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d430;
                        continue;
                    }
                    r2 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d428;
                    continue;
                case 0x1d5f8:
                    r4 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1d5d8;
                    continue;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                case 0x1d604:
                    r5 = readPages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x1d610;
                    pc=0x28a00;
                    run_28a00(); return;
                case 0x1d610:
                    /* Next insn is delay slot */ 
                    pc=0x1d3fc;
                    run_1d200(); return;
                case 0x1d618:
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1d624;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1d624:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d680;
                        continue;
                    }
                case 0x1d634:
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22676;
                    r31=0x1d650;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d650:
                    r31 = readPages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff];
                    r30 = readPages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff];
                    r23 = readPages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff];
                    r22 = readPages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff];
                    r21 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r20 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    r19 = readPages[(r29+620)>>>12][((r29+620)>>>2)&0x3ff];
                    r18 = readPages[(r29+616)>>>12][((r29+616)>>>2)&0x3ff];
                    r17 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r16 = readPages[(r29+608)>>>12][((r29+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 648;
                    pc=r31;
                    return;
                case 0x1d680:
                    r5 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d68c;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1d68c:
                    /* Next insn is delay slot */ 
                    pc=0x1d634;
                    continue;
                case 0x1d694:
                    r5 = readPages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d6a4;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d6a4:
                    r5 = readPages[(r18+56)>>>12][((r18+56)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r6 = r29 + 516;
                    /* Next insn is delay slot */ 
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r2;
                    r31=0x1d6b8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d6b8:
                    r5 = readPages[(r18+60)>>>12][((r18+60)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r6 = r29 + 516;
                    /* Next insn is delay slot */ 
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r2;
                    r31=0x1d6cc;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d6cc:
                    r5 = readPages[(r18+64)>>>12][((r18+64)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r6 = r29 + 516;
                    /* Next insn is delay slot */ 
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r2;
                    r31=0x1d6e0;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d6e0:
                    r5 = readPages[(r18+68)>>>12][((r18+68)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r6 = r29 + 516;
                    /* Next insn is delay slot */ 
                    writePages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff] = r2;
                    r31=0x1d6f4;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d6f4:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r2;
                    r31=0x1d700;
                    pc=0x28800;
                    run_28800(); return;
                case 0x1d700:
                    /* Next insn is delay slot */ 
                    pc=0x1d354;
                    run_1d200(); return;
                case 0x1d708:
                    r4 = readPages[(r18+92)>>>12][((r18+92)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 544;
                    r31=0x1d718;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d718:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d2e4;
                    run_1d200(); return;
                case 0x1d720:
                    /* Next insn is delay slot */ 
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r0;
                    pc=0x1d2e4;
                    run_1d200(); return;
                case 0x1d728:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22640;
                    r31=0x1d750;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d750:
                    /* Next insn is delay slot */ 
                    pc=0x1d650;
                    continue;
                case 0x1d758:
                    r4 = readPages[(r18+88)>>>12][((r18+88)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 540;
                    r31=0x1d768;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x1d768:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d220;
                    run_1d200(); return;
                case 0x1d770:
                    r4 = readPages[(r18+84)>>>12][((r18+84)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 536;
                    r31=0x1d780;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d780:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d1f4;
                    run_1d000(); return;
                case 0x1d788:
                    /* Next insn is delay slot */ 
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r0;
                    pc=0x1d1f4;
                    run_1d000(); return;
                case 0x1d790:
                    r4 = readPages[(r18+76)>>>12][((r18+76)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 528;
                    r31=0x1d7a0;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d7a0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d1b0;
                    run_1d000(); return;
                case 0x1d7a8:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d838;
                        run_1d800(); return;
                    }
                    r5 = readPages[(r18+44)>>>12][((r18+44)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 516;
                    r31=0x1d7c8;
                    pc=0x27e00;
                    run_27e00(); return;
                case 0x1d7c8:
                    writePages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff] = r2;
                case 0x1d7cc:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d7f4;
                        continue;
                    }
                    r3 = readPages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff];
                    r2 = readPages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    /* Next insn is delay slot */ 
                    r20 = r20 + r2;
                    pc=0x1d1c4;
                    run_1d000(); return;
                case 0x1d7f4:
                    r2 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r5 = readPages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff];
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d12c;
                        run_1d000(); return;
                    }
                case 0x1d80c:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d824;
                        continue;
                    }
                case 0x1d81c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x1d650;
                    run_1d600(); return;
                case 0x1d824:
                    r5 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x1d830;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1d830:
                    /* Next insn is delay slot */ 
                    pc=0x1d81c;
                    continue;
                case 0x1d838:
                    r4 = readPages[(r18+80)>>>12][((r18+80)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 532;
                    r31=0x1d848;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d848:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d7cc;
                    run_1d600(); return;
                case 0x1d850:
                    r4 = readPages[(r18+72)>>>12][((r18+72)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 524;
                    r31=0x1d860;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d860:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d150;
                    run_1d000(); return;
                case 0x1d868:
                    r4 = readPages[(r18+72)>>>12][((r18+72)>>>2)&0x3ff];
                    r5 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 520;
                    r31=0x1d878;
                    pc=0x27200;
                    run_27200(); return;
                case 0x1d878:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x1d104;
                    run_1d000(); return;
                case 0x1d880:
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -22608;
                case 0x1d898:
                    /* Next insn is delay slot */ 
                    r31=0x1d8a0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d8a0:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x1d650;
                    run_1d600(); return;
                case 0x1d8a8:
                    r2 = r3 - r4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r3 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r3 + -22560;
                    r31=0x1d8cc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d8cc:
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r21 = r4 - r17;
                    pc=0x1d024;
                    run_1d000(); return;
                case 0x1d8dc:
                    r3 = r0 + 32;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        r19 = r0 + r0;
                        pc=0x1d944;
                        continue;
                    }
                    r19 = r0 + r0;
                case 0x1d8e8:
                    r3 = r0 + 32;
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1d938;
                        continue;
                    }
                    r2 = r0 + 33;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d920;
                        continue;
                    }
                    r2 = r0 + 34;
                    if(r16 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfe4;
                        run_1ce00(); return;
                    }
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 7;
                    r31=0x1d918;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1d918:
                    /* Next insn is delay slot */ 
                    r21 = r2 + 11;
                    pc=0x1cfe4;
                    run_1ce00(); return;
                case 0x1d920:
                    r4 = r23 + r0;
                    r5 = r0 + 3;
                case 0x1d928:
                    /* Next insn is delay slot */ 
                    r31=0x1d930;
                    pc=0x28e00;
                    run_28e00(); return;
                case 0x1d930:
                    /* Next insn is delay slot */ 
                    r21 = r2 + 3;
                    pc=0x1cfe4;
                    run_1ce00(); return;
                case 0x1d938:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 2;
                    pc=0x1d928;
                    continue;
                case 0x1d944:
                    r2 = r17 << 1;
                    r2 = r2 + r17;
                    r4 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r19 = readPages[(r2+-12)>>>12][((r2+-12)>>>2)&0x3ff];
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8e8;
                        continue;
                    }
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22496;
                    pc=0x1d898;
                    continue;
                case 0x1d980:
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22432;
                    r31=0x1d99c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d99c:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d650;
                        run_1d600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d8a0;
                    continue;
                case 0x1d9b4:
                    r4 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d07c;
                        run_1d000(); return;
                    }
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22392;
                    r31=0x1d9e0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1d9e0:
                    /* Next insn is delay slot */ 
                    pc=0x1d07c;
                    run_1d000(); return;
                case 0x1d9e8:
                    r2 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22336;
                    pc=0x1d898;
                    continue;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    r7 = r7 + -22336;
                case 0x1da04:
                    r3 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22276;
                    pc=0x1d898;
                    run_1d800(); return;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r29 = r29 + -248;
                    writePages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff] = r22;
                    writePages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff] = r21;
                    writePages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff] = r20;
                    writePages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff] = r17;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r31;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r30;
                    writePages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff] = r23;
                    writePages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff] = r19;
                    writePages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff] = r18;
                    writePages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r2 = (r2&0xffffffffL) < (17&0xffffffffL) ? 1 : 0;
                    r21 = r5 + r0;
                    r22 = r6 + r0;
                    r17 = r0 + r0;
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                        pc=0x1e848;
                        run_1e800(); return;
                    }
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r0;
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 48;
                    r31=0x1dc5c;
                    pc=0x19200;
                    run_19200(); return;
                case 0x1dc5c:
                    /* Next insn is delay slot */ 
                    r4 = r22 + 17;
                    r31=0x1dc64;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x1dc64:
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r16 = r2 & 65535;
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -22232;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x1dc84;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1dc84:
                    r3 = r16 & 1;
                    r2 = r16 & 2;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                    r3 = r16 & 12;
                    r3 = r3 >> 2;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r2 = r2 << (r3&0x1f);
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r3;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r2;
                    r3 = r16 & 48;
                    r2 = r16 & 384;
                    r3 = r3 >> 4;
                    r2 = r2 >> 7;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r3;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r2;
                    r3 = r16 & 512;
                    r2 = r16 & 31744;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r3;
                    r3 = r2 >> 10;
                    r4 = r16 & 64;
                    r2 = r3 < 16 ? 1 : 0;
                    r23 = r0 + 19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r3;
                        pc=0x1dcf4;
                        continue;
                    }
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r3;
                    r2 = r3 + -32;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r2;
                case 0x1dcf4:
                    r2 = r16 & 32768;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e824;
                        run_1e800(); return;
                    }
                case 0x1dd0c:
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7ec;
                        run_1e600(); return;
                    }
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7e4;
                        run_1e600(); return;
                    }
                    r2 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7e4;
                        run_1e600(); return;
                    }
                    addr=r22+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r0 + 23;
                    addr=r29+188;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r22+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r29+189;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r22+21;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r29+190;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r22+22;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r29+191;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x1dd6c:
                    /* Next insn is delay slot */ 
                    r4 = r22 + r23;
                    r31=0x1dd74;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x1dd74:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0f8;
                        run_1e000(); return;
                    }
                    r3 = r17 & 3;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7d4;
                        run_1e600(); return;
                    }
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de20;
                        run_1de00(); return;
                    }
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ddbc;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1de08;
                        run_1de00(); return;
                    }
                case 0x1ddbc:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    r7 = r7 + -22200;
                case 0x1ddd0:
                    /* Next insn is delay slot */ 
                    r31=0x1ddd8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ddd8:
                    r31 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r30 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                    r23 = readPages[(r29+236)>>>12][((r29+236)>>>2)&0x3ff];
                    r22 = readPages[(r29+232)>>>12][((r29+232)>>>2)&0x3ff];
                    r21 = readPages[(r29+228)>>>12][((r29+228)>>>2)&0x3ff];
                    r20 = readPages[(r29+224)>>>12][((r29+224)>>>2)&0x3ff];
                    r19 = readPages[(r29+220)>>>12][((r29+220)>>>2)&0x3ff];
                    r18 = readPages[(r29+216)>>>12][((r29+216)>>>2)&0x3ff];
                    r17 = readPages[(r29+212)>>>12][((r29+212)>>>2)&0x3ff];
                    r16 = readPages[(r29+208)>>>12][((r29+208)>>>2)&0x3ff];
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 248;
                    pc=r31;
                    return;
                case 0x1de08:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22152;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1de20:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ddbc;
                        run_1dc00(); return;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -16068;
                case 0x1de34:
                    /* Next insn is delay slot */ 
                    r31=0x1de3c;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1de3c:
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r2;
                    r2 = r17 & 12;
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7c4;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e7ac;
                        run_1e600(); return;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e790;
                        run_1e600(); return;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e778;
                        run_1e600(); return;
                    }
                case 0x1de78:
                    r2 = r17 & 48;
                    r4 = r2 >> 4;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e768;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e750;
                        run_1e600(); return;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e734;
                        run_1e600(); return;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e71c;
                        run_1e600(); return;
                    }
                case 0x1deb0:
                    r2 = r17 & 192;
                    r4 = r2 >> 6;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e70c;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df18;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1dee8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1df00;
                        continue;
                    }
                case 0x1dee8:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22104;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1df00:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22056;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1df18:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dee8;
                        continue;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14472;
                case 0x1df2c:
                    /* Next insn is delay slot */ 
                    r31=0x1df34;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1df34:
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r2;
                    r2 = r17 & 768;
                    r4 = r2 >> 8;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6fc;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dfa0;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1df70;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1df88;
                        continue;
                    }
                case 0x1df70:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -22008;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1df88:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21960;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1dfa0:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df70;
                        continue;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14472;
                case 0x1dfb4:
                    /* Next insn is delay slot */ 
                    r31=0x1dfbc;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1dfbc:
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r2;
                    r2 = r17 & 3072;
                    r4 = r2 >> 10;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6ec;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e028;
                        run_1e000(); return;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1dff8;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e010;
                        run_1e000(); return;
                    }
                case 0x1dff8:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21912;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e010:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21864;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e028:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dff8;
                        run_1de00(); return;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14472;
                case 0x1e03c:
                    /* Next insn is delay slot */ 
                    r31=0x1e044;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e044:
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r2;
                    r2 = r17 & 12288;
                    r4 = r2 >> 12;
                    r3 = r0 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6dc;
                        run_1e600(); return;
                    }
                    r2 = r4 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e0b0;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e080;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e098;
                        continue;
                    }
                case 0x1e080:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21816;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e098:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21768;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e0b0:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e080;
                        continue;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14472;
                case 0x1e0c4:
                    /* Next insn is delay slot */ 
                    r31=0x1e0cc;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e0cc:
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r2;
                    r2 = r17 & 16384;
                    r3 = r2 >> 14;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6c4;
                        run_1e600(); return;
                    }
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6ac;
                        run_1e600(); return;
                    }
                case 0x1e0ec:
                    r2 = r17 << 16;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e68c;
                        run_1e600(); return;
                    }
                case 0x1e0f8:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -21720;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r31=0x1e138;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e138:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x1e144;
                    pc=0x1b200;
                    run_1b200(); return;
                case 0x1e144:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r2 + r0;
                        pc=0x1e164;
                        continue;
                    }
                    r19 = r2 + r0;
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21676;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e164:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x1e170;
                    pc=0x1b400;
                    run_1b400(); return;
                case 0x1e170:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r2;
                        pc=0x1e674;
                        run_1e600(); return;
                    }
                    writePages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e65c;
                        run_1e600(); return;
                    }
                    r17 = r0 + 1;
                    r2 = r17 < r19 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1d4;
                        continue;
                    }
                    r2 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r30 = 4 << 16;
                    r18 = r0 + 1;
                    r16 = r2 + 4;
                case 0x1e1b0:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e640;
                        run_1e600(); return;
                    }
                case 0x1e1c0:
                    r17 = r17 + 1;
                    r2 = r17 < r19 ? 1 : 0;
                    r16 = r16 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x1e1b0;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x1e1d4:
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e228;
                        run_1e200(); return;
                    }
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e228;
                        run_1e200(); return;
                    }
                    r2 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    r16 = r0 + 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e208;
                        run_1e200(); return;
                    }
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r16 = r0 + 8192;
                case 0x1e208:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1e214;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1e214:
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff] = r2;
                    r31=0x1e228;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1e228:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r6 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e238;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1e238:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x1e580;
                        run_1e400(); return;
                    }
                    r17 = r2 + r0;
                    r6 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r22 = r22 + r23;
                    r6 = r6 - r23;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r22 + r0;
                    r31=0x1e258;
                    pc=0x17600;
                    run_17600(); return;
                case 0x1e258:
                    r18 = r2 + r0;
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e348;
                        continue;
                    }
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x1e294;
                        continue;
                    }
                    r16 = r0 + r0;
                    r4 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r5 = r19 + r0;
                case 0x1e27c:
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r5 + -1;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + r3;
                        pc=0x1e27c;
                        continue;
                    }
                    r16 = r16 + r3;
                case 0x1e294:
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e2a0;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1e2a0:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff] = r2;
                    r31=0x1e2ac;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e2ac:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r2;
                    r31=0x1e2b8;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e2b8:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = r2;
                    r31=0x1e2c4;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e2c4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r2;
                    r31=0x1e2d0;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e2d0:
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    r2 = r2 < r16 ? 1 : 0;
                    r18 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x1e300;
                        continue;
                    }
                    r5 = r0 + r0;
                    r3 = r0 + 1;
                case 0x1e2ec:
                    r5 = r5 + 1;
                    r2 = r3 << (r5&0x1f);
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e2ec;
                        continue;
                    }
                case 0x1e300:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e308;
                    pc=0x27800;
                    run_27800(); return;
                case 0x1e308:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff] = r2;
                    r31=0x1e314;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e314:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff] = r2;
                    r31=0x1e320;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e320:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r2;
                    r31=0x1e32c;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e32c:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r2;
                    r31=0x1e338;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e338:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r2;
                    r31=0x1e344;
                    pc=0x27400;
                    run_27400(); return;
                case 0x1e344:
                    writePages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff] = r2;
                case 0x1e348:
                    r2 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r3 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    r2 = r2 - r23;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r7 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    r2 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r29 + 72;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    r31=0x1e388;
                    pc=0x1ce00;
                    run_1ce00(); return;
                case 0x1e388:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e3b0;
                        continue;
                    }
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e564;
                        run_1e400(); return;
                    }
                case 0x1e3a8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4c8;
                        run_1e400(); return;
                    }
                case 0x1e3b0:
                    r5 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3bc;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3bc:
                    r5 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3c8;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3c8:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3d4;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3d4:
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3e0;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3e0:
                    r5 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3ec;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3ec:
                    r5 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e3f8;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e3f8:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e404;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r4 = r20 + r0;
                case 0x1e404:
                    r5 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e410;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e410:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+192)>>>12][((r29+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e420;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1e420:
                    addr=r21+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 4;
                    r2 = r2 & 63;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1e4c0;
                        continue;
                    }
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -21576;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x1e46c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e46c:
                    r3 = readPages[(r20+64)>>>12][((r20+64)>>>2)&0x3ff];
                    r5 = readPages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r5 = r5 + r2;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r7 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r6 = r17 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x1e4ac;
                    pc=0x1a000;
                    run_1a000(); return;
                case 0x1e4ac:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1e4b8;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1e4b8:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x1ddd8;
                    run_1dc00(); return;
                case 0x1e4c0:
                    /* Next insn is delay slot */ 
                    writePages[(r21+24)>>>12][((r21+24)>>>2)&0x3ff] = r17;
                    pc=0x1e4b8;
                    continue;
                case 0x1e4c8:
                    r5 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e4d4;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e4d4:
                    r5 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e4e0;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e4e0:
                    r5 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e4ec;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e4ec:
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e4f8;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e4f8:
                    r5 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e504;
                    pc=0x27c00;
                    run_27c00(); return;
                case 0x1e504:
                    r5 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e510;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e510:
                    r5 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e51c;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e51c:
                    r5 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e528;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e528:
                    r5 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e534;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e534:
                    r5 = readPages[(r29+180)>>>12][((r29+180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e540;
                    pc=0x27600;
                    run_27600(); return;
                case 0x1e540:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+200)>>>12][((r29+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e550;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1e550:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x1e55c;
                    pc=0x17800;
                    run_17800(); return;
                case 0x1e55c:
                    /* Next insn is delay slot */ 
                    pc=0x1e410;
                    continue;
                case 0x1e564:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e574;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1e574:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x1e3a8;
                    run_1e200(); return;
                case 0x1e580:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r3 + r0;
                        pc=0x1e5a0;
                        continue;
                    }
                    r4 = r3 + r0;
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e628;
                        run_1e600(); return;
                    }
                case 0x1e5a0:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e5c0;
                        continue;
                    }
                case 0x1e5a8:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21516;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e5c0:
                    r5 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e5cc;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e5cc:
                    r5 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e5d8;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e5d8:
                    r5 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e5e4;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e5e4:
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e5f0;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e5f0:
                    r5 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e5fc;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e5fc:
                    r5 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e608;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e608:
                    r5 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e614;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e614:
                    r5 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1e620;
                    pc=0x29000;
                    run_29000(); return;
                case 0x1e620:
                    /* Next insn is delay slot */ 
                    pc=0x1e5a8;
                    run_1e400(); return;
                case 0x1e628:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r29+196)>>>12][((r29+196)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1e638;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1e638:
                    /* Next insn is delay slot */ 
                    pc=0x1e5a8;
                    run_1e400(); return;
                case 0x1e640:
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r30 + -21628;
                    r31=0x1e654;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e654:
                    /* Next insn is delay slot */ 
                    r19 = r18 + r0;
                    pc=0x1e1c0;
                    run_1e000(); return;
                case 0x1e65c:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21480;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e674:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21428;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e68c:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21364;
                    r31=0x1e6a4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e6a4:
                    /* Next insn is delay slot */ 
                    pc=0x1e0f8;
                    run_1e000(); return;
                case 0x1e6ac:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21304;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e6c4:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -16680;
                    r31=0x1e6d4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e6d4:
                    /* Next insn is delay slot */ 
                    writePages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff] = r2;
                    pc=0x1e0ec;
                    run_1e000(); return;
                case 0x1e6dc:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14304;
                    pc=0x1e0c4;
                    run_1e000(); return;
                case 0x1e6ec:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14304;
                    pc=0x1e03c;
                    run_1e000(); return;
                case 0x1e6fc:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14304;
                    pc=0x1dfb4;
                    run_1de00(); return;
                case 0x1e70c:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14304;
                    pc=0x1df2c;
                    run_1de00(); return;
                case 0x1e71c:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21252;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e734:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -14568;
                case 0x1e740:
                    /* Next insn is delay slot */ 
                    r31=0x1e748;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e748:
                    /* Next insn is delay slot */ 
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r2;
                    pc=0x1deb0;
                    run_1de00(); return;
                case 0x1e750:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1deb0;
                        run_1de00(); return;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14904;
                    pc=0x1e740;
                    continue;
                case 0x1e768:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -14736;
                    pc=0x1e740;
                    continue;
                case 0x1e778:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21204;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1e790:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r5 + -15072;
                case 0x1e79c:
                    /* Next insn is delay slot */ 
                    r31=0x1e7a4;
                    pc=0x28000;
                    run_28000(); return;
                case 0x1e7a4:
                    /* Next insn is delay slot */ 
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r2;
                    pc=0x1de78;
                    run_1de00(); return;
                case 0x1e7ac:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de78;
                        run_1de00(); return;
                    }
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -15612;
                    pc=0x1e79c;
                    continue;
                case 0x1e7c4:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -15336;
                    pc=0x1e79c;
                    continue;
                case 0x1e7d4:
                    r5 = 4 << 16;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -15876;
                    pc=0x1de34;
                    run_1de00(); return;
                case 0x1e7e4:
                    /* Next insn is delay slot */ 
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r0;
                    pc=0x1dd6c;
                    run_1dc00(); return;
                case 0x1e7ec:
                    /* Next insn is delay slot */ 
                    r4 = r22 + 19;
                    r31=0x1e7f4;
                    pc=0x16e00;
                    run_16e00(); return;
                case 0x1e7f4:
                    r17 = r2 & 65535;
                    r2 = r17 << 16;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        r23 = r0 + 21;
                        pc=0x1dd6c;
                        run_1dc00(); return;
                    }
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                    r23 = r0 + 21;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21156;
                    r31=0x1e81c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e81c:
                    /* Next insn is delay slot */ 
                    pc=0x1dd6c;
                    run_1dc00(); return;
                case 0x1e824:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -21096;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x1e840;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1e840:
                    /* Next insn is delay slot */ 
                    pc=0x1dd0c;
                    run_1dc00(); return;
                case 0x1e848:
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -21064;
                    pc=0x1ddd0;
                    run_1dc00(); return;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r21 = r5 + r0;
                    r19 = r6 + r0;
                    r11 = r7 + r0;
                    r9 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r10 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r6 + 16;
                        pc=0x1ebf4;
                        continue;
                    }
                    r8 = r6 + 16;
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb08;
                        continue;
                    }
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eaf4;
                        continue;
                    }
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ead8;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eac4;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eab0;
                        continue;
                    }
                case 0x1ea88:
                    r2 = r0 + -1;
                case 0x1ea8c:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x1eab0:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1eabc;
                    pc=0x21600;
                    run_21600(); return;
                case 0x1eabc:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1eac4:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1ead0;
                    pc=0x21200;
                    run_21200(); return;
                case 0x1ead0:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1ead8:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ea88;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1eaec;
                    pc=0x20a00;
                    run_20a00(); return;
                case 0x1eaec:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1eaf4:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1eb00;
                    pc=0x20e00;
                    run_20e00(); return;
                case 0x1eb00:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1eb08:
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ebd0;
                        continue;
                    }
                    addr=r6+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb4c;
                        continue;
                    }
                case 0x1eb28:
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r19 + r0;
                    r7 = r11 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1eb44;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1eb44:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1eb4c:
                    addr=r8+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r12 = tmp;
                    r2 = r0 + -1;
                    if(r12 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + -3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r12) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 2;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r12 = tmp;
                    r2 = r0 + -2;
                    if(r12 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r12) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    addr=r8+7;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x1eb28;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1ebc8;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1ebc8:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    continue;
                case 0x1ebd0:
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed0c;
                        run_1ec00(); return;
                    }
                    r12 = r0 + 2;
                    if(r3 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecb4;
                        run_1ec00(); return;
                    }
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec60;
                        run_1ec00(); return;
                    }
                case 0x1ebf4:
                    r17 = r0 + r0;
                    r18 = 4 << 16;
                    r16 = r19 + 16;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + r0;
                    r7 = r18 + -21044;
                    r17 = r17 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x1ec24;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ec24:
                    r2 = r17 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 1;
                        pc=0x1ec00;
                        continue;
                    }
                    r16 = r16 + 1;
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    r7 = r7 + -21028;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x1ec58;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ec58:
                    /* Next insn is delay slot */ 
                    pc=0x1ea88;
                    run_1ea00(); return;
                case 0x1ec60:
                    addr=r6+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec98;
                        continue;
                    }
                case 0x1ec70:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r19 + r0;
                    r7 = r11 + r0;
                case 0x1ec88:
                    /* Next insn is delay slot */ 
                    r31=0x1ec90;
                    pc=0x20600;
                    run_20600(); return;
                case 0x1ec90:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    run_1ea00(); return;
                case 0x1ec98:
                    addr=r8+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ec70;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    pc=0x1ec88;
                    continue;
                case 0x1ecb4:
                    addr=r6+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ece8;
                        continue;
                    }
                case 0x1ecc4:
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r19 + r0;
                    r7 = r11 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1ece0;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x1ece0:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    run_1ea00(); return;
                case 0x1ece8:
                    addr=r8+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecc4;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1ed04;
                    pc=0x20200;
                    run_20200(); return;
                case 0x1ed04:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    run_1ea00(); return;
                case 0x1ed0c:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r10;
                    r31=0x1ed18;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1ed18:
                    /* Next insn is delay slot */ 
                    pc=0x1ea8c;
                    run_1ea00(); return;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r29 = r29 + -136;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r23;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r21;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r20;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r19;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r30;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r22;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r18;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r17;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    r2 = (r2&0xffffffffL) < (18&0xffffffffL) ? 1 : 0;
                    r20 = r5 + r0;
                    r23 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x1eef4;
                        continue;
                    }
                    r21 = r0 + r0;
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 40;
                    r31=0x1ee54;
                    pc=0x19200;
                    run_19200(); return;
                case 0x1ee54:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    addr=r29+60;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20976;
                    r31=0x1ee94;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ee94:
                    addr=r23+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r7 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -20924;
                    /* Next insn is delay slot */ 
                    r17 = r16 & 1;
                    r31=0x1eeb8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1eeb8:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r16 & 6;
                        pc=0x1eec8;
                        continue;
                    }
                    r18 = r16 & 6;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f140;
                        run_1f000(); return;
                    }
                case 0x1eec8:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f134;
                        run_1f000(); return;
                    }
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + 2;
                        pc=0x1eedc;
                        continue;
                    }
                    r21 = r0 + 2;
                    r21 = r0 + 8;
                case 0x1eedc:
                    r2 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r22 = r21 + 18;
                    r2 = ((r2 & 0xffffffffL) < (r22 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef3c;
                        continue;
                    }
                    r4 = r19 + r0;
                case 0x1eef4:
                    r7 = 4 << 16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r0 + 3;
                    r7 = r7 + -20900;
                case 0x1ef04:
                    /* Next insn is delay slot */ 
                    r31=0x1ef0c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ef0c:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r30 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r23 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r22 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r21 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r20 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r19 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r17 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r16 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 136;
                    pc=r31;
                    return;
                case 0x1ef3c:
                    r30 = r29 + 64;
                    r5 = r23 + 18;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x1ef50;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1ef50:
                    addr=r29+64;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r29+65;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20880;
                    r31=0x1ef78;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1ef78:
                    r2 = r16 & 8;
                    r3 = r18 >> 1;
                    r2 = r2 >> 3;
                    r6 = r21 + r0;
                    r4 = r29 + 88;
                    r5 = r30 + r0;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r3;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    r31=0x1efa4;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x1efa4:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x1efb4;
                    pc=0x25400;
                    run_25400(); return;
                case 0x1efb4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r21 = r2 + r0;
                        pc=0x1f11c;
                        run_1f000(); return;
                    }
                    r21 = r2 + r0;
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20864;
                    r31=0x1efe4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1efe4:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f0f0;
                        run_1f000(); return;
                    }
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r16 = 1 << 16;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f014;
                        run_1f000(); return;
                    }
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + 16384;
                        pc=0x1f014;
                        continue;
                    }
                    r16 = r0 + 16384;
                    r16 = r0 + 1024;
                case 0x1f014:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1f020;
                    pc=0x16600;
                    run_16600(); return;
                case 0x1f020:
                    r4 = r2 + r0;
                    r6 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    r31=0x1f034;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x1f034:
                    r6 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r5 = r23 + r22;
                    r6 = r6 - r22;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x1f048;
                    pc=0x17600;
                    run_17600(); return;
                case 0x1f048:
                    r5 = r2 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r2 + r0;
                    r31=0x1f058;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1f058:
                    r7 = r2 + r0;
                    r5 = r20 + r0;
                    r6 = r29 + 72;
                    r4 = r19 + r0;
                    r16 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r31=0x1f078;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1f078:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r20 = r2 + r0;
                    r31=0x1f088;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1f088:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x1f094;
                    pc=0x17800;
                    run_17800(); return;
                case 0x1f094:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x1f0a0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x1f0a0:
                    r3 = readPages[(r19+64)>>>12][((r19+64)>>>2)&0x3ff];
                    r5 = readPages[(r19+72)>>>12][((r19+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r7 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r5 = r5 + r2;
                    r4 = r19 + r0;
                    r6 = r21 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    r31=0x1f0dc;
                    pc=0x1a000;
                    run_1a000(); return;
                case 0x1f0dc:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x1f0e8;
                    pc=0x25800;
                    run_25800(); return;
                case 0x1f0e8:
                    /* Next insn is delay slot */ 
                    r2 = r20 + r0;
                    pc=0x1ef0c;
                    run_1ee00(); return;
                case 0x1f0f0:
                    r2 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 - r22;
                    r7 = r23 + r22;
                    r4 = r19 + r0;
                    r6 = r29 + 72;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r21;
                    r31=0x1f114;
                    pc=0x22c00;
                    run_22c00(); return;
                case 0x1f114:
                    /* Next insn is delay slot */ 
                    r20 = r2 + r0;
                    pc=0x1f0a0;
                    continue;
                case 0x1f11c:
                    r7 = 4 << 16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20804;
                    pc=0x1ef04;
                    run_1ee00(); return;
                case 0x1f134:
                    r22 = r0 + 18;
                    /* Next insn is delay slot */ 
                    r30 = r29 + 64;
                    pc=0x1ef78;
                    run_1ee00(); return;
                case 0x1f140:
                    r7 = 4 << 16;
                    r6 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20768;
                    r31=0x1f158;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x1f158:
                    /* Next insn is delay slot */ 
                    pc=0x1eec8;
                    run_1ee00(); return;
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r29 = r29 + -96;
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r30 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + r0;
                        pc=0x1f3f4;
                        continue;
                    }
                    r8 = r0 + r0;
                    r3 = r6 + 7;
                    r2 = r0 + -8;
                    r3 = r3 & r2;
                    r4 = r30 - r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                case 0x1f268:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x1f27c;
                        continue;
                    }
                    r21 = r0 + r0;
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                case 0x1f27c:
                    r3 = r8 < 2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x1f2a0;
                        continue;
                    }
                    r20 = r0 + r0;
                    r2 = r7 << 1;
                    r2 = r30 - r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r20 = r3 << 6;
                case 0x1f2a0:
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r21 & 2032;
                    r2 = r20 & 63488;
                    r18 = r3 | r2;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1f3d4;
                        continue;
                    }
                    r3 = r0 + r0;
                    r2 = r7 << 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                case 0x1f2c0:
                    r4 = r6 - r3;
                    r2 = r4 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r0 + r0;
                        pc=0x1f2d4;
                        continue;
                    }
                    r19 = r0 + r0;
                    r4 = r0 + 8;
                case 0x1f2d4:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f428;
                        run_1f400(); return;
                    }
                    r22 = r3 + 8;
                    r2 = r22 < r6 ? 1 : 0;
                    r21 = r21 << 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r3 >> 3;
                        pc=0x1f304;
                        continue;
                    }
                    r23 = r3 >> 3;
                    r2 = r23 - r7;
                    r2 = r30 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r21 = r21 | r3;
                case 0x1f304:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f340;
                        continue;
                    }
                    r2 = r22 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r20 << 8;
                        pc=0x1f340;
                        continue;
                    }
                    r20 = r20 << 8;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r23 - r3;
                    r2 = r30 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 << 6;
                    r20 = r20 | r3;
                case 0x1f340:
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f3b8;
                        continue;
                    }
                    r17 = r0 + 7;
                    r16 = r4 + r0;
                case 0x1f350:
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r5 = r4 + r18;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    r31=0x1f36c;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x1f36c:
                    r4 = r18 & 31735;
                    r3 = r2 << (r17&0x1f);
                    r4 = r4 << 1;
                    r3 = r19 | r3;
                    r4 = r4 | r2;
                    r2 = r21 >>> (r17&0x1f);
                    r19 = r3 & 255;
                    r2 = r2 & 16;
                    r3 = r20 >>> (r17&0x1f);
                    r4 = r4 | r2;
                    r3 = r3 & 2048;
                    r16 = r16 + -1;
                    r18 = r4 | r3;
                    r17 = r17 + -1;
                    r6 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f350;
                        continue;
                    }
                case 0x1f3b8:
                    r2 = r30 + r23;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r19&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r22 + r0;
                    r2 = r22 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f2c0;
                        continue;
                    }
                case 0x1f3d4:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + r7;
                    r8 = r8 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r8 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + r7;
                        pc=0x1f268;
                        continue;
                    }
                    r30 = r30 + r7;
                case 0x1f3f4:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x1f428:
                    r22 = r3 + 8;
                    /* Next insn is delay slot */ 
                    r23 = r3 >> 3;
                    pc=0x1f304;
                    run_1f200(); return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r29 = r29 + -96;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r21 = r6 + r0;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r19 = r0 + r0;
                        pc=0x1f8f0;
                        run_1f800(); return;
                    }
                    r19 = r0 + r0;
                    r2 = r0 < r2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = r0 + -2;
                    r2 = r0 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                case 0x1f668:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r20 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f8c4;
                        run_1f800(); return;
                    }
                    r2 = r0 + 2;
                    r3 = r0 + -4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + -3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r0 + -2;
                    r2 = r0 + -1;
                    r22 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r30 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x1f6ac:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x1f6bc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f6bc:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x1f6d0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f6d0:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f6e8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f6e8:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f700;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f700:
                    addr=r21+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r21+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r20 + r5;
                    r2 = r2 << 3;
                    r6 = r19 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f720;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f720:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 4;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f738;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f738:
                    r2 = r2 << 5;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f750;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f750:
                    r2 = r2 << 6;
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f768;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f768:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r2 << 7;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f780;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f780:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f798;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f798:
                    addr=r21+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r21+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r20 + r5;
                    r2 = r2 << 9;
                    r6 = r19 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f7b8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f7b8:
                    addr=r21+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r21+21;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r20 + r5;
                    r2 = r2 << 10;
                    r6 = r19 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f7d8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f7d8:
                    r2 = r2 << 11;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f7f0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f7f0:
                    r2 = r2 << 12;
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f808;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f808:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r2 << 13;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f820;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f820:
                    addr=r21+22;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r21+23;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r20 + r5;
                    r6 = r19 + r6;
                    r2 = r2 << 14;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x1f840;
                    pc=0x25000;
                    run_25000(); return;
                case 0x1f840:
                    r2 = r2 << 15;
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = r16 | r2;
                    r16 = r3 + r16;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1f85c;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x1f85c:
                    r7 = r2 + r0;
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x1f870;
                    pc=0x25200;
                    run_25200(); return;
                case 0x1f870:
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r30 + r0;
                    r2 = r2 + 1;
                    r17 = r17 < r3 ? 1 : 0;
                    r20 = r30 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + 1;
                        pc=0x1f6ac;
                        run_1f600(); return;
                    }
                    r30 = r30 + 1;
                case 0x1f8c4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r19 = r19 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r2 = r19 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f668;
                        run_1f600(); return;
                    }
                case 0x1f8f0:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r29 = r29 + -96;
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r9 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + r0;
                        pc=0x1fc20;
                        run_1fc00(); return;
                    }
                    r8 = r0 + r0;
                    r2 = r0 + -8;
                    r3 = r7 + 7;
                    r3 = r3 & r2;
                    r4 = r9 << 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = r6 - r4;
                    r3 = r6 - r9;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                case 0x1fa78:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x1fa8c;
                        continue;
                    }
                    r21 = r0 + r0;
                    r4 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                case 0x1fa8c:
                    r2 = r8 < 2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + r0;
                        pc=0x1fab0;
                        continue;
                    }
                    r22 = r0 + r0;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r2 << 5;
                case 0x1fab0:
                    r3 = r21 >>> 1;
                    r2 = r22 >>> 1;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 504;
                    r2 = r2 & 7680;
                    r19 = r3 | r2;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1fbf4;
                        continue;
                    }
                    r3 = r0 + r0;
                case 0x1fad0:
                    r4 = r7 - r3;
                    r2 = r4 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x1fae4;
                        continue;
                    }
                    r20 = r0 + r0;
                    r4 = r0 + 8;
                case 0x1fae4:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fc54;
                        run_1fc00(); return;
                    }
                    r23 = r3 + 8;
                    r2 = r23 < r7 ? 1 : 0;
                    r21 = r21 << 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r30 = r3 >> 3;
                        pc=0x1fb14;
                        continue;
                    }
                    r30 = r3 >> 3;
                    r2 = r30 - r9;
                    r2 = r6 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r21 = r21 | r3;
                case 0x1fb14:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb50;
                        continue;
                    }
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 << 8;
                        pc=0x1fb50;
                        continue;
                    }
                    r22 = r22 << 8;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r30 - r3;
                    r2 = r6 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 << 5;
                    r22 = r22 | r3;
                case 0x1fb50:
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fbd8;
                        continue;
                    }
                    r17 = r0 + 8;
                    r18 = r0 + 7;
                    r16 = r4 + r0;
                case 0x1fb64:
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r5 = r4 + r19;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                    r31=0x1fb84;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x1fb84:
                    r4 = r19 & 3835;
                    r3 = r2 << (r18&0x1f);
                    r4 = r4 << 1;
                    r3 = r20 | r3;
                    r4 = r4 | r2;
                    r2 = r21 >>> (r17&0x1f);
                    r20 = r3 & 255;
                    r2 = r2 & 8;
                    r3 = r22 >>> (r17&0x1f);
                    r4 = r4 | r2;
                    r3 = r3 & 512;
                    r16 = r16 + -1;
                    r19 = r4 | r3;
                    r18 = r18 + -1;
                    r17 = r17 + -1;
                    r6 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fb64;
                        continue;
                    }
                case 0x1fbd8:
                    r2 = r6 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r20&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r23 + r0;
                    r2 = r23 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fad0;
                        continue;
                    }
                case 0x1fbf4:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r2 = r2 + r9;
                    r8 = r8 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r3 + r9;
                    r2 = r8 < r4 ? 1 : 0;
                    r6 = r6 + r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                        pc=0x1fa78;
                        run_1fa00(); return;
                    }
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                case 0x1fc20:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x1fc54:
                    r23 = r3 + 8;
                    /* Next insn is delay slot */ 
                    r30 = r3 >> 3;
                    pc=0x1fb14;
                    run_1fa00(); return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    r29 = r29 + -96;
                    r2 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r9 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + r0;
                        pc=0x20020;
                        run_20000(); return;
                    }
                    r8 = r0 + r0;
                    r2 = r0 + -8;
                    r3 = r7 + 7;
                    r3 = r3 & r2;
                    r4 = r9 << 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = r6 - r4;
                    r3 = r6 - r9;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                case 0x1fe78:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x1fe8c;
                        continue;
                    }
                    r21 = r0 + r0;
                    r4 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                case 0x1fe8c:
                    r2 = r8 < 2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + r0;
                        pc=0x1feb0;
                        continue;
                    }
                    r22 = r0 + r0;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r2 << 4;
                case 0x1feb0:
                    r3 = r21 >>> 3;
                    r2 = r22 >>> 3;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 & 124;
                    r2 = r2 & 896;
                    r19 = r3 | r2;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1fff4;
                        continue;
                    }
                    r3 = r0 + r0;
                case 0x1fed0:
                    r4 = r7 - r3;
                    r2 = r4 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x1fee4;
                        continue;
                    }
                    r20 = r0 + r0;
                    r4 = r0 + 8;
                case 0x1fee4:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20054;
                        run_20000(); return;
                    }
                    r23 = r3 + 8;
                    r2 = r23 < r7 ? 1 : 0;
                    r21 = r21 << 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r30 = r3 >> 3;
                        pc=0x1ff14;
                        continue;
                    }
                    r30 = r3 >> 3;
                    r2 = r30 - r9;
                    r2 = r6 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r21 = r21 | r3;
                case 0x1ff14:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff50;
                        continue;
                    }
                    r2 = r23 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 << 8;
                        pc=0x1ff50;
                        continue;
                    }
                    r22 = r22 << 8;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r30 - r3;
                    r2 = r6 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 << 4;
                    r22 = r22 | r3;
                case 0x1ff50:
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ffd8;
                        continue;
                    }
                    r17 = r0 + 10;
                    r18 = r0 + 7;
                    r16 = r4 + r0;
                case 0x1ff64:
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r5 = r4 + r19;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                    r31=0x1ff84;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x1ff84:
                    r4 = r19 & 445;
                    r3 = r2 << (r18&0x1f);
                    r4 = r4 << 1;
                    r3 = r20 | r3;
                    r4 = r4 | r2;
                    r2 = r21 >>> (r17&0x1f);
                    r20 = r3 & 255;
                    r2 = r2 & 4;
                    r3 = r22 >>> (r17&0x1f);
                    r4 = r4 | r2;
                    r3 = r3 & 128;
                    r16 = r16 + -1;
                    r19 = r4 | r3;
                    r18 = r18 + -1;
                    r17 = r17 + -1;
                    r6 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff64;
                        continue;
                    }
                case 0x1ffd8:
                    r2 = r6 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r20&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r23 + r0;
                    r2 = r23 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fed0;
                        continue;
                    }
                case 0x1fff4:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r2 = r2 + r9;
                case 0x20004:
                    r8 = r8 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r3 + r9;
                    r2 = r8 < r4 ? 1 : 0;
                    r6 = r6 + r9;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                        pc=0x1fe78;
                        run_1fe00(); return;
                    }
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                case 0x20020:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x20054:
                    r23 = r3 + 8;
                    /* Next insn is delay slot */ 
                    r30 = r3 >> 3;
                    pc=0x1ff14;
                    run_1fe00(); return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r29 = r29 + -104;
                    r2 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r31;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r30;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r23;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r22;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r21;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r20;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r19;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r18;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r7;
                    r8 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r10 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r7 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + r0;
                        pc=0x2044c;
                        run_20400(); return;
                    }
                    r9 = r0 + r0;
                    r2 = r0 + -8;
                    r3 = r8 + 7;
                    r3 = r3 & r2;
                    r4 = r10 << 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = r7 - r4;
                    r3 = r7 - r10;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                case 0x20278:
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x2028c;
                        continue;
                    }
                    r21 = r0 + r0;
                    r4 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r21 = tmp;
                case 0x2028c:
                    r2 = r9 < 2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r23 = r0 + r0;
                        pc=0x202b0;
                        continue;
                    }
                    r23 = r0 + r0;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r2 << 4;
                case 0x202b0:
                    r2 = r21 >>> 3;
                    r3 = r21 >>> 2;
                    r3 = r3 & 4;
                    r2 = r2 & 120;
                    r4 = r23 >>> 3;
                    r2 = r2 | r3;
                    r4 = r4 & 896;
                    r19 = r2 | r4;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + r0;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20420;
                        run_20400(); return;
                    }
                case 0x202e0:
                    r4 = r8 - r3;
                    r2 = r4 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + r0;
                        pc=0x202f4;
                        continue;
                    }
                    r22 = r0 + r0;
                    r4 = r0 + 8;
                case 0x202f4:
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20480;
                        run_20400(); return;
                    }
                    r30 = r3 + 8;
                    r2 = r30 < r8 ? 1 : 0;
                    r21 = r21 << 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 >> 3;
                        pc=0x20324;
                        continue;
                    }
                    r6 = r3 >> 3;
                    r2 = r6 - r10;
                    r2 = r7 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r21 = r21 | r3;
                case 0x20324:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20360;
                        continue;
                    }
                    r2 = r30 < r8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r23 << 8;
                        pc=0x20360;
                        continue;
                    }
                    r23 = r23 << 8;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r6 - r3;
                    r2 = r7 + r2;
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 << 4;
                    r23 = r23 | r3;
                case 0x20360:
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20404;
                        run_20400(); return;
                    }
                    r20 = r0 + 9;
                    r17 = r0 + 10;
                    r18 = r0 + 7;
                    r16 = r4 + r0;
                case 0x20378:
                    r4 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r6;
                    r5 = r4 + r19;
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r7;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r8;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r10;
                    r31=0x2039c;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x2039c:
                    r4 = r19 & 441;
                    r3 = r2 << (r18&0x1f);
                    r4 = r4 << 1;
                    r3 = r22 | r3;
                    r4 = r4 | r2;
                    r2 = r21 >>> (r17&0x1f);
                    r2 = r2 & 8;
                    r22 = r3 & 255;
                    r3 = r21 >>> (r20&0x1f);
                    r4 = r4 | r2;
                    r3 = r3 & 4;
                    r2 = r23 >>> (r17&0x1f);
                    r4 = r4 | r3;
                    r2 = r2 & 128;
                    r16 = r16 + -1;
                    r19 = r4 | r2;
                    r18 = r18 + -1;
                    r17 = r17 + -1;
                    r20 = r20 + -1;
                    r6 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r7 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r8 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r9 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r10 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20378;
                        continue;
                    }
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                case 0x20404:
                    r2 = r7 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r30 + r0;
                    r2 = r30 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202e0;
                        run_20200(); return;
                    }
                case 0x20420:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 + r10;
                    r9 = r9 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r3 + r10;
                    r2 = r9 < r4 ? 1 : 0;
                    r7 = r7 + r10;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                        pc=0x20278;
                        run_20200(); return;
                    }
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                case 0x2044c:
                    r31 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r30 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r23 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r22 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r21 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r20 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r19 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r18 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r17 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r16 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 104;
                    pc=r31;
                    return;
                case 0x20480:
                    r30 = r3 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r3 >> 3;
                    pc=0x20324;
                    run_20200(); return;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r29 = r29 + -80;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r6;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x20808;
                        run_20800(); return;
                    }
                    r20 = r0 + r0;
                    r2 = r0 < r2 ? 1 : 0;
                    r3 = r0 + -1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                case 0x20660:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r30 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x207e8;
                        continue;
                    }
                    r3 = r0 + -4;
                    r2 = r0 + -3;
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r21 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r23 = r0 + -2;
                    r22 = r0 + -1;
                case 0x20690:
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x206a0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x206a0:
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x206b4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x206b4:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x206cc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x206cc:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x206e4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x206e4:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    addr=r3+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r3+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r30 + r5;
                    r6 = r20 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20708;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20708:
                    r2 = r2 << 4;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20720;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20720:
                    r2 = r2 << 5;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20738;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20738:
                    r2 = r2 << 6;
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20750;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20750:
                    r2 = r2 << 7;
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20768;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20768:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r6 = r19 + r0;
                    r2 = r2 << 8;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20780;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20780:
                    r2 = r2 << 9;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r4 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r16 = r2 + r16;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x2079c;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x2079c:
                    r7 = r2 + r0;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x207b0;
                    pc=0x25200;
                    run_25200(); return;
                case 0x207b0:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r21 + r0;
                    r2 = r2 + 1;
                    r17 = r17 < r3 ? 1 : 0;
                    r30 = r21 + r0;
                    r22 = r22 + 1;
                    r23 = r23 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x20690;
                        continue;
                    }
                    r21 = r21 + 1;
                case 0x207e8:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r20 = r20 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r20 < r3 ? 1 : 0;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20660;
                        run_20600(); return;
                    }
                case 0x20808:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r29 = r29 + -96;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r22 = r6 + r0;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x20d14;
                        run_20c00(); return;
                    }
                    r20 = r0 + r0;
                    r2 = r0 + -2;
                    r3 = r0 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x20a64:
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = r0 | 39717;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r5;
                    r31=0x20a78;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x20a78:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 ^ r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                        pc=0x20d48;
                        run_20c00(); return;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r19 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ce8;
                        run_20c00(); return;
                    }
                    r3 = r0 + 2;
                    r2 = r0 + -4;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r3 = r0 + -3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r2 = r0 + -2;
                    r3 = r0 + -1;
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r23 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r30 = r0 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                case 0x20ad0:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x20ae0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20ae0:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x20af4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20af4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b0c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b0c:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b24;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b24:
                    addr=r22+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r22+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r19 + r5;
                    r2 = r2 << 3;
                    r6 = r20 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b44;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b44:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 4;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b5c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b5c:
                    r2 = r2 << 5;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b74;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b74:
                    r2 = r2 << 6;
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20b8c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20b8c:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r2 << 7;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20ba4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20ba4:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20bbc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20bbc:
                    addr=r22+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r22+19;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r19 + r5;
                    r2 = r2 << 9;
                    r6 = r20 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20bdc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20bdc:
                    addr=r22+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r22+21;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r19 + r5;
                    r2 = r2 << 10;
                    r6 = r20 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20bfc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20bfc:
                    r2 = r2 << 11;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20c14;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20c14:
                    r2 = r2 << 12;
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20c2c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20c2c:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r2 << 13;
                    r4 = r18 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20c44;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20c44:
                    addr=r22+22;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r22+23;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r19 + r5;
                    r6 = r20 + r6;
                    r2 = r2 << 14;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20c64;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20c64:
                    r2 = r2 << 15;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r16 = r2 + r16;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x20c80;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x20c80:
                    r7 = r2 + r0;
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x20c94;
                    pc=0x25200;
                    run_25200(); return;
                case 0x20c94:
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r30 + r0;
                    r3 = r3 + 1;
                    r17 = r17 < r2 ? 1 : 0;
                    r19 = r30 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + 1;
                        pc=0x20ad0;
                        run_20a00(); return;
                    }
                    r30 = r30 + 1;
                case 0x20ce8:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r20 = r20 + 1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r2 = r20 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20a64;
                        run_20a00(); return;
                    }
                case 0x20d14:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x20d48:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20d68;
                        continue;
                    }
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x20d60;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x20d60:
                    /* Next insn is delay slot */ 
                    pc=0x20ce8;
                    continue;
                case 0x20d68:
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r5 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r4 = r5 + r6;
                    r31=0x20d88;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x20d88:
                    /* Next insn is delay slot */ 
                    pc=0x20ce8;
                    continue;
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r29 = r29 + -96;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r6;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + r0;
                        pc=0x210a0;
                        run_21000(); return;
                    }
                    r21 = r0 + r0;
                    r2 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r2 = r2 + 1941;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x20e70:
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x20e80;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x20e80:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 ^ r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                        pc=0x210d4;
                        run_21000(); return;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r30 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21074;
                        run_21000(); return;
                    }
                    r3 = r0 + 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r2 = r0 + -3;
                    r3 = r0 + -2;
                    r19 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r23 = r0 + -1;
                case 0x20ecc:
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x20edc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20edc:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x20ef0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20ef0:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r18 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20f08;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f08:
                    r2 = r2 << 2;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r2+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r30 + r5;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r6;
                    r31=0x20f2c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f2c:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20f44;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f44:
                    r2 = r2 << 4;
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20f5c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f5c:
                    r2 = r2 << 5;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20f74;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f74:
                    r2 = r2 << 6;
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20f8c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20f8c:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 << 7;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20fa4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20fa4:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 8;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20fbc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20fbc:
                    r2 = r2 << 9;
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20fd4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20fd4:
                    r2 = r2 << 10;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x20fec;
                    pc=0x25000;
                    run_25000(); return;
                case 0x20fec:
                    r2 = r2 << 11;
                    r5 = r23 + r0;
                    r6 = r20 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21004;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r16 = r16 | r2;
                case 0x21004:
                    r2 = r2 << 12;
                    r3 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = r16 | r2;
                    r16 = r3 + r16;
                    r4 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x21020;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x21020:
                    r7 = r2 + r0;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x21034;
                    pc=0x25200;
                    run_25200(); return;
                case 0x21034:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r22 + r0;
                    r2 = r2 + 1;
                    r17 = r17 < r3 ? 1 : 0;
                    r30 = r22 + r0;
                    r23 = r23 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 + 1;
                        pc=0x20ecc;
                        run_20e00(); return;
                    }
                    r22 = r22 + 1;
                case 0x21074:
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r21 = r21 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r2 = r21 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e70;
                        run_20e00(); return;
                    }
                case 0x210a0:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x210d4:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x210f4;
                        continue;
                    }
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x210ec;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x210ec:
                    /* Next insn is delay slot */ 
                    pc=0x21074;
                    continue;
                case 0x210f4:
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r5 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r4 = r5 + r6;
                    r31=0x21114;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x21114:
                    /* Next insn is delay slot */ 
                    pc=0x21074;
                    continue;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r29 = r29 + -88;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + r0;
                        pc=0x21430;
                        run_21400(); return;
                    }
                    r22 = r0 + r0;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r2 = r2 + 229;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + -1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                case 0x21270:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21280;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x21280:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 ^ r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                        pc=0x21464;
                        run_21400(); return;
                    }
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r30 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21404;
                        run_21400(); return;
                    }
                    r3 = r0 + -2;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r21 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r23 = r0 + -1;
                case 0x212bc:
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r22 + r0;
                    r31=0x212cc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x212cc:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x212e0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x212e0:
                    r2 = r2 << 1;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r2+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r30 + r5;
                    /* Next insn is delay slot */ 
                    r6 = r22 + r6;
                    r31=0x21304;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21304:
                    r2 = r2 << 2;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2131c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2131c:
                    r2 = r2 << 3;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21334;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21334:
                    r2 = r2 << 4;
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2134c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2134c:
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r2 << 5;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21364;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21364:
                    r2 = r2 << 6;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2137c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2137c:
                    r2 = r2 << 7;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21394;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21394:
                    r2 = r2 << 8;
                    r5 = r23 + r0;
                    r6 = r20 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x213ac;
                    pc=0x25000;
                    run_25000(); return;
                case 0x213ac:
                    r2 = r2 << 9;
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r16 = r16 | r2;
                    r16 = r3 + r16;
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x213c8;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x213c8:
                    r7 = r2 + r0;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r22 + r0;
                    r31=0x213dc;
                    pc=0x25200;
                    run_25200(); return;
                case 0x213dc:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r21 + r0;
                    r2 = r2 + 1;
                    r17 = r17 < r3 ? 1 : 0;
                    r30 = r21 + r0;
                    r23 = r23 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x212bc;
                        continue;
                    }
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r21 = r21 + 1;
                case 0x21404:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r22 = r22 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r22 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21270;
                        run_21200(); return;
                    }
                case 0x21430:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x21464:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21484;
                        continue;
                    }
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x2147c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x2147c:
                    /* Next insn is delay slot */ 
                    pc=0x21404;
                    continue;
                case 0x21484:
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r5 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r4 = r5 + r6;
                    r31=0x214a4;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x214a4:
                    /* Next insn is delay slot */ 
                    pc=0x21404;
                    continue;
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r29 = r29 + -88;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r6;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r7;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x2182c;
                        run_21800(); return;
                    }
                    r20 = r0 + r0;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    r2 = r2 + 405;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                case 0x21668:
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r5 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21678;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x21678:
                    r3 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r3 ^ r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                        pc=0x21860;
                        run_21800(); return;
                    }
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2180c;
                        run_21800(); return;
                    }
                    r3 = r0 + -4;
                    r19 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r30 = r0 + -3;
                    r23 = r0 + -2;
                    r22 = r0 + -1;
                case 0x216b8:
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x216c8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x216c8:
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x216dc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x216dc:
                    r2 = r2 << 1;
                    r5 = r30 + r0;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x216f4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x216f4:
                    r5 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2170c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2170c:
                    r2 = r2 << 3;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    addr=r2+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r2+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r3 + r5;
                    r6 = r20 + r6;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x21734;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21734:
                    r2 = r2 << 4;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2174c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2174c:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r2 << 5;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21764;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21764:
                    r2 = r2 << 6;
                    r5 = r22 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x2177c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2177c:
                    r2 = r2 << 7;
                    r5 = r23 + r0;
                    r4 = r18 + r0;
                    r6 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x21794;
                    pc=0x25000;
                    run_25000(); return;
                case 0x21794:
                    r2 = r2 << 8;
                    r5 = r30 + r0;
                    r6 = r19 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x217ac;
                    pc=0x25000;
                    run_25000(); return;
                case 0x217ac:
                    r2 = r2 << 9;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r4 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r16 = r2 + r16;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x217c8;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x217c8:
                    r5 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x217dc;
                    pc=0x25200;
                    run_25200(); return;
                case 0x217dc:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = r21 + r0;
                    r3 = r3 + 1;
                    r17 = r17 < r2 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r21;
                    r22 = r22 + 1;
                    r23 = r23 + 1;
                    r30 = r30 + 1;
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x216b8;
                        run_21600(); return;
                    }
                    r21 = r21 + 1;
                case 0x2180c:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r20 = r20 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r20 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21668;
                        run_21600(); return;
                    }
                case 0x2182c:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x21860:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21880;
                        continue;
                    }
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x21878;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x21878:
                    /* Next insn is delay slot */ 
                    pc=0x2180c;
                    continue;
                case 0x21880:
                    r6 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r5 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r4 = r5 + r6;
                    r31=0x218a0;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x218a0:
                    /* Next insn is delay slot */ 
                    pc=0x2180c;
                    continue;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    r29 = r29 + -64;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r18 = r5 + r0;
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x21aac;
                        continue;
                    }
                    r17 = r0 + r0;
                    r21 = r0 + 20;
                    r23 = r0 + 4;
                    r22 = r0 + 36;
                    r30 = r0 + 40;
                    r16 = r0 + r0;
                case 0x21a54:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r2 = r16 + r2;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x21a6c;
                    pc=0x19000;
                    run_19000(); return;
                case 0x21a6c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + r0;
                        pc=0x21b14;
                        continue;
                    }
                    r4 = r2 + r0;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 63;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x21ae4;
                        continue;
                    }
                    r2 = r3 < 21 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21afc;
                        continue;
                    }
                    if(r3 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x21ae4;
                        continue;
                    }
                case 0x21a9c:
                    r17 = r17 + 1;
                    r2 = r17 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x21a54;
                        continue;
                    }
                    r16 = r16 + 4;
                case 0x21aac:
                    r3 = r0 + r0;
                case 0x21ab0:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x21ae4:
                    r2 = readPages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff];
                    r3 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21a9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x21ab0;
                    continue;
                case 0x21afc:
                    if(r3 == r22) {
                        /* Next insn is delay slot */ 
                        pc=0x21ae4;
                        continue;
                    }
                    if(r3 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x21a9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x21ae4;
                    continue;
                case 0x21b14:
                    r2 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r16 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r4 = r20 + r0;
                    r5 = r0 + 2;
                    r7 = r2 + -20732;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r31=0x21b3c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21b3c:
                    /* Next insn is delay slot */ 
                    pc=0x21a9c;
                    continue;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r29 = r29 + -128;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r22;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r18;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r17;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r21;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r20;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r19;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    r2 = (r2&0xffffffffL) < (18&0xffffffffL) ? 1 : 0;
                    r18 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r6 + r0;
                        pc=0x21d20;
                        continue;
                    }
                    r22 = r6 + r0;
                    r5 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 72;
                    r31=0x21c48;
                    pc=0x19200;
                    run_19200(); return;
                case 0x21c48:
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    addr=r29+92;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -20692;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r31=0x21c88;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21c88:
                    addr=r22+17;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r16 = tmp;
                    r2 = r16 >>> 1;
                    r3 = r16 & 1;
                    r2 = r2 & 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                        pc=0x2210c;
                        run_22000(); return;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = 4 << 16;
                    r2 = r2 + -20640;
                case 0x21cb4:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22100;
                        run_22000(); return;
                    }
                    r2 = 4 << 16;
                    r2 = r2 + -10440;
                case 0x21cd0:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 1;
                    r7 = r7 + -20628;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x21cec;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21cec:
                    r3 = r16 & 252;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220e0;
                        run_22000(); return;
                    }
                case 0x21cf8:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = r0 + 18;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21dd0;
                        continue;
                    }
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (22&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21d60;
                        continue;
                    }
                    r4 = r17 + r0;
                case 0x21d20:
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r5 = r0 + 3;
                    r7 = r7 + -20600;
                case 0x21d30:
                    /* Next insn is delay slot */ 
                    r31=0x21d38;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21d38:
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r22 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r21 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r20 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r19 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r17 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r16 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 128;
                    pc=r31;
                    return;
                case 0x21d60:
                    addr=r22+18;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r22 + 18;
                    addr=r29+68;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 << 24;
                    addr=r29+69;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r3 << 24;
                    addr=r29+70;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r5+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r4 = r4 << 24;
                    addr=r29+71;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 << 24;
                    r6 = r6 >> 24;
                    r4 = r4 >> 24;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r2 >> 24;
                    r3 = r3 >> 24;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r5 = r0 + 1;
                    r4 = r17 + r0;
                    r7 = r7 + -20580;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r21 = r0 + 22;
                    r31=0x21dd0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21dd0:
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220ac;
                        run_22000(); return;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x21dec;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x21dec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x22094;
                        run_22000(); return;
                    }
                    r16 = r2 + r0;
                    r5 = readPages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x21e00;
                    pc=0x25600;
                    run_25600(); return;
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r31=0x21e10;
                    pc=0x25800;
                    run_25800(); return;
                case 0x21e10:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -20548;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x21e34;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21e34:
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    r31=0x21e4c;
                    pc=0x25400;
                    run_25400(); return;
                case 0x21e4c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r2 + r0;
                        pc=0x2207c;
                        run_22000(); return;
                    }
                    r20 = r2 + r0;
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -20508;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x21e7c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21e7c:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r16 = r0 + 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e90;
                        continue;
                    }
                    r16 = r0 + 8192;
                case 0x21e90:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x21e9c;
                    pc=0x16600;
                    run_16600(); return;
                case 0x21e9c:
                    r4 = r2 + r0;
                    r6 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r19 = r2 + r0;
                    r31=0x21eb0;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x21eb0:
                    r6 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r5 = r22 + r21;
                    r6 = r6 - r21;
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x21ec4;
                    pc=0x17600;
                    run_17600(); return;
                case 0x21ec4:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r2 + r0;
                    r31=0x21ed4;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x21ed4:
                    r16 = r2 + r0;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    addr=r29+69;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r29+68;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    addr=r29+71;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r29+70;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -20448;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r31=0x21f30;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21f30:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r22 = r29 + 48;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2205c;
                        run_22000(); return;
                    }
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22038;
                        run_22000(); return;
                    }
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r22 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    r31=0x21f6c;
                    pc=0x22800;
                    run_22800(); return;
                case 0x21f6c:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x21f78;
                    pc=0x16800;
                    run_16800(); return;
                case 0x21f78:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x21f84;
                    pc=0x17800;
                    run_17800(); return;
                case 0x21f84:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x21f90;
                    pc=0x16800;
                    run_16800(); return;
                case 0x21f90:
                    addr=r18+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r0 + 40;
                    r2 = r2 & 63;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22030;
                        run_22000(); return;
                    }
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    r7 = r7 + -20340;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x21fdc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x21fdc:
                    r3 = readPages[(r17+64)>>>12][((r17+64)>>>2)&0x3ff];
                    r5 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r5 = r5 + r2;
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r7 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r6 = r20 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x2201c;
                    pc=0x1a000;
                    run_1a000(); return;
                case 0x2201c:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r20 + r0;
                    r31=0x22028;
                    pc=0x25800;
                    run_25800(); return;
                case 0x22028:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x21d38;
                    run_21c00(); return;
                case 0x22030:
                    /* Next insn is delay slot */ 
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r20;
                    pc=0x22028;
                    continue;
                case 0x22038:
                    r4 = r17 + r0;
                    r5 = r18 + r0;
                    r6 = r22 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    r31=0x22054;
                    pc=0x22400;
                    run_22400(); return;
                case 0x22054:
                    /* Next insn is delay slot */ 
                    pc=0x21f6c;
                    run_21e00(); return;
                case 0x2205c:
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20276;
                    r31=0x22074;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x22074:
                    /* Next insn is delay slot */ 
                    pc=0x21f6c;
                    run_21e00(); return;
                case 0x2207c:
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20220;
                    pc=0x21d30;
                    run_21c00(); return;
                case 0x22094:
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20184;
                    pc=0x21d30;
                    run_21c00(); return;
                case 0x220ac:
                    r3 = readPages[(r17+64)>>>12][((r17+64)>>>2)&0x3ff];
                    r4 = readPages[(r17+72)>>>12][((r17+72)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r2 = r2 + r3;
                    r2 = r2 << 2;
                    r2 = r2 - r3;
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r5 = readPages[(r2+40)>>>12][((r2+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x220d8;
                    pc=0x25600;
                    run_25600(); return;
                case 0x220d8:
                    /* Next insn is delay slot */ 
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    pc=0x21e34;
                    run_21e00(); return;
                case 0x220e0:
                    r7 = 4 << 16;
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20148;
                    r31=0x220f8;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x220f8:
                    /* Next insn is delay slot */ 
                    pc=0x21cf8;
                    run_21c00(); return;
                case 0x22100:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -10432;
                    pc=0x21cd0;
                    run_21c00(); return;
                case 0x2210c:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -10432;
                    pc=0x21cb4;
                    run_21c00(); return;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r29 = r29 + -80;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    r16 = r6 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r21 = r7 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    addr=r6+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r5 = r0 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    addr=r6+21;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r7 = r7 + -20448;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    addr=r6+22;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r18 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r6+23;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    r19 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22290;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x22290:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22314;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x222f0;
                        continue;
                    }
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r7 = r21 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r20;
                    r31=0x222cc;
                    pc=0x22800;
                    run_22800(); return;
                case 0x222cc:
                    r31 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x222f0:
                    r4 = r18 + r0;
                    r5 = r17 + r0;
                    r6 = r16 + r0;
                    r7 = r21 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r20;
                    r31=0x2230c;
                    pc=0x22400;
                    run_22400(); return;
                case 0x2230c:
                    /* Next insn is delay slot */ 
                    pc=0x222cc;
                    continue;
                case 0x22314:
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r4 = r18 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -20276;
                    r31=0x2232c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2232c:
                    /* Next insn is delay slot */ 
                    pc=0x222cc;
                    continue;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -120;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    r23 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff];
                    r3 = readPages[(r23+4)>>>12][((r23+4)>>>2)&0x3ff];
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r6;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    r18 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                        pc=0x226e8;
                        run_22600(); return;
                    }
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    r3 = r0 < r3 ? 1 : 0;
                    r4 = r2 + -1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    r3 = r2 + 1;
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    r2 = r0 - r2;
                    r4 = r0 + -1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x22498:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22698;
                        run_22600(); return;
                    }
                    r4 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r21 = r3 + -1;
                    r20 = r3 + 1;
                    r2 = r0 + 1;
                    r3 = r0 + -1;
                    r22 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r0 - r4;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                case 0x224e4:
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x224f4;
                    pc=0x25000;
                    run_25000(); return;
                case 0x224f4:
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x2250c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2250c:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22524;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22524:
                    r4 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    addr=r4+20;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r4+21;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = r3 + r6;
                    r5 = r2 + r5;
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x22550;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22550:
                    r2 = r2 << 3;
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22568;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22568:
                    r2 = r2 << 4;
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22580;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22580:
                    r2 = r2 << 5;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22598;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22598:
                    r2 = r2 << 6;
                    r5 = r20 + r0;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x225b0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x225b0:
                    r2 = r2 << 7;
                    r5 = r19 + r0;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x225c8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x225c8:
                    r2 = r2 << 8;
                    r5 = r21 + r0;
                    r4 = r18 + r0;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x225e0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x225e0:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 << 9;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x225f8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x225f8:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r19 + r0;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    r2 = r2 << 10;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22610;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22610:
                    r4 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r2 = r2 << 11;
                    addr=r4+22;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    addr=r4+23;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r5 = r19 + r5;
                    r6 = r22 + r6;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22634;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22634:
                    r2 = r2 << 12;
                    r16 = r16 | r2;
                    r2 = readPages[(r29+140)>>>12][((r29+140)>>>2)&0x3ff];
                    r4 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = r2 + r16;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x22650;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x22650:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x22664;
                    pc=0x25200;
                    run_25200(); return;
                case 0x22664:
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r3 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r17 = r17 < r3 ? 1 : 0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r19 = r19 + 1;
                    r20 = r20 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + 1;
                        pc=0x224e4;
                        run_22400(); return;
                    }
                    r21 = r21 + 1;
                case 0x22698:
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r3 < r4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22498;
                        run_22400(); return;
                    }
                case 0x226e8:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    r29 = r29 + -112;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r30;
                    r30 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r31;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r23;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r22;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r21;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r20;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r19;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r18;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r17;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r4 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    r19 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                        pc=0x22a60;
                        run_22a00(); return;
                    }
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    r3 = r0 < r3 ? 1 : 0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r3 = r0 - r3;
                    r2 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r4;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                case 0x2288c:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22a1c;
                        run_22a00(); return;
                    }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r22 = r3 + -1;
                    r20 = r3 + 1;
                    r2 = r0 + 1;
                    r3 = r0 + -1;
                    r23 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = r0 - r4;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                case 0x228d0:
                    r5 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x228e0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x228e0:
                    r17 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r5 = r17 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x228f8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x228f8:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    r4 = r30 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22910;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22910:
                    r5 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r4 = r30 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22928;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22928:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r20 + r0;
                    r2 = r2 << 3;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22940;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22940:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    r2 = r2 << 4;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22958;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22958:
                    r2 = r2 << 5;
                    r5 = r20 + r0;
                    r4 = r19 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22970;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22970:
                    r2 = r2 << 6;
                    r5 = r18 + r0;
                    r4 = r19 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x22988;
                    pc=0x25000;
                    run_25000(); return;
                case 0x22988:
                    r2 = r2 << 7;
                    r5 = r22 + r0;
                    r4 = r19 + r0;
                    r6 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x229a0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x229a0:
                    r2 = r2 << 8;
                    r5 = r18 + r0;
                    r6 = r21 + -1;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r16 | r2;
                    r31=0x229b8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x229b8:
                    r2 = r2 << 9;
                    r4 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = r16 | r2;
                    r16 = r4 + r16;
                    r4 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x229d4;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x229d4:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r6 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x229e8;
                    pc=0x25200;
                    run_25200(); return;
                case 0x229e8:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r2 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r3 + 1;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r17 = r17 < r2 ? 1 : 0;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r4;
                    r18 = r18 + 1;
                    r20 = r20 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 + 1;
                        pc=0x228d0;
                        run_22800(); return;
                    }
                    r22 = r22 + 1;
                case 0x22a1c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2288c;
                        run_22800(); return;
                    }
                case 0x22a60:
                    r31 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r30 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r23 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r22 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r21 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r20 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r17 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 112;
                    pc=r31;
                    return;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    r29 = r29 + -80;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r31;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r8 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r6 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r17 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r21 = r0 + r0;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r8;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r6;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x22c90;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r0 + 24;
                case 0x22c64:
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 1;
                    r2 = r2 << (r4&0x1f);
                    r5 = r5 | r2;
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + -8;
                        pc=0x22c90;
                        continue;
                    }
                    r4 = r4 + -8;
                    r2 = r3 < 4 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c64;
                        continue;
                    }
                case 0x22c90:
                    r2 = r29 + 16;
                    writePages[(r2+24)>>>12][((r2+24)>>>2)&0x3ff] = r5;
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x22ce0;
                        continue;
                    }
                    r18 = r0 + r0;
                    r16 = r17 + r0;
                case 0x22ca4:
                    r4 = r17 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x22cb4;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x22cb4:
                    r5 = r21 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 16;
                    r31=0x22cc4;
                    pc=0x22e00;
                    run_22e00(); return;
                case 0x22cc4:
                    r2 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r2 = r18 < r2 ? 1 : 0;
                    r21 = r16 + r0;
                    r17 = r17 + r19;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + r19;
                        pc=0x22ca4;
                        continue;
                    }
                    r16 = r16 + r19;
                case 0x22ce0:
                    r31 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r21;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r19;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r18;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r16;
                    r13 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r8 = r4 + r0;
                    r25 = r5 + r0;
                    r17 = r6 + r0;
                    r15 = r0 + -1;
                    r16 = r0 + r0;
                    r19 = r0 + -1;
                    r20 = r28 + -32588;
                    r21 = r28 + -32580;
                    r18 = r0 + 7;
                case 0x22e44:
                    r2 = r15 < r13 ? 1 : 0;
                    r4 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    r5 = r4 >>> 29;
                    r3 = r0 + 1;
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23f60;
                        run_23e00(); return;
                    }
                    r2 = r4 >>> 28;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23cbc;
                        run_23c00(); return;
                    }
                    r2 = r4 >>> 31;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23ad4;
                        run_23a00(); return;
                    }
                    r2 = r0 + 3;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x238dc;
                        run_23800(); return;
                    }
                    r3 = r4 >>> 26;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x236e4;
                        run_23600(); return;
                    }
                    r6 = r4 >>> 25;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x234ec;
                        run_23400(); return;
                    }
                    r2 = r0 + 2;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x23304;
                        run_23200(); return;
                    }
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2311c;
                        run_23000(); return;
                    }
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 7;
                    r3 = r3 + 7;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x22f30;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x22ee0:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x22f18;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x22f18:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r3 + r0;
                        pc=0x22ee0;
                        continue;
                    }
                    r5 = r3 + r0;
                case 0x22f30:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23014;
                        run_23000(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23110;
                        run_23000(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r6 = r15 + 1;
                case 0x22f64:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22f94;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23108;
                        run_23000(); return;
                    }
                case 0x22f94:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23010;
                        run_23000(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23010;
                        run_23000(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x2300c;
                        run_23000(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x230fc;
                        run_23000(); return;
                    }
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x22fd8:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23008;
                        run_23000(); return;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x230f4;
                        continue;
                    }
                case 0x23008:
                    r2 = r5 + r0;
                case 0x2300c:
                    r6 = r2 + r0;
                case 0x23010:
                    r2 = r6 + r0;
                case 0x23014:
                    r9 = r2 + -3;
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        continue;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        continue;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        continue;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        continue;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x2306c:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2306c;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x23080:
                    r5 = r17 + r6;
                    r4 = r10 + r21;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2309c:
                    r13 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                case 0x230a0:
                    r15 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r11 + r0;
                    pc=0x22e44;
                    run_22e00(); return;
                case 0x230ac:
                    r2 = r2 + r20;
                    r5 = r10 + r21;
                    r6 = r17 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 & r4;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2309c;
                    continue;
                case 0x230d4:
                    r21 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r20 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r19 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r18 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    r17 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r16 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x230f4:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x22fd8;
                    run_22e00(); return;
                case 0x230fc:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x22fd8;
                    run_22e00(); return;
                case 0x23108:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x22f64;
                    run_22e00(); return;
                case 0x23110:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x22f64;
                    run_22e00(); return;
                case 0x2311c:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 6;
                    r3 = r3 + 6;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23190;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23140:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23178;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23178:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23140;
                        continue;
                    }
                case 0x23190:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23270;
                        run_23200(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x232f8;
                        run_23200(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r5 = r15 + 1;
                case 0x231c4:
                    r6 = r5 < r13 ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x231f4;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x232f0;
                        run_23200(); return;
                    }
                case 0x231f4:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2326c;
                        run_23200(); return;
                    }
                    r2 = r5 >> 3;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x2326c;
                        continue;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23268;
                        continue;
                    }
                    r2 = r13 + r0;
                    if(r5 == r19) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x232e4;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x23230:
                    r5 = r5 + 1;
                case 0x23234:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23264;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23230;
                        continue;
                    }
                case 0x23264:
                    r2 = r5 + r0;
                case 0x23268:
                    r5 = r2 + r0;
                case 0x2326c:
                    r2 = r5 + r0;
                case 0x23270:
                    r9 = r2 + -2;
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x232c8:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x232c8;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x232e4:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23234;
                    continue;
                case 0x232f0:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x231c4;
                    run_23000(); return;
                case 0x232f8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x231c4;
                    run_23000(); return;
                case 0x23304:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 3;
                    r3 = r3 + 3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23378;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23328:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23360;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23360:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23328;
                        continue;
                    }
                case 0x23378:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23458;
                        run_23400(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x234e0;
                        run_23400(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r5 = r15 + 1;
                case 0x233ac:
                    r6 = r5 < r13 ? 1 : 0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x233dc;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x234d8;
                        run_23400(); return;
                    }
                case 0x233dc:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23454;
                        run_23400(); return;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23454;
                        continue;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23450;
                        continue;
                    }
                    r2 = r13 + r0;
                    if(r5 == r19) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x234cc;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x23418:
                    r5 = r5 + 1;
                case 0x2341c:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2344c;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23418;
                        continue;
                    }
                case 0x2344c:
                    r2 = r5 + r0;
                case 0x23450:
                    r5 = r2 + r0;
                case 0x23454:
                    r2 = r5 + r0;
                case 0x23458:
                    r9 = r2 + -1;
                    if(r9 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x234b0:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x234b0;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x234cc:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x2341c;
                    continue;
                case 0x234d8:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x233ac;
                    run_23200(); return;
                case 0x234e0:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x233ac;
                    run_23200(); return;
                case 0x234ec:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 7;
                    r3 = r3 + 7;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23560;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23510:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23548;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23548:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23510;
                        continue;
                    }
                case 0x23560:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23644;
                        run_23600(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x236d8;
                        run_23600(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r6 = r15 + 1;
                case 0x23594:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x235c4;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x236d0;
                        run_23600(); return;
                    }
                case 0x235c4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23640;
                        run_23600(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23640;
                        run_23600(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x2363c;
                        run_23600(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x236c4;
                        run_23600(); return;
                    }
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x23608:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23638;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x236bc;
                        continue;
                    }
                case 0x23638:
                    r2 = r5 + r0;
                case 0x2363c:
                    r6 = r2 + r0;
                case 0x23640:
                    r2 = r6 + r0;
                case 0x23644:
                    r9 = r2 + 3;
                    r2 = r13 < r9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x236a0:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x236a0;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x236bc:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x23608;
                    continue;
                case 0x236c4:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23608;
                    continue;
                case 0x236d0:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x23594;
                    run_23400(); return;
                case 0x236d8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x23594;
                    run_23400(); return;
                case 0x236e4:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 6;
                    r3 = r3 + 6;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23758;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23708:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23740;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23740:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23708;
                        continue;
                    }
                case 0x23758:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x2383c;
                        run_23800(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x238d0;
                        run_23800(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r6 = r15 + 1;
                case 0x2378c:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x237bc;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x238c8;
                        run_23800(); return;
                    }
                case 0x237bc:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23838;
                        run_23800(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23838;
                        run_23800(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23834;
                        run_23800(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x238bc;
                        run_23800(); return;
                    }
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23830;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x238b4;
                        continue;
                    }
                case 0x23830:
                    r2 = r5 + r0;
                case 0x23834:
                    r6 = r2 + r0;
                case 0x23838:
                    r2 = r6 + r0;
                case 0x2383c:
                    r9 = r2 + 2;
                    r2 = r13 < r9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x23898:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x23898;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x238b4:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x23800;
                    continue;
                case 0x238bc:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23800;
                    continue;
                case 0x238c8:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x2378c;
                    run_23600(); return;
                case 0x238d0:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x2378c;
                    run_23600(); return;
                case 0x238dc:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 3;
                    r3 = r3 + 3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23950;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23900:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23938;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23938:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23900;
                        continue;
                    }
                case 0x23950:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23a34;
                        run_23a00(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23ac8;
                        run_23a00(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r6 = r15 + 1;
                case 0x23984:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x239b4;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23ac0;
                        run_23a00(); return;
                    }
                case 0x239b4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a30;
                        run_23a00(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23a30;
                        run_23a00(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23a2c;
                        run_23a00(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23ab4;
                        run_23a00(); return;
                    }
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x239f8:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23a28;
                        run_23a00(); return;
                    }
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23aac;
                        continue;
                    }
                case 0x23a28:
                    r2 = r5 + r0;
                case 0x23a2c:
                    r6 = r2 + r0;
                case 0x23a30:
                    r2 = r6 + r0;
                case 0x23a34:
                    r9 = r2 + 1;
                    r2 = r13 < r9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230d4;
                        run_23000(); return;
                    }
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x23a90:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x23a90;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x23aac:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x239f8;
                    run_23800(); return;
                case 0x23ab4:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x239f8;
                    run_23800(); return;
                case 0x23ac0:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x23984;
                    run_23800(); return;
                case 0x23ac8:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x23984;
                    run_23800(); return;
                case 0x23ad4:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 1;
                    r3 = r3 + 1;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23b48;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23af8:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23b30;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23b30:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23af8;
                        continue;
                    }
                case 0x23b48:
                    r11 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r13 + r0;
                        pc=0x23c2c;
                        run_23c00(); return;
                    }
                    r9 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23cb0;
                        run_23c00(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r7 = r4 & 1;
                    r6 = r15 + 1;
                case 0x23b7c:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23bac;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23ca8;
                        run_23c00(); return;
                    }
                case 0x23bac:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c28;
                        run_23c00(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x23c28;
                        run_23c00(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23c24;
                        run_23c00(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23c9c;
                        run_23c00(); return;
                    }
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x23bf0:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23c20;
                        run_23c00(); return;
                    }
                    r2 = r5 >> 3;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23c94;
                        continue;
                    }
                case 0x23c20:
                    r2 = r5 + r0;
                case 0x23c24:
                    r6 = r2 + r0;
                case 0x23c28:
                    r9 = r6 + r0;
                case 0x23c2c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        run_23000(); return;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x230ac;
                        run_23000(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23080;
                        run_23000(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x23c78:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x23c78;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23080;
                    run_23000(); return;
                case 0x23c94:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x23bf0;
                    run_23a00(); return;
                case 0x23c9c:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23bf0;
                    run_23a00(); return;
                case 0x23ca8:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x23b7c;
                    run_23a00(); return;
                case 0x23cb0:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x23b7c;
                    run_23a00(); return;
                case 0x23cbc:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 4;
                    r3 = r3 + 4;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x23d30;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23ce0:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23d18;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23d18:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ce0;
                        continue;
                    }
                case 0x23d30:
                    r7 = (r16&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23e14;
                        run_23e00(); return;
                    }
                    r2 = r13 + r0;
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23f54;
                        run_23e00(); return;
                    }
                    r2 = r15 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r15 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r9 = r4 & 1;
                    r6 = r15 + 1;
                case 0x23d64:
                    r5 = r6 < r13 ? 1 : 0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23d94;
                        continue;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r9 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23f4c;
                        run_23e00(); return;
                    }
                case 0x23d94:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e10;
                        run_23e00(); return;
                    }
                    r2 = r6 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r6 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r4 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x23e10;
                        run_23e00(); return;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r13 + r0;
                        pc=0x23e0c;
                        run_23e00(); return;
                    }
                    r2 = r13 + r0;
                    if(r6 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23f40;
                        run_23e00(); return;
                    }
                    r7 = r4 + r0;
                    r5 = r6 + 1;
                case 0x23dd8:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e08;
                        run_23e00(); return;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    if(r7 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23f38;
                        continue;
                    }
                case 0x23e08:
                    r2 = r5 + r0;
                case 0x23e0c:
                    r6 = r2 + r0;
                case 0x23e10:
                    r2 = r6 + r0;
                case 0x23e14:
                    r5 = r2 + r0;
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r13 + r0;
                        pc=0x23e7c;
                        continue;
                    }
                    r9 = r13 + r0;
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x23f2c;
                        continue;
                    }
                    r2 = r2 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r6 = r4 & 1;
                case 0x23e44:
                    r5 = r5 + 1;
                case 0x23e48:
                    r2 = r5 < r13 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23e78;
                        continue;
                    }
                    r2 = r5 >> 3;
                    r2 = r25 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r5 & 7;
                    r3 = r18 - r3;
                    r4 = r4 >> (r3&0x1f);
                    r4 = r4 & 1;
                    if(r6 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x23e44;
                        continue;
                    }
                case 0x23e78:
                    r9 = r5 + r0;
                case 0x23e7c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23efc;
                        continue;
                    }
                    r7 = r15 >> 3;
                    r6 = r9 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x23f04;
                        continue;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23edc;
                        continue;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x23ec8:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x23ec8;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x23edc:
                    r5 = r17 + r6;
                    r4 = r10 + r21;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x23ef8:
                    r13 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                case 0x23efc:
                    /* Next insn is delay slot */ 
                    r15 = r9 + r0;
                    pc=0x22e44;
                    run_22e00(); return;
                case 0x23f04:
                    r2 = r2 + r20;
                    r5 = r10 + r21;
                    r6 = r17 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 & r4;
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x23ef8;
                    continue;
                case 0x23f2c:
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23e48;
                    continue;
                case 0x23f38:
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x23dd8;
                    run_23c00(); return;
                case 0x23f40:
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x23dd8;
                    run_23c00(); return;
                case 0x23f4c:
                    /* Next insn is delay slot */ 
                    r6 = r6 + 1;
                    pc=0x23d64;
                    run_23c00(); return;
                case 0x23f54:
                    r9 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x23d64;
                    run_23c00(); return;
                case 0x23f60:
                    r3 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 << 3;
                    r3 = r3 + 3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x244bc;
                        run_24400(); return;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x23f84:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x23fbc;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x23fbc:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f84;
                        continue;
                    }
                case 0x23fd4:
                    if(r15 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x244b4;
                        run_24400(); return;
                    }
                case 0x23fdc:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24248;
                        run_24200(); return;
                    }
                    r2 = 4 << 16;
                    r10 = 255 << 16;
                    r12 = r2 + -20108;
                    r14 = r0 + 8;
                    r11 = r0 + r0;
                    r24 = r0 + 32;
                    r10 = r10 | 65535;
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    r6 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r2 = r6 >>> 24;
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r3 = r14 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2404c;
                        continue;
                    }
                    r2 = r24 - r4;
                    r3 = r6 & r10;
                    r3 = r3 >>> (r2&0x1f);
                    r2 = r9 + r3;
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r4 = r3 + 8;
                case 0x2404c:
                    r2 = r6 << (r4&0x1f);
                    r3 = r5 + r4;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x2423c;
                        run_24200(); return;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x2406c:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x240a4;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x240a4:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2406c;
                        continue;
                    }
                case 0x240bc:
                    r2 = r9 < 64 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + r9;
                        pc=0x24000;
                        continue;
                    }
                    r11 = r11 + r9;
                    r2 = 4 << 16;
                    r12 = r2 + -18892;
                    r14 = r0 + 7;
                    r10 = r0 + r0;
                case 0x240d8:
                    r6 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r2 = r6 >>> 25;
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r4 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r3 = r14 < r4 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24130;
                        continue;
                    }
                    r3 = 511 << 16;
                    r3 = r3 | 65535;
                    r2 = r0 + 32;
                    r2 = r2 - r4;
                    r3 = r6 & r3;
                    r3 = r3 >>> (r2&0x1f);
                    r2 = r9 + r3;
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r4 = r3 + 7;
                case 0x24130:
                    r2 = r6 << (r4&0x1f);
                    r3 = r5 + r4;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x241a0;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x24150:
                    r4 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    r2 = r4 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                        pc=0x24188;
                        continue;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r5&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x24188:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    r2 = r4 + 1;
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24150;
                        continue;
                    }
                case 0x241a0:
                    r2 = r9 < 64 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r10 + r9;
                        pc=0x241b8;
                        continue;
                    }
                    r10 = r10 + r9;
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x240d8;
                    continue;
                case 0x241b8:
                    r4 = r15 + r11;
                    r2 = r13 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r10;
                        pc=0x241cc;
                        continue;
                    }
                    r9 = r4 + r10;
                    r4 = r13 + r0;
                case 0x241cc:
                    r2 = r13 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x241dc;
                        continue;
                    }
                    r9 = r13 + r0;
                case 0x241dc:
                    r7 = r4 >> 3;
                    r6 = r9 >> 3;
                    r2 = r4 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r9 & 7;
                        pc=0x23f04;
                        run_23e00(); return;
                    }
                    r10 = r9 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23edc;
                        run_23e00(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x24220:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x24220;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23edc;
                    run_23e00(); return;
                case 0x2423c:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x240bc;
                    run_24000(); return;
                case 0x24248:
                    r2 = 4 << 16;
                    r10 = 511 << 16;
                    r11 = r2 + -18892;
                    r12 = r0 + 7;
                    r4 = r0 + r0;
                    r14 = r0 + 32;
                    r10 = r10 | 65535;
                case 0x24264:
                    r7 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r2 = r7 >>> 25;
                    r2 = r2 << 2;
                    r2 = r2 + r11;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r3 = r12 < r6 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242b0;
                        continue;
                    }
                    r2 = r14 - r6;
                    r3 = r7 & r10;
                    r3 = r3 >>> (r2&0x1f);
                    r2 = r9 + r3;
                    r2 = r2 << 2;
                    r2 = r2 + r11;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r6 = r3 + 7;
                case 0x242b0:
                    r2 = r7 << (r6&0x1f);
                    r3 = r5 + r6;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x244a8;
                        run_24400(); return;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x242d0:
                    r6 = r5 + -8;
                    r5 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r6;
                    r2 = r5 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2430c;
                        continue;
                    }
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r6&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x2430c:
                    r2 = r5 + 1;
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x242d0;
                        continue;
                    }
                case 0x24324:
                    r2 = r9 < 64 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r9;
                        pc=0x24264;
                        continue;
                    }
                    r4 = r4 + r9;
                    r2 = 4 << 16;
                    r11 = r2 + -20108;
                    r12 = r0 + 8;
                    r10 = r0 + r0;
                case 0x24340:
                    r7 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r2 = r7 >>> 24;
                    r2 = r2 << 2;
                    r2 = r2 + r11;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r6 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r3 = r12 < r6 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24398;
                        continue;
                    }
                    r3 = 255 << 16;
                    r3 = r3 | 65535;
                    r2 = r0 + 32;
                    r2 = r2 - r6;
                    r3 = r7 & r3;
                    r3 = r3 >>> (r2&0x1f);
                    r2 = r9 + r3;
                    r2 = r2 << 2;
                    r2 = r2 + r11;
                    addr=r2+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r9 = tmp;
                    r6 = r3 + 8;
                case 0x24398:
                    r2 = r7 << (r6&0x1f);
                    r3 = r5 + r6;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                    r2 = r3 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                        pc=0x2440c;
                        run_24400(); return;
                    }
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r3;
                    r7 = readPages[(r8+12)>>>12][((r8+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                case 0x243b8:
                    r6 = r5 + -8;
                    r5 = readPages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff];
                    writePages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff] = r6;
                    r2 = r5 + 4;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243f4;
                        continue;
                    }
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r2 = r2 + r5;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff];
                    r3 = r3 << (r6&0x1f);
                    r2 = r2 | r3;
                    writePages[(r8+24)>>>12][((r8+24)>>>2)&0x3ff] = r2;
                case 0x243f4:
                    r2 = r5 + 1;
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    writePages[(r8+16)>>>12][((r8+16)>>>2)&0x3ff] = r2;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r2 = r5 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243b8;
                        run_24200(); return;
                    }
                case 0x2440c:
                    r2 = r9 < 64 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r10 + r9;
                        pc=0x24424;
                        continue;
                    }
                    r10 = r10 + r9;
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x24340;
                    run_24200(); return;
                case 0x24424:
                    r4 = r15 + r4;
                    r2 = r13 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r4 + r10;
                        pc=0x24438;
                        continue;
                    }
                    r9 = r4 + r10;
                    r4 = r13 + r0;
                case 0x24438:
                    r2 = r13 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24448;
                        continue;
                    }
                    r9 = r13 + r0;
                case 0x24448:
                    r7 = r15 >> 3;
                    r6 = r4 >> 3;
                    r2 = r15 & 7;
                    if(r7 == r6) {
                        /* Next insn is delay slot */ 
                        r10 = r4 & 7;
                        pc=0x23f04;
                        run_23e00(); return;
                    }
                    r10 = r4 & 7;
                    r4 = r2 + r20;
                    r5 = r17 + r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r7 + 1;
                    r2 = r2 | r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r6 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23edc;
                        run_23e00(); return;
                    }
                    r5 = r0 + -1;
                    r3 = r4 + r17;
                case 0x2448c:
                    r4 = r4 + 1;
                    r2 = r4 < r6 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2448c;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x23edc;
                    run_23e00(); return;
                case 0x244a8:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x24324;
                    run_24200(); return;
                case 0x244b4:
                    /* Next insn is delay slot */ 
                    r15 = r0 + r0;
                    pc=0x23fdc;
                    run_23e00(); return;
                case 0x244bc:
                    r5 = readPages[(r8+20)>>>12][((r8+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23fd4;
                    run_23e00(); return;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r29 = r29 + -96;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r23;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r22;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r21;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r20;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r18;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r17;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r22 = r5 + r0;
                    r23 = r6 + r0;
                    r5 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r4 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r0;
                    if(r7 < 0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x24ae8;
                        run_24a00(); return;
                    }
                    r6 = r0 + r0;
                case 0x2465c:
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ad0;
                        run_24a00(); return;
                    }
                case 0x24664:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r7 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r3 + r7;
                    r3 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24698;
                        continue;
                    }
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                case 0x24698:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r5 + r3;
                    r3 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246c0;
                        continue;
                    }
                    r3 = r3 - r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                case 0x246c0:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        continue;
                    }
                    r3 = 4 << 16;
                    r2 = r4 << 2;
                    r3 = r3 + -17612;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x246ec:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        continue;
                    }
                    r7 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                    r7 = r0 < r7 ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    r30 = r6 + r0;
                case 0x24710:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24780;
                        continue;
                    }
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r21 = r30 + r0;
                case 0x24734:
                    r5 = r19 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x24744;
                    pc=0x25000;
                    run_25000(); return;
                case 0x24744:
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x24758;
                    pc=0x25000;
                    run_25000(); return;
                case 0x24758:
                    r16 = r16 | r2;
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    r31=0x24774;
                    pc=0x25200;
                    run_25200(); return;
                case 0x24774:
                    r19 = r19 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x24734;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x24780:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r4 + 1;
                    r2 = r3 < r7 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r30 = r30 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r4;
                        pc=0x24710;
                        continue;
                    }
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r4;
                case 0x247a8:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r23 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r22 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r21 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r20 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r19 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r18 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r17 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x247dc:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r5;
                    r3 = r0 < r3 ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r30 = r6 + r0;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24870;
                        continue;
                    }
                    r20 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r21 = r30 + r0;
                case 0x24824:
                    r5 = r19 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x24834;
                    pc=0x25000;
                    run_25000(); return;
                case 0x24834:
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x24848;
                    pc=0x25000;
                    run_25000(); return;
                case 0x24848:
                    r16 = r16 & r2;
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    r31=0x24864;
                    pc=0x25200;
                    run_25200(); return;
                case 0x24864:
                    r19 = r19 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x24824;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x24870:
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r2 = r2 + 1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r2 = r7 < r3 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + 1;
                        pc=0x24800;
                        continue;
                    }
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x247a8;
                    run_24600(); return;
                case 0x248a0:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        run_24600(); return;
                    }
                    r7 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    r7 = r0 < r7 ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    r30 = r6 + r0;
                case 0x248c4:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24934;
                        continue;
                    }
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r21 = r30 + r0;
                case 0x248e8:
                    r5 = r19 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x248f8;
                    pc=0x25000;
                    run_25000(); return;
                case 0x248f8:
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x2490c;
                    pc=0x25000;
                    run_25000(); return;
                case 0x2490c:
                    r16 = r16 ^ r2;
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    r31=0x24928;
                    pc=0x25200;
                    run_25200(); return;
                case 0x24928:
                    r19 = r19 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x248e8;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x24934:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r4 = r4 + 1;
                    r2 = r3 < r7 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r30 = r30 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                        pc=0x248c4;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    pc=0x247a8;
                    run_24600(); return;
                case 0x24964:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        run_24600(); return;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    r3 = r0 < r3 ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r30 = r6 + r0;
                case 0x24988:
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x249fc;
                        continue;
                    }
                    r20 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r21 = r30 + r0;
                case 0x249ac:
                    r5 = r19 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x249bc;
                    pc=0x25000;
                    run_25000(); return;
                case 0x249bc:
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x249d0;
                    pc=0x25000;
                    run_25000(); return;
                case 0x249d0:
                    r16 = r16 ^ r2;
                    r16 = ~(r0 | r16);
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    r31=0x249f0;
                    pc=0x25200;
                    run_25200(); return;
                case 0x249f0:
                    r19 = r19 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x249ac;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x249fc:
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r2 = r2 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r7 < r3 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + 1;
                        pc=0x24988;
                        run_24800(); return;
                    }
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x247a8;
                    run_24600(); return;
                case 0x24a2c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x247a8;
                        run_24600(); return;
                    }
                    r7 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = r5 + r0;
                    r7 = r0 < r7 ? 1 : 0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r7;
                    r19 = r6 + r0;
                case 0x24a50:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aa8;
                        continue;
                    }
                    r18 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r16 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r21 = r19 + r0;
                    r20 = r30 + r0;
                case 0x24a74:
                    r5 = r16 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r21 + r0;
                    r31=0x24a84;
                    pc=0x25000;
                    run_25000(); return;
                case 0x24a84:
                    r7 = r2 + r0;
                    r5 = r18 + r0;
                    r4 = r22 + r0;
                    r6 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    r31=0x24a9c;
                    pc=0x25200;
                    run_25200(); return;
                case 0x24a9c:
                    r16 = r16 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + 1;
                        pc=0x24a74;
                        continue;
                    }
                    r18 = r18 + 1;
                case 0x24aa8:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r3 < r4 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r19 = r19 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r30 = r30 + 1;
                        pc=0x24a50;
                        continue;
                    }
                    r30 = r30 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x247a8;
                    run_24600(); return;
                case 0x24ad0:
                    r7 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r6 = r0 - r5;
                    r7 = r7 + r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=0x24664;
                    run_24600(); return;
                case 0x24ae8:
                    r3 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r7 = r0 - r7;
                    r2 = r2 + r3;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r0;
                    pc=0x2465c;
                    run_24600(); return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    r29 = r29 + -56;
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r16 = r5 + r0;
                    r17 = r6 + r0;
                    r8 = r7 + r0;
                    r10 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24f70;
                        run_24e00(); return;
                    }
                    r4 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r5 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r15 = readPages[(r6+12)>>>12][((r6+12)>>>2)&0x3ff];
                    if(r7 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24f64;
                        run_24e00(); return;
                    }
                case 0x24c54:
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24f58;
                        run_24e00(); return;
                    }
                case 0x24c5c:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r8 + r4;
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 - r8;
                        pc=0x24c74;
                        continue;
                    }
                    r6 = r3 - r8;
                    r6 = r4 + r0;
                case 0x24c74:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r10 + r5;
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r11 = r3 - r10;
                        pc=0x24c8c;
                        continue;
                    }
                    r11 = r3 - r10;
                    r11 = r5 + r0;
                case 0x24c8c:
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = r8 + r6;
                    { long hilo = (long)(r10) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r5 + -1;
                    r25 = r2 >> 3;
                    r2 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r24 = r8 >> 3;
                    r7 = r8 & 7;
                    r9 = r15 + r0;
                    r3 = lo;
                    r2 = r2 + r3;
                    r13 = r2 + r24;
                    if(r24 == r25) {
                        /* Next insn is delay slot */ 
                        r8 = r13 + r0;
                        pc=0x24f08;
                        run_24e00(); return;
                    }
                    r8 = r13 + r0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d98;
                        continue;
                    }
                    r2 = r6 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + 255;
                        pc=0x24cec;
                        continue;
                    }
                    r18 = r0 + 255;
                    r3 = r0 + 8;
                    r3 = r3 - r2;
                    r2 = r0 + -1;
                    r2 = r2 << (r3&0x1f);
                    r18 = r2 & 255;
                case 0x24cec:
                    if(r11 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d6c;
                        continue;
                    }
                    r7 = r24 < r25 ? 1 : 0;
                    r12 = r11 + r0;
                case 0x24cfc:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d38;
                        continue;
                    }
                    r6 = r25 - r24;
                    r5 = r9 + r0;
                    r4 = r8 + -1;
                case 0x24d10:
                    r4 = r4 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r6 = r6 + -1;
                    r3 = r3 | r2;
                    r8 = r8 + 1;
                    r9 = r9 + 1;
                    r5 = r5 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r4+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x24d10;
                        continue;
                    }
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x24d38:
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r18 & r3;
                    r2 = r2 | r3;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r13 = r13 + r3;
                    r15 = r15 + r2;
                    r12 = r12 + -1;
                    r8 = r13 + r0;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r15 + r0;
                        pc=0x24cfc;
                        continue;
                    }
                    r9 = r15 + r0;
                case 0x24d6c:
                    r2 = r0 + r0;
                case 0x24d70:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x24d98:
                    r3 = r5 + 7;
                    r2 = r6 + 7;
                    r3 = r3 >> 3;
                    r2 = r2 >> 3;
                    r3 = r3 - r24;
                    r4 = r0 + -1;
                    r4 = r4 << (r7&0x1f);
                    r20 = r2 < r3 ? 1 : 0;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        r14 = r4 & 255;
                        pc=0x24ef0;
                        run_24e00(); return;
                    }
                    r14 = r4 & 255;
                    r4 = r0 + 256;
                    r2 = r5 & 7;
                    r2 = r4 >> (r2&0x1f);
                    r3 = r0 + 8;
                    r4 = r4 - r2;
                    r3 = r3 - r7;
                    r4 = r4 >> (r3&0x1f);
                    r18 = r4 & 255;
                case 0x24de0:
                    if(r11 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x24d6c;
                        continue;
                    }
                    r2 = r0 + 8;
                    r25 = r25 + -1;
                    r19 = r2 - r7;
                    r21 = ~(r0 | r14);
                    r12 = r11 + r0;
                    r22 = r0 + 8;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    addr=r15+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r13+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r14 & r2;
                    r2 = r2 >> (r7&0x1f);
                    r3 = r3 | r2;
                    r2 = r24 < r25 ? 1 : 0;
                    r8 = r13 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r13+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x24e80;
                        continue;
                    }
                    addr=r13+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r11 = ~(r0 | r14);
                    r10 = r22 - r7;
                    r6 = r25 - r24;
                    r4 = r8 + r0;
                    r5 = r9 + r0;
                case 0x24e38:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 & r11;
                    r2 = r2 << (r10&0x1f);
                    r3 = r3 | r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r4 = r4 + 1;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r14 & r3;
                    r3 = r3 >> (r7&0x1f);
                    r2 = r2 | r3;
                    r6 = r6 + -1;
                    r9 = r9 + 1;
                    r8 = r8 + 1;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r4+-1;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x24e38;
                        continue;
                    }
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x24e80:
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ec4;
                        continue;
                    }
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r18 & r3;
                    r3 = r3 << (r19&0x1f);
                    r2 = r2 | r3;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x24ea0:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r15 = r15 + r3;
                    r12 = r12 + -1;
                    r13 = r13 + r2;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r15 + r0;
                        pc=0x24e00;
                        continue;
                    }
                    r9 = r15 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x24d6c;
                    run_24c00(); return;
                case 0x24ec4:
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r9+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 & r21;
                    r3 = r18 & r3;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r2 << (r19&0x1f);
                    r3 = r3 >> (r7&0x1f);
                    r2 = r2 | r3;
                    r4 = r4 | r2;
                    /* Next insn is delay slot */ 
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x24ea0;
                    continue;
                case 0x24ef0:
                    r3 = r6 & 7;
                    r2 = r0 + 256;
                    r2 = r2 >> (r3&0x1f);
                    r2 = r0 - r2;
                    /* Next insn is delay slot */ 
                    r18 = r2 & 255;
                    pc=0x24de0;
                    run_24c00(); return;
                case 0x24f08:
                    r2 = r0 + 256;
                    r2 = r2 >> (r6&0x1f);
                    r2 = r0 - r2;
                    if(r11 <= 0) {
                        /* Next insn is delay slot */ 
                        r14 = r2 & 255;
                        pc=0x24d6c;
                        run_24c00(); return;
                    }
                    r14 = r2 & 255;
                    r12 = r11 + r0;
                case 0x24f20:
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r14 & r3;
                    r3 = r3 >> (r7&0x1f);
                    r2 = r2 | r3;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r12 = r12 + -1;
                    r8 = r8 + r3;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + r2;
                        pc=0x24f20;
                        continue;
                    }
                    r9 = r9 + r2;
                    /* Next insn is delay slot */ 
                    pc=0x24d6c;
                    run_24c00(); return;
                case 0x24f58:
                    r5 = r5 + r10;
                    /* Next insn is delay slot */ 
                    r10 = r0 + r0;
                    pc=0x24c5c;
                    run_24c00(); return;
                case 0x24f64:
                    r4 = r4 + r7;
                    /* Next insn is delay slot */ 
                    r8 = r0 + r0;
                    pc=0x24c54;
                    run_24c00(); return;
                case 0x24f70:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r10;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x24f7c;
                    pc=0x24600;
                    run_24600(); return;
                case 0x24f7c:
                    /* Next insn is delay slot */ 
                    pc=0x24d70;
                    run_24c00(); return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r7 = r4 + r0;
                    { long hilo = (long)(r6) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r9 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r5 >> 3;
                    r4 = ~(r0 | r5);
                    r4 = r4 & 7;
                    r3 = lo;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r3;
                        pc=0x2504c;
                        continue;
                    }
                    r3 = r2 + r3;
                    r2 = r5 < r8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2504c;
                        continue;
                    }
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2504c;
                        continue;
                    }
                    r2 = r6 < r9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25054;
                        continue;
                    }
                case 0x2504c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x25054:
                    r2 = readPages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 >> (r4&0x1f);
                    /* Next insn is delay slot */ 
                    r2 = r3 & 1;
                    pc=r31;
                    return;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r8 = r6 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25234;
                        continue;
                    }
                    r2 = r5 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25234;
                        continue;
                    }
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25234;
                        continue;
                    }
                    r2 = r6 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2523c;
                        continue;
                    }
                case 0x25234:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x2523c:
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r6 = r5 >> 3;
                    { long hilo = (long)(r8) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r5 = ~(r0 | r5);
                    r5 = r5 & 7;
                    r3 = r0 + 1;
                    r3 = r3 << (r5&0x1f);
                    r3 = r3 ^ 255;
                    r5 = r7 << (r5&0x1f);
                    r2 = lo;
                    r6 = r6 + r2;
                    r4 = r4 + r6;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & r3;
                    r2 = r2 | r5;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=r31;
                    return;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r20 = r5 + r0;
                    r5 = r0 + 20;
                    /* Next insn is delay slot */ 
                    r21 = r6 + r0;
                    r31=0x25438;
                    pc=0x16600;
                    run_16600(); return;
                case 0x25438:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x254d8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = r20 + -1;
                    r2 = r2 >> 3;
                    r17 = r2 + 1;
                    { long hilo = (long)(r17) * ((long)r21); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = lo;
                    r18 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x25464;
                    pc=0x16600;
                    run_16600(); return;
                case 0x25464:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                        pc=0x254a8;
                        continue;
                    }
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r20;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r21;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r17;
                    r2 = r16 + r0;
                case 0x25484:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x254a8:
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    r7 = r7 + -17592;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    r31=0x254c4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x254c4:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x254d0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x254d0:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x25484;
                    continue;
                case 0x254d8:
                    r7 = 4 << 16;
                    r4 = r19 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -17540;
                    r31=0x254f0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x254f0:
                    /* Next insn is delay slot */ 
                    pc=0x254d0;
                    continue;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r3;
                    pc=r31;
                    return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    r2 = r2 + -1;
                    r16 = r5 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r2;
                        pc=0x2583c;
                        continue;
                    }
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r2;
                case 0x25828:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2583c:
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2584c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x2584c:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x25858;
                    pc=0x16800;
                    run_16800(); return;
                case 0x25858:
                    /* Next insn is delay slot */ 
                    pc=0x25828;
                    continue;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r18 = r4 + r0;
                    r16 = r5 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        r17 = r7 + r0;
                        pc=0x25adc;
                        continue;
                    }
                    r17 = r7 + r0;
                    r6 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    { long hilo = (long)(r6) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x25a44;
                    pc=0x16a00;
                    run_16a00(); return;
                case 0x25a44:
                    r5 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                        pc=0x25ab8;
                        continue;
                    }
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r3 < r17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25a84;
                        continue;
                    }
                case 0x25a64:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                case 0x25a68:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x25a84:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r6 = r17 - r3;
                    { long hilo = (long)(r6) * ((long)r4); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r4); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = lo;
                    r4 = r5 + r4;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x25ab0;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x25ab0:
                    /* Next insn is delay slot */ 
                    pc=0x25a64;
                    continue;
                case 0x25ab8:
                    r7 = 4 << 16;
                    r4 = r18 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    r7 = r7 + -17504;
                case 0x25acc:
                    /* Next insn is delay slot */ 
                    r31=0x25ad4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x25ad4:
                    /* Next insn is delay slot */ 
                    pc=0x25a68;
                    continue;
                case 0x25adc:
                    r7 = 4 << 16;
                    r5 = r0 + 2;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -17472;
                    pc=0x25acc;
                    continue;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 255;
                        pc=0x25c14;
                        continue;
                    }
                    r3 = r0 + 255;
                    r3 = r0 + r0;
                case 0x25c14:
                    r6 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    { long hilo = (long)(r6) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = r3 + r0;
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x25c34;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x25c34:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    r17 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = 4 << 16;
                    r5 = r5 + -10408;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x25e30;
                    pc=0x2a800;
                    run_2a800(); return;
                case 0x25e30:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x25e98;
                        continue;
                    }
                    r16 = r2 + r0;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r7 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -17224;
                    r31=0x25e50;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x25e50:
                    r6 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r2 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    { long hilo = (long)(r6) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = r0 + 1;
                    r7 = r16 + r0;
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x25e74;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x25e74:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x25e7c;
                    pc=0x29800;
                    run_29800(); return;
                case 0x25e7c:
                    r2 = r0 + r0;
                case 0x25e80:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x25e98:
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r5 + -17212;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x25eb0;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x25eb0:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=0x25e80;
                    continue;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r5 + r0;
                    r17 = r5 + r0;
                    r6 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r7 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = 4 << 16;
                    r5 = r5 + -17224;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x26034;
                    pc=0x2aa00;
                    run_2aa00(); return;
                case 0x26034:
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    { long hilo = (long)(r6) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r7 = r17 + r0;
                    r5 = r0 + 1;
                    r6 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x26058;
                    pc=0x2c600;
                    run_2c600(); return;
                case 0x26058:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    r29 = r29 + -72;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r23;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r5;
                    r19 = r6 + 4;
                    r6 = r6 + r2;
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r6;
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r22 = r4 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -17144;
                    r31=0x2625c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2625c:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 20;
                    r31=0x26268;
                    pc=0x16600;
                    run_16600(); return;
                case 0x26268:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x266a4;
                        run_26600(); return;
                    }
                    r17 = r2 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r2 = r0 + 4;
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r2;
                    r31=0x2628c;
                    pc=0x16600;
                    run_16600(); return;
                case 0x2628c:
                    r5 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r5 = r5 << 2;
                    r31=0x262a0;
                    pc=0x16600;
                    run_16600(); return;
                case 0x262a0:
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26314;
                        continue;
                    }
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26388;
                        continue;
                    }
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26314;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x26304;
                        continue;
                    }
                    r18 = r0 + r0;
                case 0x262d0:
                    r2 = r18 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x262e4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x262e4:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r18 = r18 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26304;
                        continue;
                    }
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x262d0;
                    continue;
                case 0x26304:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26314;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26314:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26378;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x26368;
                        continue;
                    }
                    r18 = r0 + r0;
                case 0x26334:
                    r2 = r18 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x26348;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26348:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r18 = r18 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26368;
                        continue;
                    }
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26334;
                    continue;
                case 0x26368:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26378;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26378:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x26384;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26384:
                    r17 = r0 + r0;
                case 0x26388:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x266a4;
                        run_26600(); return;
                    }
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x264c8;
                        run_26400(); return;
                    }
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = ((r19 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x264c8;
                        run_26400(); return;
                    }
                case 0x263b4:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x263bc;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x263bc:
                    r18 = r2 + 1;
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r19 + r18;
                    r2 = ((r19 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x265ac;
                        run_26400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x263e0;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x263e0:
                    r20 = r2 + 1;
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r30 = r19 + r0;
                    r19 = r19 + r20;
                    r23 = ((r19 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x265ac;
                        run_26400(); return;
                    }
                    r6 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26544;
                        continue;
                    }
                case 0x26410:
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r2 = r6 << 2;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r2 + r3;
                    r31=0x26428;
                    pc=0x16600;
                    run_16600(); return;
                case 0x26428:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x26524;
                        continue;
                    }
                    r16 = r2 + r0;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x26440;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x26440:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r16;
                    r2 = r2 << 2;
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r2 + r3;
                    r31=0x26460;
                    pc=0x16600;
                    run_16600(); return;
                case 0x26460:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x26504;
                        continue;
                    }
                    r16 = r2 + r0;
                    r4 = r2 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x26478;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x26478:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r16;
                    r2 = r2 + 1;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r2;
                case 0x26488:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r30;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r2 + -17124;
                    r31=0x264b0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x264b0:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x264c8;
                        continue;
                    }
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x263b4;
                        run_26200(); return;
                    }
                case 0x264c8:
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    writePages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff] = r17;
                case 0x264d4:
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r23 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r22 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r21 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r20 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r19 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r18 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r17 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x26504:
                    r3 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r3 + -17112;
                    r31=0x2651c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2651c:
                    /* Next insn is delay slot */ 
                    pc=0x26478;
                    continue;
                case 0x26524:
                    r2 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r2 + -17112;
                    r31=0x2653c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2653c:
                    /* Next insn is delay slot */ 
                    pc=0x26440;
                    continue;
                case 0x26544:
                    r6 = r6 >> 2;
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r6;
                    r31=0x26558;
                    pc=0x16a00;
                    run_16a00(); return;
                case 0x26558:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    r6 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x2656c;
                    pc=0x16a00;
                    run_16a00(); return;
                case 0x2656c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2658c;
                        continue;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2658c;
                        continue;
                    }
                    r6 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r2;
                    pc=0x26410;
                    continue;
                case 0x2658c:
                    r3 = 4 << 16;
                    r4 = r22 + r0;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r3 + -17076;
                    r31=0x265a4;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x265a4:
                    /* Next insn is delay slot */ 
                    pc=0x26488;
                    continue;
                case 0x265ac:
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26610;
                        run_26600(); return;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x26600;
                        run_26600(); return;
                    }
                    r18 = r0 + r0;
                case 0x265cc:
                    r2 = r18 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x265e0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x265e0:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r18 = r18 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26600;
                        run_26600(); return;
                    }
                    r3 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x265cc;
                    continue;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26610;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26610:
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26674;
                        continue;
                    }
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x26664;
                        continue;
                    }
                    r18 = r0 + r0;
                case 0x26630:
                    r2 = r18 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x26644;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26644:
                    r2 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r18 = r18 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26664;
                        continue;
                    }
                    r3 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26630;
                    continue;
                case 0x26664:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26674;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26674:
                    r4 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x26680;
                    pc=0x16800;
                    run_16800(); return;
                case 0x26680:
                    r2 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -17040;
                    r31=0x2669c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2669c:
                    /* Next insn is delay slot */ 
                    pc=0x264d4;
                    run_26400(); return;
                case 0x266a4:
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -17004;
                    r31=0x266c0;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x266c0:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x264d4;
                    run_26400(); return;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r19 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r5 + r0;
                        pc=0x2687c;
                        continue;
                    }
                    r18 = r5 + r0;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x2686c;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x26838:
                    r2 = r17 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x2684c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x2684c:
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r17 = r17 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2686c;
                        continue;
                    }
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26838;
                    continue;
                case 0x2686c:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2687c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x2687c:
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268e0;
                        continue;
                    }
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x268d0;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x2689c:
                    r2 = r17 + r3;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r16 + 1;
                    r31=0x268b0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x268b0:
                    r2 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r17 = r17 + 4;
                    r2 = r16 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x268d0;
                        continue;
                    }
                    r3 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2689c;
                    continue;
                case 0x268d0:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x268e0;
                    pc=0x16800;
                    run_16800(); return;
                case 0x268e0:
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x268ec;
                    pc=0x16800;
                    run_16800(); return;
                case 0x268ec:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r2 = r5 + r0;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -16964;
                    r31=0x26a20;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x26a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = 4 << 16;
                    r3 = r4 & 127;
                    r3 = r3 << 2;
                    r2 = r2 + -16928;
                    r9 = r3 + r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    addr=r9+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r7 = tmp;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r8 = r2 - r7;
                    r2 = r3 >>> 16;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r8;
                        pc=0x26d04;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r8;
                    r2 = r7 << 16;
                    r2 = r3 - r2;
                    r3 = r8 & 32768;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r4 >>> 7;
                        pc=0x26cc8;
                        continue;
                    }
                    r6 = r4 >>> 7;
                    r2 = r8 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26cf4;
                        continue;
                    }
                    r3 = r0 + 1;
                    r17 = r3 - r6;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r9+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x26c84:
                    r2 = r2 ^ r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x26c8c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ce0;
                        continue;
                    }
                case 0x26c9c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r3 = r3 << 1;
                    r4 = r4 + -1;
                    r2 = r2 & 32768;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r17 + r0;
                        pc=0x26c8c;
                        continue;
                    }
                    r6 = r17 + r0;
                case 0x26cc8:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x26ce0:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x26ce8;
                    pc=0x27000;
                    run_27000(); return;
                case 0x26ce8:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26c9c;
                    continue;
                case 0x26cf4:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r9+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    r17 = r4 >>> 7;
                    pc=0x26c84;
                    continue;
                case 0x26d04:
                    r2 = r8 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d7c;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r7;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r9+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r17 = r4 >>> 7;
                case 0x26d20:
                    r2 = r2 ^ r3;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x26d28:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26d68;
                        continue;
                    }
                case 0x26d38:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 << 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r3 = r3 << 1;
                    r4 = r4 + -1;
                    r2 = r2 & 32768;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                        pc=0x26d28;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    pc=0x26cc8;
                    continue;
                case 0x26d68:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x26d70;
                    pc=0x27000;
                    run_27000(); return;
                case 0x26d70:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x26d38;
                    continue;
                case 0x26d7c:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r7;
                    r3 = r0 + 1;
                    r4 = r4 >>> 7;
                    r17 = r3 - r4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r9+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x26d20;
                    continue;
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 28;
                    r31=0x26e20;
                    pc=0x16600;
                    run_16600(); return;
                case 0x26e20:
                    r16 = r2 + r0;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=r2;
                    r31=0x26e38;
                    return;
                case 0x26e38:
                    r3 = r0 + 4;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r3;
                    r2 = r2 >>> 8;
                    r3 = 255 << 16;
                    r2 = r2 & r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x26e60;
                    pc=0x27000;
                    run_27000(); return;
                case 0x26e60:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 << 7;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + -7;
                    r2 = r0 | 32768;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = r16 + r0;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r5 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r0 + 255;
                    r3 = r5 >>> 24;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r16 = r4 + r0;
                        pc=0x27098;
                        continue;
                    }
                    r16 = r4 + r0;
                    r2 = r0 + 8;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r5 << 8;
                    r2 = r2 + -1;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r2;
                        pc=0x27064;
                        continue;
                    }
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r2;
                case 0x27040:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 << 8;
                    r2 = r2 + r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x27054:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x27064:
                    r4 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x2707c;
                    return;
                case 0x2707c:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r3 = r0 + 4;
                    r2 = r2 + 4;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    pc=0x27040;
                    continue;
                case 0x27098:
                    r6 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x27100;
                        continue;
                    }
                    r2 = r5 >>> 16;
                    r4 = r2 & 255;
                    r3 = (r4&0xffffffffL) < (144&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270d8;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 | 65280;
                    r2 = r2 + r3;
                    r3 = r0 + 8;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x270d0:
                    /* Next insn is delay slot */ 
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    pc=0x27054;
                    continue;
                case 0x270d8:
                    r2 = r6 + -1;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r4 << 9;
                    r3 = r5 << 8;
                    r2 = r2 + r4;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r3 = r0 + 7;
                    pc=0x270d0;
                    continue;
                case 0x27100:
                    r4 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r5 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x27118;
                    return;
                case 0x27118:
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r4 = r2 >>> 24;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r3 = r3 + 4;
                    r2 = (r4&0xffffffffL) < (144&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r3;
                        pc=0x27164;
                        continue;
                    }
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r0 | 65280;
                    r2 = r2 + r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r0 + 8;
                    r2 = r4 | 65280;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = r2 << 16;
                    r3 = r0 + 2;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    pc=0x27054;
                    continue;
                case 0x27164:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r4 << 9;
                    r2 = r2 + r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r3 = r0 + 7;
                    r2 = r0 + 4;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    pc=0x27054;
                    continue;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r29 = r29 + -56;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r5 = r4 + 1;
                    r20 = r4 + r0;
                    r4 = r19 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r23 = r6 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x27240;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27240:
                    r17 = r2 | 2;
                    r5 = r20 + r17;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r2 + r0;
                    r31=0x27254;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27254:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 | r4;
                        pc=0x272fc;
                        continue;
                    }
                    r17 = r2 | r4;
                    r2 = r0 + 2;
                    r22 = r0 + r0;
                case 0x2726c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x272ac;
                        continue;
                    }
                    r18 = r0 + r0;
                    r16 = r2 + r0;
                case 0x27278:
                    r5 = r20 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x27284;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27284:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    r3 = r17 & 256;
                    r2 = r2 & 511;
                    r2 = r2 | r3;
                    r16 = r16 + -1;
                    r3 = r18 << 1;
                    r17 = r2 | r4;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r3 | r4;
                        pc=0x27278;
                        continue;
                    }
                    r18 = r3 | r4;
                case 0x272ac:
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 + r22;
                        pc=0x272b8;
                        continue;
                    }
                    r18 = r18 + r22;
                    r18 = r0 - r18;
                case 0x272b8:
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r18;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x272d0;
                        continue;
                    }
                    r2 = r0 + r0;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x272d0;
                        continue;
                    }
                    r2 = r0 + 1;
                case 0x272d0:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x272fc:
                    r5 = r20 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x27308;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27308:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 | r4;
                        pc=0x27324;
                        continue;
                    }
                    r17 = r2 | r4;
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r22 = r0 + 4;
                    pc=0x2726c;
                    continue;
                case 0x27324:
                    r5 = r20 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x27330;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27330:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 | r4;
                        pc=0x2734c;
                        continue;
                    }
                    r17 = r2 | r4;
                    r2 = r0 + 6;
                    /* Next insn is delay slot */ 
                    r22 = r0 + 20;
                    pc=0x2726c;
                    continue;
                case 0x2734c:
                    r5 = r20 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x27358;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27358:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 | r4;
                        pc=0x27374;
                        continue;
                    }
                    r17 = r2 | r4;
                    r2 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r22 = r0 + 84;
                    pc=0x2726c;
                    continue;
                case 0x27374:
                    r5 = r20 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x27380;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27380:
                    r4 = r2 + r0;
                    r2 = r17 << 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 | r4;
                        pc=0x2739c;
                        continue;
                    }
                    r17 = r2 | r4;
                    r2 = r0 + 32;
                    /* Next insn is delay slot */ 
                    r22 = r0 + 4436;
                    pc=0x2726c;
                    continue;
                case 0x2739c:
                    r2 = r0 + 12;
                    /* Next insn is delay slot */ 
                    r22 = r0 + 340;
                    pc=0x2726c;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 512;
                    r31=0x27418;
                    pc=0x16600;
                    run_16600(); return;
                case 0x27418:
                    r16 = r2 + r0;
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 512;
                    r31=0x2742c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x2742c:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27614;
                    pc=0x16800;
                    run_16800(); return;
                case 0x27614:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r18 = r5 + r0;
                    r16 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 8;
                    r31=0x27830;
                    pc=0x16600;
                    run_16600(); return;
                case 0x27830:
                    r16 = r16 << (r18&0x1f);
                    r4 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    r31=0x27848;
                    pc=0x16600;
                    run_16600(); return;
                case 0x27848:
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    r6 = r16 + r0;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x2785c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x2785c:
                    r2 = r17 + r0;
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r20 = r5 + r0;
                    r21 = r6 + r0;
                    r18 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + 1;
                        pc=0x27a58;
                        continue;
                    }
                    r17 = r0 + 1;
                    r16 = r19 + r0;
                case 0x27a3c:
                    r5 = r18 + r17;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x27a48;
                    pc=0x26c00;
                    run_26c00(); return;
                case 0x27a48:
                    r16 = r16 + -1;
                    r3 = r17 << 1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r3 | r2;
                        pc=0x27a3c;
                        continue;
                    }
                    r17 = r3 | r2;
                case 0x27a58:
                    r2 = r0 + 1;
                    r2 = r2 << (r19&0x1f);
                    r17 = r17 - r2;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r17;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = r5 + r0;
                    r16 = r4 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27c28;
                    pc=0x16800;
                    run_16800(); return;
                case 0x27c28:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x27c34;
                    pc=0x16800;
                    run_16800(); return;
                case 0x27c34:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r23 = r6 + r0;
                    r21 = r0 + 32;
                case 0x27e3c:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r21 - r2;
                    r2 = r18 >>> (r2&0x1f);
                    r2 = r2 << 3;
                    r16 = r3 + r2;
                    addr=r16+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r16+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r19 = tmp;
                    r17 = r17 + r3;
                    r2 = r17 < 32 ? 1 : 0;
                    r6 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f6c;
                        continue;
                    }
                case 0x27e70:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e88;
                        continue;
                    }
                    r2 = r21 - r17;
                    r3 = r18 << (r3&0x1f);
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r3 | r2;
                case 0x27e88:
                    r2 = r19 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ea0;
                        continue;
                    }
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x27e3c;
                    continue;
                case 0x27ea0:
                    addr=r16+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r5 = tmp;
                    r22 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27eec;
                        continue;
                    }
                    r2 = r21 - r5;
                    r3 = r19 & 2;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r18 >>> (r2&0x1f);
                        pc=0x27f64;
                        continue;
                    }
                    r2 = r18 >>> (r2&0x1f);
                    r22 = r22 - r2;
                case 0x27ec4:
                    r17 = r17 + r5;
                    r2 = r17 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f30;
                        continue;
                    }
                case 0x27ed4:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27eec;
                        continue;
                    }
                    r2 = r0 - r17;
                    r3 = r18 << (r5&0x1f);
                    r2 = r6 >>> (r2&0x1f);
                    r18 = r3 | r2;
                case 0x27eec:
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r18;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r17;
                        pc=0x27f00;
                        continue;
                    }
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r17;
                    r2 = r19 & 1;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                case 0x27f00:
                    r2 = r22 + r0;
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x27f30:
                    r5 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r4 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r5 + 4;
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r5 + 8;
                    r18 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -32;
                    pc=r2;
                    r31=0x27f54;
                    return;
                case 0x27f54:
                    r6 = r2 + r0;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    pc=0x27ed4;
                    continue;
                case 0x27f64:
                    /* Next insn is delay slot */ 
                    r22 = r22 + r2;
                    pc=0x27ec4;
                    continue;
                case 0x27f6c:
                    r5 = readPages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff];
                    r4 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = r5 + 4;
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r5 + 8;
                    r18 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 + -32;
                    pc=r2;
                    r31=0x27f90;
                    return;
                case 0x27f90:
                    r6 = r2 + r0;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r3 = r17 + r0;
                    pc=0x27e70;
                    continue;
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r29 = r29 + -88;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r23;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r5;
                    r17 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r5 = r0 + 1024;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    r31=0x28050;
                    pc=0x16600;
                    run_16600(); return;
                case 0x28050:
                    r23 = r0 + -1;
                    r16 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r21 = r2 + r0;
                        pc=0x28424;
                        run_28400(); return;
                    }
                    r21 = r2 + r0;
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1024;
                    r31=0x28070;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x28070:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r7 = r0 + r0;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28140;
                        continue;
                    }
                    r6 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x28090:
                    r5 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = r23 < r5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x280d8;
                        continue;
                    }
                    r4 = r23 + 1;
                    r3 = r5 + 1;
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x280d4;
                        continue;
                    }
                    r2 = r4 << 2;
                    r2 = r2 + r21;
                    r4 = r3 - r4;
                case 0x280c4:
                    r4 = r4 + -1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x280c4;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x280d4:
                    r23 = r5 + r0;
                case 0x280d8:
                    r2 = r5 << 2;
                    r2 = r2 + r21;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r3 = r5 + r4;
                    r2 = r3 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28114;
                        continue;
                    }
                    r2 = r5 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 + r0;
                        pc=0x28124;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x28114:
                    r2 = r16 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28124;
                        continue;
                    }
                    r16 = r3 + r0;
                case 0x28124:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = r6 + 12;
                    r2 = r7 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28090;
                        continue;
                    }
                case 0x28140:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = r0 + -1;
                    r7 = r7 + -14292;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x2815c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2815c:
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r22 = r3 << (r16&0x1f);
                    r31=0x28174;
                    pc=0x16600;
                    run_16600(); return;
                case 0x28174:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r16;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r22 << 3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r31=0x2818c;
                    pc=0x16600;
                    run_16600(); return;
                case 0x2818c:
                    r15 = r2 + r0;
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r15;
                    if(r23 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + 1;
                        pc=0x2822c;
                        run_28200(); return;
                    }
                    r18 = r0 + 1;
                    r3 = r0 < r17 ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    r16 = r16 + -1;
                    r20 = r21 + r0;
                case 0x281b4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r11 = r0 + r0;
                    r2 = r3 + r2;
                    r3 = r2 << 1;
                    r2 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28218;
                        run_28200(); return;
                    }
                    r2 = r17 + -1;
                    r10 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r17 + -3;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r30 = r17 + -2;
                    r7 = r10 + r0;
                case 0x281f4:
                    r5 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    if(r5 == r18) {
                        /* Next insn is delay slot */ 
                        pc=0x28274;
                        run_28200(); return;
                    }
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                case 0x28204:
                    r11 = r11 + 1;
                    r2 = r11 < r17 ? 1 : 0;
                    r10 = r10 + 12;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 12;
                        pc=0x281f4;
                        run_28000(); return;
                    }
                    r7 = r7 + 12;
                case 0x28218:
                    r18 = r18 + 1;
                    r2 = r23 < r18 ? 1 : 0;
                    r16 = r16 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r20 + 4;
                        pc=0x281b4;
                        run_28000(); return;
                    }
                    r20 = r20 + 4;
                case 0x2822c:
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x28240;
                    pc=0x16800;
                    run_16800(); return;
                case 0x28240:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x28244:
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r23 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x28274:
                    r19 = r3 + 1;
                    r9 = r19 << (r16&0x1f);
                    r2 = r22 < r9 ? 1 : 0;
                    r6 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    r4 = r3 << (r16&0x1f);
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r14 = r0 + r0;
                        pc=0x283bc;
                        continue;
                    }
                    r14 = r0 + r0;
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283ac;
                        continue;
                    }
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r11 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x283a4;
                        continue;
                    }
                case 0x282b8:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r11 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2839c;
                        continue;
                    }
                case 0x282c8:
                    r8 = r5 + r6;
                    r2 = r8 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2831c;
                        continue;
                    }
                    r2 = r4 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28314;
                        continue;
                    }
                    r2 = r4 << 3;
                    r8 = r10 + r0;
                    r4 = r9 - r4;
                    r3 = r2 + r15;
                case 0x282f4:
                    r2 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    addr=r3+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r5&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r3+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r14&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x282f4;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x28314:
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x28204;
                    continue;
                case 0x2831c:
                    r2 = r4 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28314;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = r3 << (r6&0x1f);
                    r25 = r16 - r6;
                    r24 = r14 & 2;
                    r13 = r2 + -1;
                    r12 = r10 + r0;
                case 0x28340:
                    r2 = r4 >> (r25&0x1f);
                    if(r24 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r2 & r13;
                        pc=0x28388;
                        continue;
                    }
                    r6 = r2 & r13;
                    r2 = readPages[(r12+8)>>>12][((r12+8)>>>2)&0x3ff];
                    r5 = r4 << 3;
                    r3 = r5 + r15;
                    r2 = r2 - r6;
                case 0x2835c:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = r4 + 1;
                    r2 = r5 + r15;
                    addr=r2+4;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r8&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+5;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r2+6;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r14&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r4 < r9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28340;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28314;
                    continue;
                case 0x28388:
                    r2 = readPages[(r12+8)>>>12][((r12+8)>>>2)&0x3ff];
                    r5 = r4 << 3;
                    r3 = r5 + r15;
                    /* Next insn is delay slot */ 
                    r2 = r2 + r6;
                    pc=0x2835c;
                    continue;
                case 0x2839c:
                    /* Next insn is delay slot */ 
                    r14 = r14 | 2;
                    pc=0x282c8;
                    continue;
                case 0x283a4:
                    /* Next insn is delay slot */ 
                    r14 = r0 + 1;
                    pc=0x282b8;
                    continue;
                case 0x283ac:
                    if(r11 != r30) {
                        /* Next insn is delay slot */ 
                        pc=0x282c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2839c;
                    continue;
                case 0x283bc:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r6 = r0 + -1;
                    r7 = r7 + -14252;
                    r5 = r0 + 3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r9;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r22;
                    r31=0x283dc;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x283dc:
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x283f4;
                    pc=0x16800;
                    run_16800(); return;
                case 0x283f4:
                    r3 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    /* Next insn is delay slot */ 
                    r31=0x28408;
                    pc=0x16800;
                    run_16800(); return;
                case 0x28408:
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2841c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x2841c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x28244;
                    run_28200(); return;
                case 0x28424:
                    r4 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r7 = 4 << 16;
                    r5 = r0 + 3;
                    r6 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r7 = r7 + -14200;
                    r31=0x2843c;
                    pc=0x15c00;
                    run_15c00(); return;
                case 0x2843c:
                    /* Next insn is delay slot */ 
                    pc=0x2841c;
                    continue;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 20;
                    r31=0x28620;
                    pc=0x16600;
                    run_16600(); return;
                case 0x28620:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2865c;
                        continue;
                    }
                    r16 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    pc=r2;
                    r31=0x28640;
                    return;
                case 0x28640:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    pc=r2;
                    r31=0x28654;
                    return;
                case 0x28654:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r17;
                case 0x2865c:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = r5 & 7;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2884c;
                        continue;
                    }
                    r2 = r0 + 8;
                    r4 = r2 - r4;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r5 + r4;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r4 = r0 - r5;
                    r2 = r2 >>> (r4&0x1f);
                    r3 = r3 | r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r5;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x2884c:
                    r2 = r5 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28868;
                        continue;
                    }
                case 0x28858:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x28868:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r5 + 4;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r5 + 8;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x28890;
                    return;
                case 0x28890:
                    r4 = r2 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 + -32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                        pc=0x28858;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 << (r2&0x1f);
                    r2 = r0 - r2;
                    r2 = r4 >>> (r2&0x1f);
                    r3 = r3 | r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x28858;
                    continue;
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r3 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r16 = r4 + r0;
                    r2 = r5 & r2;
                    r17 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r5 = r5 & 3;
                    r4 = r3 + r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = r5 << 3;
                    r3 = r2 + r5;
                    r2 = r3 < 32 ? 1 : 0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                        pc=0x28a58;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = r4 + 4;
                    r3 = r3 + -32;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                case 0x28a58:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x28a6c;
                    return;
                case 0x28a6c:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 4;
                    pc=r2;
                    r31=0x28a84;
                    return;
                case 0x28a84:
                    r4 = r2 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28ab8;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 << (r2&0x1f);
                    r2 = r0 - r2;
                    r2 = r4 >>> (r2&0x1f);
                    r3 = r3 | r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x28ab8:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 >> 3;
                    /* Next insn is delay slot */ 
                    r2 = r2 + r3;
                    pc=r31;
                    return;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r3 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = r0 + 32;
                    r2 = r17 - r5;
                    r3 = r3 + r5;
                    r18 = r4 >>> (r2&0x1f);
                    r2 = r3 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                        pc=0x28e74;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = r4 << (r5&0x1f);
                    r4 = r17 - r3;
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 >>> (r4&0x1f);
                    r2 = r2 | r3;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x28e58:
                    r2 = r18 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x28e74:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r4 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r5 + 4;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r3 + -32;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 8;
                    pc=r2;
                    r31=0x28ea0;
                    return;
                case 0x28ea0:
                    r4 = r2 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28e58;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 << (r2&0x1f);
                    r2 = r17 - r2;
                    r2 = r4 >>> (r2&0x1f);
                    r3 = r3 | r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x28e58;
                    continue;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r5 + r0;
                        pc=0x29038;
                        continue;
                    }
                    r16 = r5 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2902c;
                    pc=0x16800;
                    run_16800(); return;
                case 0x2902c:
                    r4 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x29038;
                    pc=0x16800;
                    run_16800(); return;
                case 0x29038:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r29 = r29 + -24;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29294;
                        continue;
                    }
                case 0x29224:
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r3 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29260;
                        continue;
                    }
                case 0x29238:
                    r2 = r3 << 2;
                    r2 = r2 + r4;
                    r3 = r3 + 1;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x29250:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x29260:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 268;
                    r31=0x29268;
                    pc=0x2ce00;
                    run_2ce00(); return;
                case 0x29268:
                    r4 = r2 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -1;
                        pc=0x29250;
                        continue;
                    }
                    r2 = r0 + -1;
                    r3 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r3+328)>>>12][((r3+328)>>>2)&0x3ff];
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r0;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+328)>>>12][((r3+328)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x29238;
                    continue;
                case 0x29294:
                    r4 = r2 + 332;
                    /* Next insn is delay slot */ 
                    writePages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff] = r4;
                    pc=0x29224;
                    continue;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    r6 = r0 + 10;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29418;
                    pc=0x30a00;
                    run_30a00(); return;
                case 0x29418:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r4+328)>>>12][((r4+328)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x296b0;
                        continue;
                    }
                    r21 = r0 + 1;
                case 0x2963c:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        r18 = r21 << (r16&0x1f);
                        pc=0x296f0;
                        continue;
                    }
                    r18 = r21 << (r16&0x1f);
                case 0x29650:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29698;
                        continue;
                    }
                    r2 = r16 << 2;
                    r2 = r2 + r19;
                    r17 = r2 + 8;
                case 0x29664:
                    r2 = readPages[(r19+264)>>>12][((r19+264)>>>2)&0x3ff];
                    r2 = r2 & r18;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x296d8;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    pc=r2;
                    r31=0x29688;
                    return;
                case 0x29688:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    if(r16 >= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 >> 1;
                        pc=0x29664;
                        continue;
                    }
                    r18 = r18 >> 1;
                case 0x29698:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2963c;
                        continue;
                    }
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                case 0x296b0:
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x296c8;
                        continue;
                    }
                case 0x296c0:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x296c8;
                    pc=0x33a00;
                    run_33a00(); return;
                case 0x296c8:
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x296d0;
                    return;
                case 0x296d0:
                    /* Next insn is delay slot */ 
                    pc=0x296c0;
                    continue;
                case 0x296d8:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x296e8;
                    return;
                case 0x296e8:
                    /* Next insn is delay slot */ 
                    pc=0x29688;
                    continue;
                case 0x296f0:
                    /* Next insn is delay slot */ 
                    r18 = r0 + r0;
                    pc=0x29650;
                    continue;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x298d0;
                        continue;
                    }
                    r4 = r0 + r0;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2983c;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2983c:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29940;
                        continue;
                    }
                case 0x2984c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x298d0;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x29930;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x29868:
                    r2 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29914;
                        continue;
                    }
                case 0x29878:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298fc;
                        continue;
                    }
                case 0x2988c:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298b8;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x298b4;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x298b4;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x298b4:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x298b8:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x298e8;
                        continue;
                    }
                case 0x298c8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                case 0x298d0:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x298e8:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x298f4;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x298f4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    pc=0x298c8;
                    continue;
                case 0x298fc:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2990c;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2990c:
                    /* Next insn is delay slot */ 
                    pc=0x2988c;
                    continue;
                case 0x29914:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x29920;
                    return;
                case 0x29920:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29878;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r17 = r0 + -1;
                    pc=0x29878;
                    continue;
                case 0x29930:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x29938;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x29938:
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    pc=0x29868;
                    continue;
                case 0x29940:
                    /* Next insn is delay slot */ 
                    r31=0x29948;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x29948:
                    /* Next insn is delay slot */ 
                    pc=0x2984c;
                    continue;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29b08;
                        continue;
                    }
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a40;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r18+84)>>>12][((r18+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x29a40:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29af8;
                        continue;
                    }
                case 0x29a50:
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ac4;
                        continue;
                    }
                    r17 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ac4;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    r16 = r2 - r17;
                    r2 = r3 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x29a94;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                case 0x29a94:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r3;
                        pc=0x29ac4;
                        continue;
                    }
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r3;
                case 0x29a9c:
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    r4 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    pc=r2;
                    r31=0x29ab0;
                    return;
                case 0x29ab0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ae0;
                        continue;
                    }
                    r16 = r16 - r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + r2;
                        pc=0x29a9c;
                        continue;
                    }
                    r17 = r17 + r2;
                case 0x29ac4:
                    r2 = r0 + r0;
                case 0x29ac8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x29ae0:
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x29ac8;
                    continue;
                case 0x29af8:
                    /* Next insn is delay slot */ 
                    r31=0x29b00;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x29b00:
                    /* Next insn is delay slot */ 
                    pc=0x29a50;
                    continue;
                case 0x29b08:
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = 3 << 16;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -26112;
                    r31=0x29b18;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x29b18:
                    /* Next insn is delay slot */ 
                    pc=0x29ac8;
                    continue;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r2 = 3 << 16;
                    r3 = 3 << 16;
                    r2 = r2 + -3072;
                    r3 = r3 + -2560;
                    writePages[(r4+32)>>>12][((r4+32)>>>2)&0x3ff] = r2;
                    writePages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff] = r3;
                    r2 = 3 << 16;
                    r3 = 3 << 16;
                    r2 = r2 + -2048;
                    r3 = r3 + -1536;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    writePages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff] = r0;
                    writePages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff] = r4;
                    writePages[(r4+40)>>>12][((r4+40)>>>2)&0x3ff] = r2;
                    writePages[(r4+44)>>>12][((r4+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff] = r7;
                    pc=r31;
                    return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r2 = r5 << 1;
                    r2 = r2 + r5;
                    r2 = r2 << 3;
                    r29 = r29 + -32;
                    r2 = r2 - r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r2 << 2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29e38;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x29e38:
                    r16 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x29e64;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = r16 + 12;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x29e60;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x29e60:
                    r2 = r16 + r0;
                case 0x29e64:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0ec;
                        continue;
                    }
                case 0x2a020:
                    r16 = r17 + 604;
                case 0x2a024:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a05c;
                        continue;
                    }
                    r3 = r5 + 12;
                case 0x2a03c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0a8;
                        continue;
                    }
                    r4 = r4 + -1;
                    r5 = r5 + 92;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 92;
                        pc=0x2a03c;
                        continue;
                    }
                    r3 = r3 + 92;
                case 0x2a05c:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a074;
                        continue;
                    }
                case 0x2a06c:
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    pc=0x2a024;
                    continue;
                case 0x2a074:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x2a080;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x2a080:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x2a06c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 12;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x2a094:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2a0a8:
                    r2 = r0 + 1;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r0;
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r0;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r0;
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r0;
                    writePages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff] = r0;
                    writePages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff] = r0;
                    writePages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff] = r0;
                    writePages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff] = r0;
                    writePages[(r5+68)>>>12][((r5+68)>>>2)&0x3ff] = r0;
                    writePages[(r5+72)>>>12][((r5+72)>>>2)&0x3ff] = r0;
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r2 = r5 + r0;
                    pc=0x2a094;
                    continue;
                case 0x2a0ec:
                    /* Next insn is delay slot */ 
                    r31=0x2a0f4;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2a0f4:
                    /* Next insn is delay slot */ 
                    pc=0x2a020;
                    continue;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    r5 = 3 << 16;
                    r29 = r29 + -24;
                    r5 = r5 + -26112;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a218;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2a218:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    r2 = 3 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + -24064;
                    r3 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r3;
                    r2 = r0 + 3;
                    r3 = r4 + 616;
                    r16 = r4 + r0;
                    writePages[(r4+608)>>>12][((r4+608)>>>2)&0x3ff] = r2;
                    writePages[(r4+612)>>>12][((r4+612)>>>2)&0x3ff] = r3;
                    writePages[(r4+604)>>>12][((r4+604)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x2a44c;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a44c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x2a460;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a460:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x2a474;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2a474:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r16 = r4 + r0;
                    r31=0x2a628;
                    pc=0x35c00;
                    run_35c00(); return;
                case 0x2a628:
                    r17 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2a6ac;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2a63c;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x2a63c:
                    r16 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2a6ac;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 438;
                    r31=0x2a65c;
                    pc=0x33a10;
                    run_33a00(); return;
                case 0x2a65c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6dc;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 3 << 16;
                    r2 = r2 + -3072;
                    r3 = 3 << 16;
                    r3 = r3 + -2560;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 3 << 16;
                    r2 = r2 + -2048;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r3;
                    r3 = 3 << 16;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r3 = r3 + -1536;
                    r2 = r17 & 256;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r3;
                        pc=0x2a6c4;
                        continue;
                    }
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r3;
                case 0x2a6a8:
                    r2 = r16 + r0;
                case 0x2a6ac:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x2a6c4:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x2a6d4;
                    pc=0x2b800;
                    run_2b800(); return;
                case 0x2a6d4:
                    /* Next insn is delay slot */ 
                    pc=0x2a6a8;
                    continue;
                case 0x2a6dc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a6ac;
                    continue;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2a820;
                    pc=0x2a600;
                    run_2a600(); return;
                case 0x2a820:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -24;
                    r6 = r29 + 32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2aa1c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x2aa1c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r3 = r2 + -1;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r3;
                        pc=0x2ac4c;
                        continue;
                    }
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                case 0x2ac38:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x2ac3c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2ac4c:
                    r2 = readPages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac90;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r0 + 10;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r4 + 1;
                    pc=0x2ac38;
                    continue;
                case 0x2ac8c:
                    r4 = r0 + 10;
                case 0x2ac90:
                    /* Next insn is delay slot */ 
                    r31=0x2ac98;
                    pc=0x33600;
                    run_33600(); return;
                case 0x2ac98:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x2ac3c;
                    continue;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r16 = r5 + r0;
                    r31=0x2ae18;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x2ae18:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    r2 = r29 + 32;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x2ae3c;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x2ae3c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    { long hilo = (long)(r6) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r21 = r6 + r0;
                    r17 = lo;
                    r19 = r7 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2b0d8;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b120;
                        continue;
                    }
                case 0x2b050:
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r22 = r17 + r0;
                    r18 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r6 + r0;
                        pc=0x2b0ac;
                        continue;
                    }
                    r16 = r6 + r0;
                case 0x2b064:
                    r5 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x2b074;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x2b074:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 + r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r3;
                    r18 = r18 + r16;
                    /* Next insn is delay slot */ 
                    r17 = r17 - r16;
                    r31=0x2b090;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x2b090:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b100;
                        continue;
                    }
                    r16 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b064;
                        continue;
                    }
                case 0x2b0ac:
                    r5 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x2b0bc;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x2b0bc:
                    r3 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r3 - r17;
                    r2 = r2 + r17;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r21 + r0;
                case 0x2b0d8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x2b100:
                    r2 = r22 - r17;
                    if(r20!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r20 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r20 & 0xffffffffL));
                    }
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b114;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x2b114:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x2b0d8;
                    continue;
                case 0x2b120:
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x2b050;
                    continue;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b34c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x2b228;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x2b228:
                    r9 = r16 + -8;
                    r5 = readPages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r7 = r5 & r2;
                    r4 = r9 + r7;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r12 = 4 << 16;
                    r2 = r0 + -4;
                    r10 = r12 + -11648;
                    r8 = r3 & r2;
                    r2 = readPages[(r10+8)>>>12][((r10+8)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b49c;
                        run_2b400(); return;
                    }
                    r2 = r5 & 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r0 + r0;
                        pc=0x2b29c;
                        continue;
                    }
                    r11 = r0 + r0;
                    r5 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r2 = r10 + 8;
                    r9 = r9 - r5;
                    r3 = readPages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff];
                    r7 = r7 + r5;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b494;
                        run_2b400(); return;
                    }
                    r6 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                case 0x2b29c:
                    r3 = r4 + r8;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2e0;
                        continue;
                    }
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + r8;
                        pc=0x2b488;
                        run_2b400(); return;
                    }
                    r7 = r7 + r8;
                    r2 = 4 << 16;
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r2 + -11640;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b470;
                        run_2b400(); return;
                    }
                case 0x2b2d0:
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                case 0x2b2e0:
                    r2 = r7 | 1;
                    r3 = r9 + r7;
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r7;
                        pc=0x2b344;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r7;
                    r2 = (r7&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b368;
                        continue;
                    }
                    r8 = r7 >>> 3;
                    r5 = r12 + -11648;
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r4 = r8 + r0;
                        pc=0x2b360;
                        continue;
                    }
                    r4 = r8 + r0;
                case 0x2b310:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = r4 >> 2;
                    r3 = r0 + 1;
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    r3 = r8 << 3;
                    r6 = r3 + r5;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                case 0x2b334:
                    writePages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff] = r6;
                    writePages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff] = r5;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r9;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r9;
                case 0x2b344:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x2b34c;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2b34c:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2b360:
                    /* Next insn is delay slot */ 
                    r4 = r8 + 3;
                    pc=0x2b310;
                    continue;
                case 0x2b368:
                    r3 = r7 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r7 >>> 3;
                        pc=0x2b388;
                        continue;
                    }
                    r8 = r7 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b41c;
                        run_2b400(); return;
                    }
                    r2 = r7 >>> 6;
                    r8 = r2 + 56;
                case 0x2b388:
                    r2 = r8 << 3;
                    r10 = r12 + -11648;
                    r6 = r2 + r10;
                    r5 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3f0;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3e4;
                        continue;
                    }
                case 0x2b3bc:
                    r5 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3e4;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3bc;
                        continue;
                    }
                case 0x2b3e4:
                    r6 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b334;
                    continue;
                case 0x2b3f0:
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r8 + r0;
                        pc=0x2b414;
                        run_2b400(); return;
                    }
                    r2 = r8 + r0;
                case 0x2b3f8:
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r2 = readPages[(r10+4)>>>12][((r10+4)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    writePages[(r10+4)>>>12][((r10+4)>>>2)&0x3ff] = r2;
                    pc=0x2b334;
                    run_2b200(); return;
                case 0x2b414:
                    /* Next insn is delay slot */ 
                    r2 = r8 + 3;
                    pc=0x2b3f8;
                    run_2b200(); return;
                case 0x2b41c:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + 91;
                        pc=0x2b388;
                        run_2b200(); return;
                    }
                    r8 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b440;
                        continue;
                    }
                    r2 = r7 >>> 12;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 110;
                    pc=0x2b388;
                    run_2b200(); return;
                case 0x2b440:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b458;
                        continue;
                    }
                    r2 = r7 >>> 15;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 119;
                    pc=0x2b388;
                    run_2b200(); return;
                case 0x2b458:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 126;
                        pc=0x2b388;
                        run_2b200(); return;
                    }
                    r8 = r0 + 126;
                    r2 = r7 >>> 18;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 124;
                    pc=0x2b388;
                    run_2b200(); return;
                case 0x2b470:
                    r11 = r0 + 1;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    writePages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff] = r3;
                    pc=0x2b2e0;
                    run_2b200(); return;
                case 0x2b488:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b2d0;
                    run_2b200(); return;
                case 0x2b494:
                    /* Next insn is delay slot */ 
                    r11 = r0 + 1;
                    pc=0x2b29c;
                    run_2b200(); return;
                case 0x2b49c:
                    r2 = r5 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + r8;
                        pc=0x2b4cc;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r9 = r9 - r5;
                    r6 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    r7 = r7 + r5;
                    r5 = readPages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                case 0x2b4cc:
                    r2 = r7 | 1;
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32548)>>>12][((r28+-32548)>>>2)&0x3ff];
                    writePages[(r10+8)>>>12][((r10+8)>>>2)&0x3ff] = r9;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b344;
                        run_2b200(); return;
                    }
                    r5 = readPages[(r28+-32376)>>>12][((r28+-32376)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x2b4f4;
                    pc=0x2b600;
                    run_2b600(); return;
                case 0x2b4f4:
                    /* Next insn is delay slot */ 
                    pc=0x2b344;
                    run_2b200(); return;
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2b62c;
                    pc=0x33bd0;
                    run_33a00(); return;
                case 0x2b62c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    r31=0x2b638;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x2b638:
                    r2 = 4 << 16;
                    r20 = r2 + -11648;
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b658;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x2b658:
                    r18 = r4 & r2;
                    r16 = r18 - r16;
                    r16 = r16 + r17;
                    r16 = r16 + -17;
                    if(r17!=0) {
                    hi = (int)((r16 & 0xffffffffL) % (r17 & 0xffffffffL)); lo = (int)((r16 & 0xffffffffL) / (r17 & 0xffffffffL));
                    }
                    r16 = lo;
                    r16 = r16 + -1;
                    { long hilo = (long)(r16) * ((long)r17); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r16 = lo;
                    r17 = r16 < r17 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6b0;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x2b698;
                    pc=0x33b10;
                    run_33a00(); return;
                case 0x2b698:
                    r3 = r2 + r0;
                    r2 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6dc;
                        continue;
                    }
                case 0x2b6b0:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x2b6b8;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2b6b8:
                    r2 = r0 + r0;
                case 0x2b6bc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x2b6dc:
                    r5 = r0 - r16;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x2b6e8;
                    pc=0x33b10;
                    run_33a00(); return;
                case 0x2b6e8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b724;
                        continue;
                    }
                    r4 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r18 - r16;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r3 = 4 << 16;
                    r2 = readPages[(r3+-10168)>>>12][((r3+-10168)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    /* Next insn is delay slot */ 
                    writePages[(r3+-10168)>>>12][((r3+-10168)>>>2)&0x3ff] = r2;
                    r31=0x2b71c;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2b71c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=0x2b6bc;
                    continue;
                case 0x2b724:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x2b730;
                    pc=0x33b10;
                    run_33a00(); return;
                case 0x2b730:
                    r5 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    r18 = r2 - r5;
                    r2 = r18 < 16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6b0;
                        continue;
                    }
                    r2 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    r4 = r18 | 1;
                    r2 = r3 - r2;
                    r3 = 4 << 16;
                    writePages[(r3+-10168)>>>12][((r3+-10168)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                    pc=0x2b6b0;
                    continue;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r22 = r5 + r0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x2b84c;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff] = r2;
                    r17 = r2 + r0;
                case 0x2b84c:
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bcf0;
                        run_2bc00(); return;
                    }
                case 0x2b85c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + 264;
                    r2 = r2 & 264;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2bce0;
                        run_2bc00(); return;
                    }
                case 0x2b870:
                    r20 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r0 + 29;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8a8;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc20;
                        run_2bc00(); return;
                    }
                    r2 = r18 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc10;
                        run_2bc00(); return;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8e0;
                        continue;
                    }
                case 0x2b8a4:
                    r2 = r0 + 22;
                case 0x2b8a8:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x2b8ac:
                    r3 = r0 + -1;
                case 0x2b8b0:
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x2b8e0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r23 = r0 + r0;
                case 0x2b8e8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc00;
                        run_2bc00(); return;
                    }
                case 0x2b8f0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r3 = r4 & 65535;
                    r2 = r3 & 2074;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        continue;
                    }
                    r2 = r3 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba00;
                        run_2ba00(); return;
                    }
                    r2 = 3 << 16;
                    r2 = r2 + -2048;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9a8;
                        continue;
                    }
                case 0x2b924:
                    r2 = r4 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2b92c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2b934;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b934:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8ac;
                        continue;
                    }
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    pc=r20;
                    r31=0x2b94c;
                    return;
                case 0x2b94c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8ac;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b984;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b980;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2b980;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2b980:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2b984:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                case 0x2b99c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2b9a0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x2b8b0;
                    continue;
                case 0x2b9a8:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b924;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x2b9c4;
                    pc=0x33b50;
                    run_33a00(); return;
                case 0x2b9c4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9e0;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9ec;
                        continue;
                    }
                case 0x2b9e0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2b924;
                    continue;
                case 0x2b9ec:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + 1024;
                    r2 = r2 | 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r22 + r0;
                        pc=0x2bbd8;
                        continue;
                    }
                    r21 = r22 + r0;
                case 0x2ba08:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bbc4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = r4 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb98;
                        continue;
                    }
                    r19 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x2ba28:
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 - r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb7c;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r2;
                case 0x2ba48:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb7c;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r19 = r19 + r6;
                    r17 = r2 - r3;
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r17;
                    r17 = r17 + r2;
                case 0x2ba6c:
                    r2 = r4 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bad4;
                        continue;
                    }
                    r2 = r21 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bad4;
                        continue;
                    }
                    r2 = r19 + r17;
                    r2 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bad4;
                        continue;
                    }
                    r2 = r21 - r19;
                    r3 = r3 + r2;
                    r2 = r17 - r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x2bacc;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bac8;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2bac4;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2bac4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                case 0x2bac8:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2bacc:
                    /* Next insn is delay slot */ 
                    r2 = r4 & 65503;
                    pc=0x2b99c;
                    run_2b800(); return;
                case 0x2bad4:
                    r2 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    r19 = r21 & r2;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=r20;
                    r31=0x2baf0;
                    return;
                case 0x2baf0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        run_2b800(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x2bb2c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb28;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2bb28;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2bb28:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2bb2c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = r21 - r19;
                    r2 = r2 & 65503;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r16+12;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2b9a0;
                        run_2b800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2bb48;
                    pc=0x2f000;
                    run_2f000(); return;
                case 0x2bb48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        run_2b800(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        run_2b800(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 - r17;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    pc=0x2b9a0;
                    run_2b800(); return;
                case 0x2bb7c:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r2 - r3;
                    r19 = r19 - r17;
                    /* Next insn is delay slot */ 
                    r17 = r17 + r6;
                    pc=0x2ba6c;
                    continue;
                case 0x2bb98:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    pc=r20;
                    r31=0x2bba8;
                    return;
                case 0x2bba8:
                    r19 = r2 + r0;
                    r2 = r0 + -1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        run_2b800(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2ba28;
                    continue;
                case 0x2bbc4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2ba48;
                    continue;
                case 0x2bbd8:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x2bbe8;
                    pc=0x33b50;
                    run_33a00(); return;
                case 0x2bbe8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b92c;
                        run_2b800(); return;
                    }
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r21 = r2 + r22;
                    pc=0x2ba08;
                    continue;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2bc08;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x2bc08:
                    /* Next insn is delay slot */ 
                    pc=0x2b8f0;
                    run_2b800(); return;
                case 0x2bc10:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b8e0;
                        run_2b800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2b8a4;
                    run_2b800(); return;
                case 0x2bc20:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2bc28;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2bc28:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = r4 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bcb4;
                        continue;
                    }
                    r19 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x2bc40:
                    r3 = r4 & 65535;
                    r2 = r3 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc84;
                        continue;
                    }
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 - r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc70;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r2;
                case 0x2bc70:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x2bc74:
                    r22 = r22 + r19;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r0 + 1;
                    pc=0x2b8e8;
                    run_2b800(); return;
                case 0x2bc84:
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc70;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc70;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    r19 = r19 + r2;
                    pc=0x2bc74;
                    continue;
                case 0x2bcb4:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    pc=r20;
                    r31=0x2bcc4;
                    return;
                case 0x2bcc4:
                    r19 = r2 + r0;
                    r2 = r0 + -1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2b8b0;
                        run_2b800(); return;
                    }
                    r3 = r0 + -1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2bc40;
                    continue;
                case 0x2bce0:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2bce8;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2bce8:
                    /* Next insn is delay slot */ 
                    pc=0x2b870;
                    run_2b800(); return;
                case 0x2bcf0:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x2bcf8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2bcf8:
                    r17 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2b85c;
                    run_2b800(); return;
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r21 = r5 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x2bef4;
                        continue;
                    }
                    r3 = r0 + r0;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be60;
                        continue;
                    }
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2be78;
                        continue;
                    }
                case 0x2be60:
                    /* Next insn is delay slot */ 
                    r31=0x2be68;
                    pc=0x33800;
                    run_33800(); return;
                case 0x2be68:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2bef4;
                        continue;
                    }
                    r3 = r0 + -1;
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x2be78:
                    r4 = r3 & 65535;
                    r2 = r4 & 2;
                    r18 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x2bf38;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x2be8c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2beac;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x2be98:
                    r17 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 8;
                        pc=0x2be98;
                        continue;
                    }
                    r2 = r2 + 8;
                case 0x2beac:
                    r2 = (r17&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r17 + r0;
                        pc=0x2bebc;
                        continue;
                    }
                    r6 = r17 + r0;
                    r6 = r0 + 1024;
                case 0x2bebc:
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x2becc;
                    return;
                case 0x2becc:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2bf24;
                        continue;
                    }
                    r16 = r2 + r0;
                    r19 = r19 + r2;
                    r17 = r17 - r2;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r2 = r2 - r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x2be8c;
                        continue;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                case 0x2bef0:
                    r3 = r0 + r0;
                case 0x2bef4:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x2bf24:
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1;
                    r2 = r2 | 64;
                    /* Next insn is delay slot */ 
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2bef4;
                    continue;
                case 0x2bf38:
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r18 + r0;
                        pc=0x2c0a8;
                        run_2c000(); return;
                    }
                    r22 = r18 + r0;
                    r22 = r0 + r0;
                case 0x2bf48:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf6c;
                        continue;
                    }
                    r22 = r0 + r0;
                    r2 = r18 + r0;
                case 0x2bf58:
                    r17 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 8;
                        pc=0x2bf58;
                        continue;
                    }
                    r2 = r2 + 8;
                case 0x2bf6c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c080;
                        run_2c000(); return;
                    }
                case 0x2bf74:
                    r2 = ((r17 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r23 + r0;
                        pc=0x2bf84;
                        continue;
                    }
                    r3 = r23 + r0;
                    r3 = r17 + r0;
                case 0x2bf84:
                    r2 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r5 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r16 = r2 + r5;
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfb4;
                        continue;
                    }
                    r2 = r16 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c050;
                        run_2c000(); return;
                    }
                case 0x2bfb4:
                    r2 = r3 < r5 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r5 + r0;
                        pc=0x2c020;
                        run_2c000(); return;
                    }
                    r16 = r5 + r0;
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x2bfd4;
                    return;
                case 0x2bfd4:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2bf24;
                        continue;
                    }
                    r16 = r2 + r0;
                case 0x2bfdc:
                    r23 = r23 - r16;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c008;
                        run_2c000(); return;
                    }
                case 0x2bfe8:
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r19 = r19 + r16;
                    r2 = r2 - r16;
                    r17 = r17 - r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x2bf48;
                        continue;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    /* Next insn is delay slot */ 
                    pc=0x2bef0;
                    run_2be00(); return;
                case 0x2c008:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x2c010;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2c010:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf24;
                        run_2be00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + r0;
                    pc=0x2bfe8;
                    run_2be00(); return;
                case 0x2c020:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r3 + r0;
                    r31=0x2c034;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2c034:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r3 = r3 - r16;
                    r2 = r2 + r16;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    pc=0x2bfdc;
                    run_2be00(); return;
                case 0x2c050:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x2c05c;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2c05c:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = r3 + r16;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r31=0x2c070;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2c070:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfdc;
                        run_2be00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2bf24;
                    run_2be00(); return;
                case 0x2c080:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x2c090;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x2c090:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r17 + 1;
                        pc=0x2c0a0;
                        continue;
                    }
                    r23 = r17 + 1;
                    r2 = r2 - r19;
                    r23 = r2 + 1;
                case 0x2c0a0:
                    /* Next insn is delay slot */ 
                    r22 = r0 + 1;
                    pc=0x2bf74;
                    run_2be00(); return;
                case 0x2c0a8:
                    r17 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 + 8;
                        pc=0x2c0a8;
                        continue;
                    }
                    r22 = r22 + 8;
                case 0x2c0b8:
                    r3 = r3 & 65535;
                    r2 = r3 & 512;
                    r16 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c18c;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0e4;
                        continue;
                    }
                    r2 = r3 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c14c;
                        continue;
                    }
                case 0x2c0e4:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0f4;
                        continue;
                    }
                    r16 = r17 + r0;
                case 0x2c0f4:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x2c104;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2c104:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r3 = r3 - r16;
                    r2 = r2 + r16;
                case 0x2c114:
                    r16 = r17 + r0;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r3;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                case 0x2c120:
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r19 = r19 + r16;
                    r2 = r2 - r16;
                    r17 = r17 - r16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x2bef0;
                        run_2be00(); return;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c0b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c0a8;
                    continue;
                case 0x2c14c:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r4 = readPages[(r20+84)>>>12][((r20+84)>>>2)&0x3ff];
                    r16 = r2 - r5;
                    r18 = r16 + r17;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x2c168;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x2c168:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf24;
                        run_2be00(); return;
                    }
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    r2 = r2 + r16;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r18;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r16 = r17 + r0;
                    pc=0x2c0e4;
                    continue;
                case 0x2c18c:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c1b0;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c20c;
                        run_2c200(); return;
                    }
                case 0x2c1b0:
                    r16 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c1e8;
                        continue;
                    }
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x2c1d8;
                    return;
                case 0x2c1d8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2c120;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2bf24;
                    run_2be00(); return;
                case 0x2c1e8:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x2c1f8;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2c1f8:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r3 = r3 - r17;
                    /* Next insn is delay slot */ 
                    r2 = r2 + r17;
                    pc=0x2c114;
                    run_2c000(); return;
                case 0x2c20c:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x2c218;
                    pc=0x2e000;
                    run_2e000(); return;
                case 0x2c218:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = r3 + r16;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r31=0x2c22c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2c22c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c120;
                        run_2c000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2bf24;
                    run_2be00(); return;
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 604;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r21 = r5 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x2c478;
                        continue;
                    }
                    r20 = r0 + r0;
                case 0x2c430:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r18 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c468;
                        continue;
                    }
                    r16 = r18 + 12;
                case 0x2c448:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c4a0;
                        continue;
                    }
                case 0x2c458:
                    r17 = r17 + -1;
                    r18 = r18 + 92;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 92;
                        pc=0x2c448;
                        continue;
                    }
                    r16 = r16 + 92;
                case 0x2c468:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c430;
                        continue;
                    }
                case 0x2c478:
                    r2 = r20 + r0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x2c4a0:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    pc=r21;
                    r31=0x2c4a8;
                    return;
                case 0x2c4a8:
                    /* Next insn is delay slot */ 
                    r20 = r20 | r2;
                    pc=0x2c458;
                    continue;
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    { long hilo = (long)(r6) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r29 + 32;
                    r3 = r0 + 1;
                    r4 = r7 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r17 = lo;
                    r16 = r6 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x2c64c;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x2c64c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c670;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c664;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x2c664:
                    r2 = r17 - r2;
                    if(r18!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r18 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r18 & 0xffffffffL));
                    }
                    r16 = lo;
                case 0x2c670:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c81c;
                    pc=0x2ca00;
                    run_2ca00(); return;
                case 0x2c81c:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    r21 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r22 = r4 + r0;
                    r23 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2ca3c;
                    pc=0x35800;
                    run_35800(); return;
                case 0x2ca3c:
                    r5 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cafc;
                        continue;
                    }
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r19 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca94;
                        continue;
                    }
                    r2 = r0 + 61;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca94;
                        continue;
                    }
                    r4 = r0 + 61;
                    r2 = r21 + r0;
                case 0x2ca78:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r19 = r19 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca94;
                        continue;
                    }
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca78;
                        continue;
                    }
                case 0x2ca94:
                    r17 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cafc;
                        continue;
                    }
                    r20 = r0 + 61;
                    r16 = r17 + r0;
                case 0x2cab4:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x2cac4;
                    pc=0x30200;
                    run_30200(); return;
                case 0x2cac4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cae8;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r19;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb34;
                        continue;
                    }
                case 0x2cae8:
                    r16 = r16 + 4;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cab4;
                        continue;
                    }
                case 0x2cafc:
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x2cb04;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x2cb04:
                    r2 = r0 + r0;
                case 0x2cb08:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x2cb34:
                    r3 = readPages[(r28+-32560)>>>12][((r28+-32560)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r17 - r2;
                    r2 = r2 >> 2;
                    /* Next insn is delay slot */ 
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    r31=0x2cb54;
                    pc=0x35a00;
                    run_35a00(); return;
                case 0x2cb54:
                    /* Next insn is delay slot */ 
                    r2 = r18 + 1;
                    pc=0x2cb08;
                    continue;
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r29 = r29 + -96;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r16 = r4 + r0;
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd0c;
                        continue;
                    }
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd4c;
                        continue;
                    }
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x2cc44;
                    pc=0x33b50;
                    run_33a00(); return;
                case 0x2cc44:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd48;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = r0 + 1024;
                    r2 = r2 & 61440;
                    r3 = r2 ^ 8192;
                    r18 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 | 32768;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd24;
                        continue;
                    }
                case 0x2cc6c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 2048;
                case 0x2cc78:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x2cc88;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2cc88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 + r0;
                        pc=0x2ccfc;
                        continue;
                    }
                    r5 = r2 + r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r3 = 3 << 16;
                    r3 = r3 + -24064;
                    r4 = r4 | 128;
                    writePages[(r2+60)>>>12][((r2+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r5;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r5;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                        pc=0x2ccd4;
                        continue;
                    }
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                case 0x2ccbc:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x2ccd4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x2cce0;
                    pc=0x35e00;
                    run_35e00(); return;
                case 0x2cce0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ccbc;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2ccbc;
                    continue;
                case 0x2ccfc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2cd0c:
                    r3 = r16 + 67;
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    pc=0x2ccbc;
                    continue;
                case 0x2cd24:
                    r2 = 3 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + -2048;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc6c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r2 = r2 | 1024;
                    pc=0x2cc78;
                    continue;
                case 0x2cd48:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x2cd4c:
                    r18 = r0 + r0;
                    r17 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r2 = r3 | 2048;
                    pc=0x2cc78;
                    continue;
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2ce18;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2ce18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2d018;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2d018:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r29 = r29 + -56;
                    r2 = 4 << 16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    r23 = r2 + -11648;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r22 = r3 & r2;
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10216)>>>12][((r2+-10216)>>>2)&0x3ff];
                    r30 = r4 + r0;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r17 = r5 + 16;
                    r31=0x2d25c;
                    pc=0x33bd0;
                    run_33a00(); return;
                case 0x2d25c:
                    r19 = r2 + r0;
                    r2 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        r18 = r20 + r22;
                        pc=0x2d280;
                        continue;
                    }
                    r18 = r20 + r22;
                    r2 = r17 + r19;
                    r2 = r2 + -1;
                    r3 = r0 - r19;
                    r17 = r2 & r3;
                case 0x2d280:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x2d28c;
                    pc=0x33b10;
                    run_33a00(); return;
                case 0x2d28c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2d2a8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d8;
                        continue;
                    }
                    if(r20 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2d8;
                        continue;
                    }
                case 0x2d2a8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x2d2d8:
                    r21 = 4 << 16;
                    r2 = readPages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff];
                    r5 = r19 + -1;
                    r2 = r2 + r17;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff] = r2;
                        pc=0x2d444;
                        run_2d400(); return;
                    }
                    writePages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff] = r2;
                case 0x2d2f0:
                    r3 = readPages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d438;
                        run_2d400(); return;
                    }
                    r2 = readPages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff];
                    r3 = r16 - r18;
                    r2 = r2 + r3;
                    writePages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff] = r2;
                case 0x2d310:
                    r3 = r16 & 7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x2d328;
                        continue;
                    }
                    r18 = r0 + r0;
                    r2 = r0 + 8;
                    r18 = r2 - r3;
                    r16 = r16 + r18;
                case 0x2d328:
                    r2 = r16 + r17;
                    r2 = r2 & r5;
                    r2 = r19 - r2;
                    r18 = r18 + r2;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x2d344;
                    pc=0x33b10;
                    run_33a00(); return;
                case 0x2d344:
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d42c;
                        run_2d400(); return;
                    }
                case 0x2d354:
                    r2 = readPages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r4 = r2 + -11648;
                    r2 = r3 - r16;
                    r2 = r2 + r18;
                    r3 = r2 | 1;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    if(r20 == r4) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                        pc=0x2d3d0;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r2 = (r22&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d39c;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    pc=0x2d2a8;
                    continue;
                case 0x2d39c:
                    r2 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r4 = r22 + -12;
                    r3 = r0 + -8;
                    r22 = r4 & r3;
                    r2 = r2 & 1;
                    r2 = r2 | r22;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r4 = r20 + r22;
                    r3 = r0 + 5;
                    r2 = (r22&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                        pc=0x2d418;
                        run_2d400(); return;
                    }
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                case 0x2d3d0:
                    r3 = readPages[(r21+-10168)>>>12][((r21+-10168)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10212)>>>12][((r2+-10212)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3f4;
                        continue;
                    }
                    r1 = 4 << 16;
                    writePages[(r1+-10212)>>>12][((r1+-10212)>>>2)&0x3ff] = r3;
                case 0x2d3f4:
                    r2 = 4 << 16;
                    r2 = readPages[(r2+-10208)>>>12][((r2+-10208)>>>2)&0x3ff];
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2a8;
                        run_2d200(); return;
                    }
                    r1 = 4 << 16;
                    /* Next insn is delay slot */ 
                    writePages[(r1+-10208)>>>12][((r1+-10208)>>>2)&0x3ff] = r3;
                    pc=0x2d2a8;
                    run_2d200(); return;
                case 0x2d418:
                    r5 = r20 + 8;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2d424;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2d424:
                    /* Next insn is delay slot */ 
                    pc=0x2d3d0;
                    run_2d200(); return;
                case 0x2d42c:
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r16 + r0;
                    pc=0x2d354;
                    run_2d200(); return;
                case 0x2d438:
                    writePages[(r28+-32544)>>>12][((r28+-32544)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2d310;
                    run_2d200(); return;
                case 0x2d444:
                    r2 = r16 & r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2f0;
                        run_2d200(); return;
                    }
                    r2 = r17 + r22;
                    r3 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    pc=0x2d3d0;
                    run_2d200(); return;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r5 = r5 + 11;
                    r29 = r29 + -40;
                    r2 = (r5&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + 16;
                        pc=0x2d638;
                        continue;
                    }
                    r17 = r0 + 16;
                    r2 = r0 + -8;
                    r17 = r5 & r2;
                case 0x2d638:
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2d6b0;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x2d648;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x2d648:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db3c;
                        run_2da00(); return;
                    }
                    r20 = 4 << 16;
                    r2 = r20 + -11648;
                    r5 = r17 + r2;
                    r16 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r8 = r17 >>> 3;
                    if(r16 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6d0;
                        continue;
                    }
                case 0x2d670:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = r3 & r2;
                case 0x2d67c:
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                case 0x2d690:
                    r3 = r16 + r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                case 0x2d6a0:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x2d6a4:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x2d6ac;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2d6ac:
                    r2 = r16 + 8;
                case 0x2d6b0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x2d6d0:
                    r5 = r16 + 8;
                    r16 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    if(r16 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2d670;
                        continue;
                    }
                    r8 = r8 + 2;
                case 0x2d6e8:
                    r14 = 4 << 16;
                    r7 = r14 + -11640;
                    r16 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r16 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2d778;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r4 = r2 & r3;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db0c;
                        run_2da00(); return;
                    }
                    writePages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff] = r7;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r7;
                        pc=0x2d690;
                        continue;
                    }
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r7;
                    r2 = (r4&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da04;
                        run_2da00(); return;
                    }
                    r6 = r4 >>> 3;
                    r5 = r7 + -8;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        r4 = r6 + r0;
                        pc=0x2d9fc;
                        run_2d800(); return;
                    }
                    r4 = r6 + r0;
                case 0x2d744:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = r4 >> 2;
                    r3 = r0 + 1;
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    r3 = r6 << 3;
                    r7 = r3 + r5;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                case 0x2d768:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r7;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r5;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r16;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r16;
                case 0x2d778:
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r8 + r0;
                        pc=0x2d9f4;
                        run_2d800(); return;
                    }
                    r3 = r8 + r0;
                case 0x2d780:
                    r3 = r3 >> 2;
                    r2 = r0 + 1;
                    r20 = 4 << 16;
                    r7 = r2 << (r3&0x1f);
                    r2 = r20 + -11648;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8d8;
                        run_2d800(); return;
                    }
                    r2 = r7 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7e4;
                        continue;
                    }
                    r2 = r0 + -4;
                    r2 = r8 & r2;
                    r7 = r7 << 1;
                    r8 = r2 + 4;
                    r2 = r7 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7e4;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x2d7d4:
                    r7 = r7 << 1;
                    r2 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x2d7d4;
                        continue;
                    }
                    r8 = r8 + 4;
                case 0x2d7e4:
                    r2 = 4 << 16;
                    r13 = r2 + -11648;
                    r12 = r8 << 3;
                    r15 = r13 + r0;
                case 0x2d7f4:
                    r5 = r12 + r13;
                    r11 = r8 + r0;
                    r3 = r5 + r0;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    r10 = r5 + 12;
                case 0x2d804:
                    r16 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d84c;
                        continue;
                    }
                    r9 = r0 + -4;
                case 0x2d818:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & r9;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d9b0;
                        continue;
                    }
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d98c;
                        continue;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2d818;
                        continue;
                    }
                case 0x2d84c:
                    r8 = r8 + 1;
                    r2 = r8 & 3;
                    r3 = r3 + 8;
                    r10 = r10 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r12 = r12 + 8;
                        pc=0x2d804;
                        continue;
                    }
                    r12 = r12 + 8;
                    r3 = r5 + 8;
                case 0x2d868:
                    r2 = r11 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d978;
                        continue;
                    }
                    r3 = r3 + -8;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x2d868;
                        continue;
                    }
                    r11 = r11 + -1;
                case 0x2d888:
                    r20 = 4 << 16;
                    r2 = r20 + -11648;
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r7 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8d8;
                        continue;
                    }
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d7f4;
                        run_2d600(); return;
                    }
                    r3 = readPages[(r15+4)>>>12][((r15+4)>>>2)&0x3ff];
                case 0x2d8bc:
                    r7 = r7 << 1;
                    r2 = r7 & r3;
                    r8 = r8 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r12 = r12 + 32;
                        pc=0x2d8bc;
                        continue;
                    }
                    r12 = r12 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x2d7f4;
                    run_2d600(); return;
                case 0x2d8d8:
                    r19 = r20 + -11648;
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r16 = r0 + -4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & r16;
                    r6 = r2 - r17;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d90c;
                        continue;
                    }
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d958;
                        continue;
                    }
                case 0x2d90c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x2d918;
                    pc=0x2d200;
                    run_2d200(); return;
                case 0x2d918:
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & r16;
                    r6 = r2 - r17;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d948;
                        continue;
                    }
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d958;
                        continue;
                    }
                case 0x2d948:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x2d950;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2d950:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x2d6b0;
                    run_2d600(); return;
                case 0x2d958:
                    r4 = r20 + -11648;
                    r16 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r17 | 1;
                    r3 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r2 = r6 | 1;
                    pc=0x2d6a0;
                    run_2d600(); return;
                case 0x2d978:
                    r2 = readPages[(r13+4)>>>12][((r13+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r7);
                    r2 = r2 & r3;
                    /* Next insn is delay slot */ 
                    writePages[(r13+4)>>>12][((r13+4)>>>2)&0x3ff] = r2;
                    pc=0x2d888;
                    continue;
                case 0x2d98c:
                    r3 = r16 + r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                    pc=0x2d6a4;
                    run_2d600(); return;
                case 0x2d9b0:
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r17 | 1;
                    r4 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r14 + -11640;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r3 = r6 | 1;
                    r2 = r4 + r6;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    pc=0x2d6a4;
                    run_2d600(); return;
                case 0x2d9f4:
                    /* Next insn is delay slot */ 
                    r3 = r8 + 3;
                    pc=0x2d780;
                    run_2d600(); return;
                case 0x2d9fc:
                    /* Next insn is delay slot */ 
                    r4 = r6 + 3;
                    pc=0x2d744;
                    run_2d600(); return;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    r4 = r6 + 3;
                case 0x2da04:
                    r3 = r4 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r4 >>> 3;
                        pc=0x2da24;
                        continue;
                    }
                    r6 = r4 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dab8;
                        continue;
                    }
                    r2 = r4 >>> 6;
                    r6 = r2 + 56;
                case 0x2da24:
                    r2 = r6 << 3;
                    r9 = r20 + -11648;
                    r7 = r2 + r9;
                    r5 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2da8c;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da80;
                        continue;
                    }
                case 0x2da58:
                    r5 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2da80;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da58;
                        continue;
                    }
                case 0x2da80:
                    r7 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2d768;
                    run_2d600(); return;
                case 0x2da8c:
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r6 + r0;
                        pc=0x2dab0;
                        continue;
                    }
                    r2 = r6 + r0;
                case 0x2da94:
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                    r2 = readPages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    pc=0x2d768;
                    run_2d600(); return;
                case 0x2dab0:
                    /* Next insn is delay slot */ 
                    r2 = r6 + 3;
                    pc=0x2da94;
                    continue;
                case 0x2dab8:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 + 91;
                        pc=0x2da24;
                        continue;
                    }
                    r6 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dadc;
                        continue;
                    }
                    r2 = r4 >>> 12;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 110;
                    pc=0x2da24;
                    continue;
                case 0x2dadc:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2daf4;
                        continue;
                    }
                    r2 = r4 >>> 15;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 119;
                    pc=0x2da24;
                    continue;
                case 0x2daf4:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 126;
                        pc=0x2da24;
                        continue;
                    }
                    r6 = r0 + 126;
                    r2 = r4 >>> 18;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 124;
                    pc=0x2da24;
                    continue;
                case 0x2db0c:
                    r4 = r16 + r17;
                    r2 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r3 = r4 + r6;
                    r2 = r6 | 1;
                    writePages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff] = r4;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r4;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r7;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r7;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    pc=0x2d6a4;
                    run_2d600(); return;
                case 0x2db3c:
                    r3 = r17 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r17 >>> 3;
                        pc=0x2db5c;
                        continue;
                    }
                    r8 = r17 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbc4;
                        continue;
                    }
                    r2 = r17 >>> 6;
                    r8 = r2 + 56;
                case 0x2db5c:
                    r20 = 4 << 16;
                    r3 = r8 << 3;
                    r2 = r20 + -11648;
                    r3 = r3 + r2;
                    r16 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbb4;
                        continue;
                    }
                    r5 = r0 + -4;
                case 0x2db80:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & r5;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbbc;
                        continue;
                    }
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d67c;
                        run_2d600(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2db80;
                        continue;
                    }
                case 0x2dbb4:
                    /* Next insn is delay slot */ 
                    r8 = r8 + 1;
                    pc=0x2d6e8;
                    run_2d600(); return;
                case 0x2dbbc:
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x2dbb4;
                    continue;
                case 0x2dbc4:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + 91;
                        pc=0x2db5c;
                        continue;
                    }
                    r8 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dbe8;
                        continue;
                    }
                    r2 = r17 >>> 12;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 110;
                    pc=0x2db5c;
                    continue;
                case 0x2dbe8:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc00;
                        run_2dc00(); return;
                    }
                    r2 = r17 >>> 15;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 119;
                    pc=0x2db5c;
                    continue;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 126;
                        pc=0x2db5c;
                        run_2da00(); return;
                    }
                    r8 = r0 + 126;
                    r2 = r17 >>> 18;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 124;
                    pc=0x2db5c;
                    run_2da00(); return;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r7 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 & 255;
                        pc=0x2dec4;
                        continue;
                    }
                    r5 = r5 & 255;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dec4;
                        continue;
                    }
                    r10 = r4 + r0;
                    r11 = r0 + r0;
                    r3 = r0 + r0;
                case 0x2de24:
                    r2 = r11 << 8;
                    r3 = r3 + 1;
                    r11 = r2 + r5;
                    r2 = (r3&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de24;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dec0;
                        continue;
                    }
                    r13 = 65278 << 16;
                    r12 = 32896 << 16;
                    r13 = r13 | 65279;
                    r12 = r12 | 32896;
                    r9 = r10 + r0;
                case 0x2de58:
                    r2 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    r2 = r2 ^ r11;
                    r3 = r2 + r13;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2deac;
                        continue;
                    }
                    r4 = r10 + r0;
                    r8 = r0 + r0;
                    r3 = r10 + r0;
                case 0x2de88:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r4 + r0;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2df00;
                        continue;
                    }
                    r8 = r8 + 1;
                    r2 = (r8&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2de88;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x2deac:
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r10 = r10 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + 4;
                        pc=0x2de58;
                        continue;
                    }
                    r9 = r9 + 4;
                case 0x2dec0:
                    r4 = r10 + r0;
                case 0x2dec4:
                    r6 = r6 + -1;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2defc;
                        continue;
                    }
                    r8 = r0 + -1;
                    r3 = r4 + r0;
                case 0x2dedc:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r4 + r0;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2df00;
                        continue;
                    }
                    r6 = r6 + -1;
                    r4 = r4 + 1;
                    if(r6 != r8) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2dedc;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x2defc:
                    r7 = r0 + r0;
                case 0x2df00:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=r31;
                    return;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    r2 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r9 = r5 + r0;
                    r8 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r6 + r0;
                        pc=0x2e060;
                        continue;
                    }
                    r7 = r6 + r0;
                    r3 = r5 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e060;
                        continue;
                    }
                    r7 = r6 + -1;
                    r2 = r0 + -1;
                    r5 = r3 + r0;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        r8 = r4 + r6;
                        pc=0x2e058;
                        continue;
                    }
                    r8 = r4 + r6;
                    r6 = r0 + -1;
                    r3 = r8 + r0;
                case 0x2e040:
                    r5 = r5 + -1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -1;
                    r7 = r7 + -1;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        addr=r3+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2e040;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2e058:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x2e060:
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e118;
                        continue;
                    }
                    r2 = r9 | r4;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e118;
                        continue;
                    }
                    r8 = r4 + r0;
                    r5 = r9 + r0;
                    r6 = r4 + r0;
                    r3 = r9 + r0;
                case 0x2e08c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r7 = r7 + -16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    r5 = r5 + 16;
                    r3 = r3 + 4;
                    r8 = r8 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x2e08c;
                        continue;
                    }
                    r6 = r6 + 4;
                    r2 = (r7&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e118;
                        continue;
                    }
                    r6 = r8 + r0;
                    r3 = r5 + r0;
                case 0x2e0f4:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = r7 + -4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = (r7&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r5 = r5 + 4;
                    r3 = r3 + 4;
                    r8 = r8 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x2e0f4;
                        continue;
                    }
                    r6 = r6 + 4;
                case 0x2e118:
                    r7 = r7 + -1;
                    r2 = r0 + -1;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2e058;
                        continue;
                    }
                    r6 = r0 + -1;
                    r3 = r8 + r0;
                case 0x2e130:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r7 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 1;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2e130;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x2e058;
                    continue;
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2e620;
                    pc=0x2e800;
                    run_2e800(); return;
                case 0x2e620:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r30 = r4 + r0;
                    r21 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eda0;
                        run_2ec00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r21 + -8;
                    r31=0x2e848;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x2e848:
                    r7 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r20 + 11;
                    r18 = r7 & r2;
                    r2 = (r3&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + r0;
                    r17 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + 16;
                        pc=0x2e874;
                        continue;
                    }
                    r22 = r0 + 16;
                    r2 = r0 + -8;
                    r22 = r3 & r2;
                case 0x2e874:
                    if(r22 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2ea2c;
                        run_2ea00(); return;
                    }
                    r2 = r0 + r0;
                    r2 = r17 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea84;
                        run_2ea00(); return;
                    }
                    r23 = 4 << 16;
                    r8 = r23 + -11648;
                    r6 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r5 = r19 + r17;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed94;
                        run_2ec00(); return;
                    }
                    r4 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r2 = r4 & r2;
                    r2 = r5 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed88;
                        run_2ec00(); return;
                    }
                case 0x2e8c4:
                    r2 = r0 + -4;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        r4 = r4 & r2;
                        pc=0x2ed40;
                        run_2ec00(); return;
                    }
                    r4 = r4 & r2;
                    r3 = r4 + r17;
                    r2 = r3 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed28;
                        run_2ec00(); return;
                    }
                case 0x2e8e0:
                    r2 = r7 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e948;
                        continue;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r18 = r19 - r2;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 & r2;
                        pc=0x2e930;
                        continue;
                    }
                    r6 = r3 & r2;
                    r2 = r23 + -11648;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec14;
                        run_2ec00(); return;
                    }
                    r2 = r4 + r6;
                    r7 = r2 + r17;
                    r3 = r7 < r22 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebe8;
                        run_2ea00(); return;
                    }
                case 0x2e930:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e948;
                        continue;
                    }
                    r3 = r6 + r17;
                    r2 = r3 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb18;
                        run_2ea00(); return;
                    }
                case 0x2e948:
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2e954;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2e954:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r2 + r0;
                        pc=0x2eb08;
                        run_2ea00(); return;
                    }
                    r20 = r2 + r0;
                    r16 = r2 + -8;
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                    r2 = r19 + r2;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea70;
                        run_2ea00(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea5c;
                        run_2ea00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x2e9f0;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + 8;
                        pc=0x2e9f0;
                        continue;
                    }
                    r4 = r20 + 8;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + 16;
                        pc=0x2e9f0;
                        continue;
                    }
                    r4 = r20 + 16;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r3;
                case 0x2e9f0:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                case 0x2ea14:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x2ea20;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2ea20:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2ea28;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2ea28:
                    r2 = r20 + r0;
                case 0x2ea2c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x2ea5c:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x2ea68;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x2ea68:
                    /* Next insn is delay slot */ 
                    pc=0x2ea14;
                    continue;
                case 0x2ea70:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r18 = r17 + r2;
                    r16 = r19 + r0;
                case 0x2ea84:
                    r4 = r18 - r22;
                    r2 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eac8;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r16 + r18;
                    r2 = r2 & 1;
                    r2 = r2 | r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x2eab8:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2eac0;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2eac0:
                    /* Next insn is delay slot */ 
                    r2 = r16 + 8;
                    pc=0x2ea2c;
                    continue;
                case 0x2eac8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r16 + r22;
                    r2 = r2 & 1;
                    r2 = r2 | r22;
                    r3 = r4 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r5 + r4;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r5 = r5 + 8;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2eb00;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2eb00:
                    /* Next insn is delay slot */ 
                    pc=0x2eab8;
                    continue;
                case 0x2eb08:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2eb10;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2eb10:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x2ea2c;
                    continue;
                case 0x2eb18:
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r16 = r18 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r18 = r3 + r0;
                case 0x2eb30:
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r20 = r16 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebd4;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x2ebac;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r16 + 16;
                        pc=0x2ebac;
                        continue;
                    }
                    r4 = r16 + 16;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r16 + 24;
                        pc=0x2ebac;
                        continue;
                    }
                    r4 = r16 + 24;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r16 + 32;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r3;
                case 0x2ebac:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    pc=0x2ea84;
                    continue;
                case 0x2ebd4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x2ebe0;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x2ebe0:
                    /* Next insn is delay slot */ 
                    pc=0x2ea84;
                    continue;
                case 0x2ebe8:
                    r4 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r16 = r18 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r18 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    pc=0x2eb30;
                    run_2ea00(); return;
                case 0x2ec14:
                    r3 = r4 + r6;
                    r3 = r3 + r17;
                    r2 = r22 + 16;
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                        pc=0x2e930;
                        run_2e800(); return;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r20 = r18 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed14;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x2ecb8;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r18 + 16;
                        pc=0x2ecb8;
                        continue;
                    }
                    r4 = r18 + 16;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r18 + 24;
                        pc=0x2ecb8;
                        continue;
                    }
                    r4 = r18 + 24;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r18 + 32;
                    writePages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff] = r3;
                case 0x2ecb8:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                case 0x2ecdc:
                    r3 = r23 + -11648;
                    r4 = r18 + r22;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 - r22;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r3 & 1;
                    r3 = r3 | r22;
                    /* Next insn is delay slot */ 
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r3;
                    pc=0x2ea20;
                    run_2ea00(); return;
                case 0x2ed14:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x2ed20;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x2ed20:
                    /* Next insn is delay slot */ 
                    pc=0x2ecdc;
                    continue;
                case 0x2ed28:
                    r4 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r18 = r3 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    pc=0x2ea84;
                    run_2ea00(); return;
                case 0x2ed40:
                    r3 = r4 + r17;
                    r2 = r22 + 16;
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8e0;
                        run_2e800(); return;
                    }
                    r3 = r3 - r22;
                    r2 = r19 + r22;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r2;
                    r4 = r4 & 1;
                    r4 = r4 | r22;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x2ed80;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x2ed80:
                    /* Next insn is delay slot */ 
                    r2 = r19 + 8;
                    pc=0x2ea2c;
                    run_2ea00(); return;
                case 0x2ed88:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x2e8e0;
                    run_2e800(); return;
                case 0x2ed94:
                    r4 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2e8c4;
                    run_2e800(); return;
                case 0x2eda0:
                    /* Next insn is delay slot */ 
                    r5 = r6 + r0;
                    r31=0x2eda8;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x2eda8:
                    /* Next insn is delay slot */ 
                    pc=0x2ea2c;
                    run_2ea00(); return;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x2ee2c;
                        continue;
                    }
                    r5 = r0 + r0;
                case 0x2ee1c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2ee2c:
                    /* Next insn is delay slot */ 
                    r31=0x2ee34;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ee34:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x2ee1c;
                    continue;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f030;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2f030:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f1b0;
                        continue;
                    }
                case 0x2f040:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r3 = r4 & 65535;
                    r2 = r3 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x2f0dc;
                        continue;
                    }
                    r5 = r0 + -1;
                    r2 = r3 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f168;
                        continue;
                    }
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f0dc;
                        continue;
                    }
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f13c;
                        continue;
                    }
                case 0x2f07c:
                    r2 = r4 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f084:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f12c;
                        continue;
                    }
                case 0x2f094:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f114;
                        continue;
                    }
                case 0x2f0a8:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r6 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r5;
                    pc=r2;
                    r31=0x2f0c0;
                    return;
                case 0x2f0c0:
                    r3 = r2 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r0 + r0;
                    r2 = r2 & 57343;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        addr=r16+12;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2f0f0;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f0dc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2f0f0:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f108;
                        continue;
                    }
                    r2 = r2 | 32;
                case 0x2f0fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r5 = r0 + -1;
                    pc=0x2f0dc;
                    continue;
                case 0x2f108:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r2 = r2 | 64;
                    pc=0x2f0fc;
                    continue;
                case 0x2f114:
                    r5 = 3 << 16;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -4608;
                    r31=0x2f124;
                    pc=0x2c400;
                    run_2c400(); return;
                case 0x2f124:
                    /* Next insn is delay slot */ 
                    pc=0x2f0a8;
                    continue;
                case 0x2f12c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f134;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x2f134:
                    /* Next insn is delay slot */ 
                    pc=0x2f094;
                    continue;
                case 0x2f13c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f144;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2f144:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x2f0dc;
                        continue;
                    }
                    r5 = r0 + -1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    pc=0x2f07c;
                    continue;
                case 0x2f168:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f084;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f190;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2f190;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x2f190:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x2f084;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    pc=0x2f0dc;
                    continue;
                case 0x2f1b0:
                    /* Next insn is delay slot */ 
                    r31=0x2f1b8;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x2f1b8:
                    /* Next insn is delay slot */ 
                    pc=0x2f040;
                    continue;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 + -1;
                        pc=0x2f234;
                        continue;
                    }
                    r2 = r16 + -1;
                    r2 = r0 + r0;
                case 0x2f234:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r6 = r29 + 132;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x2f250;
                    pc=0x31000;
                    run_31000(); return;
                case 0x2f250:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f264;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f264:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r5 + r0;
                    r16 = r4 + r0;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x2f428;
                    pc=0x33a90;
                    run_33a00(); return;
                case 0x2f428:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x2f454;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                case 0x2f440:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2f454:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 61439;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2f440;
                    continue;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r16 = r4 + r0;
                    r2 = r2 & 256;
                    r17 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x2f664;
                        continue;
                    }
                    r18 = r6 + r0;
                case 0x2f62c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r2 = r2 & 61439;
                    r6 = r17 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x2f64c;
                    pc=0x33ad0;
                    run_33a00(); return;
                case 0x2f64c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2f664:
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 2;
                    r31=0x2f678;
                    pc=0x33b90;
                    run_33a00(); return;
                case 0x2f678:
                    /* Next insn is delay slot */ 
                    pc=0x2f62c;
                    continue;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r5 + r0;
                    r16 = r4 + r0;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x2f828;
                    pc=0x33b90;
                    run_33a00(); return;
                case 0x2f828:
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f85c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r2 = r2 | 4096;
                case 0x2f844:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2f85c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r2 & 61439;
                    pc=0x2f844;
                    continue;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2fa18;
                    pc=0x33a50;
                    run_33a00(); return;
                case 0x2fa18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r4 + r0;
                        pc=0x2fc54;
                        continue;
                    }
                    r3 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x2fc14:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 2;
                        pc=0x2fc4c;
                        continue;
                    }
                    r4 = r4 + 2;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc4c;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 2;
                        pc=0x2fc44;
                        continue;
                    }
                    r5 = r5 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc14;
                        continue;
                    }
                case 0x2fc44:
                    /* Next insn is delay slot */ 
                    r2 = r3 - r6;
                    pc=r31;
                    return;
                case 0x2fc4c:
                    /* Next insn is delay slot */ 
                    r2 = r2 - r6;
                    pc=r31;
                    return;
                case 0x2fc54:
                    r4 = r5 + r0;
                case 0x2fc58:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x2fc4c;
                        continue;
                    }
                    r4 = r4 + 1;
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc58;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2fc4c;
                    continue;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2fe18;
                    pc=0x30000;
                    run_30000(); return;
                case 0x2fe18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r29 = r29 + -32;
                case 0x30004:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r18 = r5 + r0;
                    r31=0x30024;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x30024:
                    r17 = r2 + 1;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x30034;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x30034:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x3004c;
                        continue;
                    }
                    r16 = r2 + r0;
                    r4 = r2 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x3004c;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x3004c:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3027c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30244;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r7 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r5 + r0;
                        pc=0x3023c;
                        continue;
                    }
                    r8 = r5 + r0;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x302e4;
                        continue;
                    }
                case 0x3023c:
                    r4 = r7 + r0;
                    r5 = r8 + r0;
                case 0x30244:
                    r2 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x302d4;
                        continue;
                    }
                    r6 = r6 + -1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r7 << 24;
                    r2 = r2 >> 24;
                    r9 = r7 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x30284;
                        continue;
                    }
                case 0x30270:
                    r3 = r7 & 255;
                    r2 = r8 & 255;
                    r2 = r3 - r2;
                case 0x3027c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30284:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302cc;
                        continue;
                    }
                    r2 = r9 << 24;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302cc;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r5 = r5 + 1;
                    r2 = r7 << 24;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r2 >> 24;
                    r6 = r6 + -1;
                    r9 = r7 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x30284;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x30270;
                    continue;
                case 0x302cc:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x302d4:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x30270;
                    continue;
                case 0x302e4:
                    r10 = 65278 << 16;
                    r9 = 32896 << 16;
                    r10 = r10 | 65279;
                    r9 = r9 | 32896;
                case 0x302f4:
                    r6 = r6 + -4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302cc;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r10;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x302cc;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r7 = r7 + 4;
                    r4 = r4 + 4;
                    r8 = r8 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x3023c;
                        continue;
                    }
                    r5 = r5 + 4;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x302f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3023c;
                    continue;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r4 + r0;
                        pc=0x30468;
                        continue;
                    }
                    r8 = r4 + r0;
                    r12 = r6 & 3;
                    r6 = r6 - r12;
                    r7 = r4 + r0;
                    r3 = r5 + r0;
                case 0x3041c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r5 = r5 + 4;
                    r3 = r3 + 4;
                    r6 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x305a0;
                        continue;
                    }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+1;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x30594;
                        continue;
                    }
                    addr=r7+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+2;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x30588;
                        continue;
                    }
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+3;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x304bc;
                        continue;
                    }
                    addr=r7+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x3041c;
                        continue;
                    }
                    r7 = r7 + 4;
                    r6 = r12 + r0;
                case 0x30468:
                    r6 = r8 + r6;
                    if(r8 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x30490;
                        continue;
                    }
                case 0x30474:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 1;
                        pc=0x30498;
                        continue;
                    }
                    r8 = r8 + 1;
                    if(r8 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x30474;
                        continue;
                    }
                case 0x30490:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x30498:
                    if(r8 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x30490;
                        continue;
                    }
                    r2 = r8 + r0;
                case 0x304a4:
                    r8 = r8 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r6) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x304a4;
                        continue;
                    }
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x30490;
                    continue;
                case 0x304bc:
                    r6 = r6 + r12;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x304f8;
                        continue;
                    }
                    r8 = r8 + 4;
                    r2 = r8 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x304f8;
                        continue;
                    }
                    r3 = r8 + r0;
                case 0x304d8:
                    r6 = r6 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x304f8;
                        continue;
                    }
                    r3 = r3 + 1;
                    r2 = r8 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x304d8;
                        continue;
                    }
                case 0x304f8:
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3052c;
                        continue;
                    }
                    r3 = r8 + -4;
                case 0x30508:
                    r6 = r6 + -16;
                    r3 = r3 + 16;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    r8 = r8 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r0;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                        pc=0x30508;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x3052c:
                    r2 = (r6&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30548;
                        continue;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r0;
                    r6 = r6 + -8;
                    r8 = r8 + 8;
                case 0x30548:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30560;
                        continue;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r0;
                    r6 = r6 + -4;
                    r8 = r8 + 4;
                case 0x30560:
                    r2 = (r6&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30578;
                        continue;
                    }
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -2;
                    r8 = r8 + 2;
                case 0x30578:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30490;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x30490;
                    continue;
                case 0x30588:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x304bc;
                    continue;
                case 0x30594:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x30588;
                    continue;
                case 0x305a0:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x30594;
                    continue;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r2 = r4 + r0;
                    r17 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x30658;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x30620:
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x3062c;
                    pc=0x38400;
                    run_38400(); return;
                case 0x3062c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30640;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r2 = r2 + 1;
                    pc=0x30620;
                    continue;
                case 0x30640:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x30658:
                    /* Next insn is delay slot */ 
                    r31=0x30660;
                    pc=0x38400;
                    run_38400(); return;
                case 0x30660:
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    pc=0x30640;
                    continue;
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r2 = 4 << 16;
                    r11 = r5 + r0;
                    r25 = r0 + r0;
                    r10 = r2 + -14024;
                    r8 = r5 + r0;
                case 0x30814:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    r3 = r9 + r10;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r8 = r8 + 1;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30814;
                        continue;
                    }
                    r2 = r0 + 45;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x309dc;
                        continue;
                    }
                    r2 = r0 + 43;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x309d0;
                        continue;
                    }
                case 0x3084c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30998;
                        continue;
                    }
                    r2 = r0 + 16;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30998;
                        continue;
                    }
                case 0x30860:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30878;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + 8;
                        pc=0x30878;
                        continue;
                    }
                    r7 = r0 + 8;
                    r7 = r0 + 10;
                case 0x30878:
                    r2 = (r25&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = 32768 << 16;
                    r2 = r3 - r2;
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r2 = 4 << 16;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30898;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x30898:
                    r12 = r0 + r0;
                    r13 = r0 + r0;
                    r15 = r2 + -14024;
                    r10 = r11 + r0;
                    r24 = hi;
                    r14 = lo;
                case 0x308b0:
                    r2 = r9 + r15;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r3 = r8 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30974;
                        continue;
                    }
                    r9 = r9 + -48;
                case 0x308cc:
                    r2 = r9 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30928;
                        continue;
                    }
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x30920;
                        continue;
                    }
                    r2 = ((r14 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30920;
                        continue;
                    }
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x30914;
                        continue;
                    }
                case 0x308f4:
                    { long hilo = (long)(r12) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = r0 + 1;
                    r12 = lo;
                    r12 = r12 + r9;
                case 0x30904:
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    /* Next insn is delay slot */ 
                    r10 = r10 + 1;
                    pc=0x308b0;
                    continue;
                case 0x30914:
                    r2 = r24 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x308f4;
                        continue;
                    }
                case 0x30920:
                    /* Next insn is delay slot */ 
                    r13 = r0 + -1;
                    pc=0x30904;
                    continue;
                case 0x30928:
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3095c;
                        continue;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3093c;
                        continue;
                    }
                    r12 = r0 - r12;
                case 0x3093c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30954;
                        continue;
                    }
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 + -1;
                        pc=0x30950;
                        continue;
                    }
                    r2 = r11 + -1;
                    r2 = r5 + r0;
                case 0x30950:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x30954:
                    /* Next insn is delay slot */ 
                    r2 = r12 + r0;
                    pc=r31;
                    return;
                case 0x3095c:
                    r12 = (r25&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = 32768 << 16;
                    r3 = r0 + 34;
                    r12 = r2 - r12;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    pc=0x3093c;
                    continue;
                case 0x30974:
                    r2 = r8 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30928;
                        continue;
                    }
                    r2 = r8 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r9 + -55;
                        pc=0x30990;
                        continue;
                    }
                    r3 = r9 + -55;
                    r3 = r9 + -87;
                case 0x30990:
                    /* Next insn is delay slot */ 
                    r9 = r3 + r0;
                    pc=0x308cc;
                    continue;
                case 0x30998:
                    r2 = r0 + 48;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30860;
                        continue;
                    }
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 120;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x309c0;
                        continue;
                    }
                    r2 = r0 + 88;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30860;
                        continue;
                    }
                case 0x309c0:
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 2;
                    pc=0x30860;
                    continue;
                case 0x309d0:
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 1;
                    pc=0x3084c;
                    continue;
                case 0x309dc:
                    /* Next insn is delay slot */ 
                    r25 = r0 + 1;
                    pc=0x309d0;
                    continue;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30a28;
                    pc=0x30800;
                    run_30800(); return;
                case 0x30a28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30c34;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r0;
                case 0x30c24:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x30c34:
                    /* Next insn is delay slot */ 
                    r31=0x30c3c;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x30c3c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    pc=0x30c24;
                    continue;
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    r29 = r29 + -1152;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r17;
                    writePages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff] = r16;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r31;
                    r3 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r3;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r2 & 65533;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff];
                    r3 = readPages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    r2 = r29 + 112;
                    r3 = r0 + 1024;
                    r17 = r4 + r0;
                    r4 = r29 + 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r0;
                    r31=0x30e64;
                    pc=0x31000;
                    run_31000(); return;
                case 0x30e64:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x30e80;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 16;
                    r31=0x30e74;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x30e74:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30e80;
                        continue;
                    }
                    r16 = r0 + -1;
                case 0x30e80:
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30ea4;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x30ea4:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff];
                    r17 = readPages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff];
                    r16 = readPages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1152;
                    pc=r31;
                    return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x31038;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x31038:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31074;
                        continue;
                    }
                case 0x31048:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r18 + r0;
                    r31=0x3105c;
                    pc=0x31200;
                    run_31200(); return;
                case 0x3105c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x31074:
                    /* Next insn is delay slot */ 
                    r31=0x3107c;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x3107c:
                    /* Next insn is delay slot */ 
                    pc=0x31048;
                    continue;
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r29 = r29 + -600;
                    writePages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff] = r31;
                    writePages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff] = r16;
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r4;
                    writePages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff] = r5;
                    r16 = r6 + r0;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r7;
                    writePages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff] = r30;
                    writePages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff] = r23;
                    writePages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff] = r22;
                    writePages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff] = r21;
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r20;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r19;
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r18;
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x31244;
                    pc=0x36200;
                    run_36200(); return;
                case 0x31244:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 496;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r2;
                    r5 = r0 + r0;
                    r2 = r0 + r0;
                    r3 = r0 + r0;
                    r6 = r0 + 8;
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r2;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r3;
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r0;
                    r31=0x31274;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x31274:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312a0;
                        continue;
                    }
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x312c4;
                        continue;
                    }
                case 0x312a0:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x312ac;
                    pc=0x33800;
                    run_33800(); return;
                case 0x312ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x31974;
                        run_31800(); return;
                    }
                    r3 = r0 + -1;
                    r2 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x312c4:
                    r3 = r3 & 26;
                    r2 = r0 + 10;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32e9c;
                        run_32e00(); return;
                    }
                case 0x312d4:
                    r19 = r29 + 72;
                    r20 = r16 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r0;
                case 0x312ec:
                    r21 = r20 + r0;
                    r17 = r0 + 37;
                case 0x312f4:
                    r4 = r29 + 496;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r7 = readPages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r5 = r29 + 504;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x31310;
                    pc=0x36400;
                    run_36400(); return;
                case 0x31310:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x3132c;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = readPages[(r29+504)>>>12][((r29+504)>>>2)&0x3ff];
                    r20 = r20 + r16;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x312f4;
                        continue;
                    }
                    r20 = r20 + -1;
                case 0x3132c:
                    r17 = r20 - r21;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31378;
                        continue;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e80;
                        run_32e00(); return;
                    }
                case 0x31368:
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                case 0x31378:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e40;
                        run_32e00(); return;
                    }
                    r20 = r20 + 1;
                    r18 = r0 + -1;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r0;
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r0;
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r0;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x31398:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                case 0x313a0:
                    r2 = r4 << 24;
                    r22 = r2 >> 24;
                    r20 = r20 + 1;
                case 0x313ac:
                    r3 = r22 + -32;
                    r2 = (r3&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e2c;
                        run_32e00(); return;
                    }
                    r2 = r3 << 2;
                    r3 = 4 << 16;
                    r3 = r3 + -13668;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x313dc:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31398;
                        continue;
                    }
                case 0x313ec:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x31398;
                    continue;
                case 0x313f4:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r3;
                    pc=0x31398;
                    run_31200(); return;
                case 0x31408:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                        pc=0x31398;
                        run_31200(); return;
                    }
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                    r4 = r0 - r4;
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                case 0x31438:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 4;
                case 0x31444:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x31398;
                    run_31200(); return;
                case 0x3144c:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 43;
                    pc=0x313ec;
                    run_31200(); return;
                case 0x31454:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r2 = r0 + 42;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        r20 = r20 + 1;
                        pc=0x314b8;
                        continue;
                    }
                    r20 = r20 + 1;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x314a4;
                        continue;
                    }
                    r16 = r0 + r0;
                    r3 = r20 + r0;
                case 0x31478:
                    r2 = r16 << 2;
                    r2 = r2 + r16;
                    r2 = r2 << 1;
                    r2 = r2 + r22;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r16 = r2 + -48;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x31478;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x314a4:
                    r2 = r16 < -1 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r16 + r0;
                        pc=0x313ac;
                        run_31200(); return;
                    }
                    r18 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r0 + -1;
                    pc=0x313ac;
                    run_31200(); return;
                case 0x314b8:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                        pc=0x31398;
                        run_31200(); return;
                    }
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r18 = r0 + -1;
                    pc=0x31398;
                    run_31200(); return;
                case 0x314e8:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 128;
                case 0x314f4:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                    pc=0x31398;
                    run_31200(); return;
                case 0x314fc:
                    r16 = r0 + r0;
                    r3 = r20 + r0;
                case 0x31504:
                    r2 = r16 << 2;
                    r2 = r2 + r16;
                    r2 = r2 << 1;
                    r2 = r2 + r22;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r16 = r2 + -48;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r3 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r16;
                        pc=0x31504;
                        continue;
                    }
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x313ac;
                    run_31200(); return;
                case 0x3153c:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                case 0x3154c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3261c;
                        run_32600(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x31584:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32600;
                        run_32600(); return;
                    }
                case 0x3158c:
                    r3 = r0 + 1;
                case 0x31590:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r18;
                        pc=0x315a8;
                        continue;
                    }
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r18;
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r0 + -129;
                    r4 = r4 & r2;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x315a8:
                    r2 = r16 | r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r29 + 484;
                        pc=0x315c4;
                        continue;
                    }
                    r21 = r29 + 484;
                    r2 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x325d4;
                        run_32400(); return;
                    }
                case 0x315c4:
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32544;
                        run_32400(); return;
                    }
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x324e0;
                        run_32400(); return;
                    }
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3249c;
                        run_32400(); return;
                    }
                case 0x315e8:
                    r2 = 4 << 16;
                    r21 = r2 + -13736;
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x315f8;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x315f8:
                    r23 = r2 + r0;
                case 0x315fc:
                    r4 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r23;
                    r2 = r23 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31614;
                        continue;
                    }
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r4;
                case 0x31614:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32478;
                        run_32400(); return;
                    }
                    r2 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r2 = r2 + 1;
                case 0x31630:
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r2;
                case 0x31634:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r30 = r4 & 132;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31700;
                        continue;
                    }
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r4 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31700;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x316bc;
                        continue;
                    }
                    r2 = 4 << 16;
                    r18 = r2 + -13768;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x3167c:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x32458;
                        run_32400(); return;
                    }
                    r3 = r3 + 8;
                case 0x316ac:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3167c;
                        continue;
                    }
                case 0x316bc:
                    r3 = 4 << 16;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r3 + -13768;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3243c;
                        run_32400(); return;
                    }
                case 0x316f8:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x31700:
                    r2 = r3 << 24;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x323c4;
                        run_32200(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r29 + 40;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x323a8;
                        run_32200(); return;
                    }
                case 0x31748:
                    r2 = r0 + 128;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x322b8;
                        run_32200(); return;
                    }
                case 0x31754:
                    r4 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    r16 = r4 - r23;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x317fc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322b0;
                        run_32200(); return;
                    }
                    r30 = 4 << 16;
                    r18 = r30 + -13752;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x31784:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x32290;
                        run_32200(); return;
                    }
                    r3 = r3 + 8;
                case 0x317b4:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31784;
                        continue;
                    }
                case 0x317c4:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -13752;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32274;
                        run_32200(); return;
                    }
                case 0x317fc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r2 = r3 & 256;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31a00;
                        run_31a00(); return;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r23;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r23;
                case 0x31820:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x31824:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x319e4;
                        continue;
                    }
                case 0x31840:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x318f8;
                        continue;
                    }
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r3;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x318f8;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x318c8;
                        continue;
                    }
                    r4 = 4 << 16;
                    r18 = r4 + -13768;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x31888:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x319c4;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x318b8:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31888;
                        continue;
                    }
                case 0x318c8:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r3 = 4 << 16;
                    r2 = r3 + -13768;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                        pc=0x319a8;
                        continue;
                    }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x318f8:
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r4 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r2 = r3 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31914;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x31914:
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31940;
                        continue;
                    }
                case 0x31934:
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    pc=0x312ec;
                    run_31200(); return;
                case 0x31940:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x3194c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x3194c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31934;
                        continue;
                    }
                case 0x31954:
                    r3 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r3+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31974;
                        continue;
                    }
                    r3 = r0 + -1;
                case 0x31974:
                    r31 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    r30 = readPages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff];
                    r23 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    r22 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r21 = readPages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff];
                    r20 = readPages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff];
                    r19 = readPages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff];
                    r18 = readPages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff];
                    r17 = readPages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff];
                    r16 = readPages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 600;
                    pc=r31;
                    return;
                case 0x319a8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x319b4;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x319b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x318f8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x31954;
                    continue;
                case 0x319c4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x319d0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x319d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x318b8;
                    continue;
                case 0x319e4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x319f0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x319f0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x31840;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x31954;
                    continue;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r2 = r22 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32004;
                        run_32000(); return;
                    }
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x31bc0;
                        continue;
                    }
                    r2 = 4 << 16;
                    r16 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + -10380;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31ba4;
                        continue;
                    }
                case 0x31a78:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31aa4;
                        continue;
                    }
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31840;
                        run_31800(); return;
                    }
                case 0x31aa4:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r4;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x31b88;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x31ad4:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31840;
                        run_31800(); return;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31b80;
                        continue;
                    }
                    r30 = 4 << 16;
                    r17 = r30 + -13752;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x31b04:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x31b60;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x31b34:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31b04;
                        continue;
                    }
                case 0x31b44:
                    r2 = r30 + -13752;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r16;
                    pc=0x31820;
                    run_31800(); return;
                case 0x31b60:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31b6c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31b6c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x31b34;
                    continue;
                case 0x31b80:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x31b44;
                    continue;
                case 0x31b88:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31b94;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31b94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31ad4;
                    continue;
                case 0x31ba4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31bb0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31bb0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31a78;
                    continue;
                case 0x31bc0:
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31e28;
                        run_31e00(); return;
                    }
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r5 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31d58;
                        run_31c00(); return;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x31d38;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x31c14:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r16 = r2 - r6;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31cbc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31d30;
                        continue;
                    }
                    r30 = 4 << 16;
                    r17 = r30 + -13752;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x31c44:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x31d10;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x31c74:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31c44;
                        continue;
                    }
                case 0x31c84:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -13752;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31cf4;
                        continue;
                    }
                case 0x31cbc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31840;
                        run_31800(); return;
                    }
                    r2 = 4 << 16;
                    r3 = r0 + 1;
                    r2 = r2 + -10376;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + 1;
                    pc=0x31820;
                    run_31800(); return;
                case 0x31cf4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31d00;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31d00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31cbc;
                    continue;
                case 0x31d10:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31d1c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31d1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x31c74;
                    continue;
                case 0x31d30:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x31c84;
                    continue;
                case 0x31d38:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31d44;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31d44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r6 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31c14;
                    continue;
                case 0x31d58:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r5;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31e08;
                        run_31e00(); return;
                    }
                case 0x31d88:
                    r2 = 4 << 16;
                    r3 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + -10376;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = r21 + r5;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31dec;
                        continue;
                    }
                case 0x31dc8:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r3 = r3 - r2;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r3;
                    pc=0x31820;
                    run_31800(); return;
                case 0x31dec:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31df8;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31df8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31dc8;
                    run_31c00(); return;
                case 0x31e08:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31e14;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31e14:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31d88;
                    run_31c00(); return;
                case 0x31e28:
                    r2 = 4 << 16;
                    r16 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + -10380;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31fe8;
                        continue;
                    }
                case 0x31e68:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31e88;
                        continue;
                    }
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31840;
                        run_31800(); return;
                    }
                case 0x31e88:
                    r2 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31fcc;
                        continue;
                    }
                case 0x31ec0:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r16 = r0 - r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31f68;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31fc4;
                        continue;
                    }
                    r30 = 4 << 16;
                    r17 = r30 + -13752;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x31ef0:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x31fa4;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x31f20:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31ef0;
                        continue;
                    }
                case 0x31f30:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -13752;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31f88;
                        continue;
                    }
                case 0x31f68:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                    pc=0x31824;
                    run_31800(); return;
                case 0x31f88:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31f94;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31f94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31f68;
                    continue;
                case 0x31fa4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31fb0;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31fb0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x31f20;
                    continue;
                case 0x31fc4:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x31f30;
                    continue;
                case 0x31fcc:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31fd8;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31fd8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31ec0;
                    continue;
                case 0x31fe8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x31ff4;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x31ff4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31e68;
                    continue;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r19 = r29 + 72;
                case 0x32004:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32214;
                        run_32200(); return;
                    }
                case 0x32018:
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 46;
                    r4 = r0 + 2;
                    addr=r29+488;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+489;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r29 + 488;
                    r2 = r2 + 2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    r21 = r21 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x321f8;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x32060:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x32144;
                        continue;
                    }
                    r4 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r3 = r4 + -1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    r2 = r2 + -1;
                case 0x320ac:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32128;
                        continue;
                    }
                case 0x320cc:
                    r2 = r29 + 48;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r3 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31840;
                        run_31800(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32118;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32118:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31840;
                    run_31800(); return;
                case 0x32128:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32134;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32134:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x320cc;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x31954;
                    run_31800(); return;
                case 0x32144:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x320cc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x321f0;
                        continue;
                    }
                    r30 = 4 << 16;
                    r18 = r30 + -13752;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x32174:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x321d0;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x321a4:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32174;
                        continue;
                    }
                case 0x321b4:
                    r2 = r30 + -13752;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r16;
                    pc=0x320ac;
                    continue;
                case 0x321d0:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x321dc;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x321dc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x321a4;
                    continue;
                case 0x321f0:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x321b4;
                    continue;
                case 0x321f8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32204;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r5 = r29 + 56;
                case 0x32204:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x32060;
                    run_32000(); return;
                case 0x32214:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32018;
                        run_32000(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x320cc;
                        run_32000(); return;
                    }
                    r19 = r19 + 8;
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32264;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32264:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x320cc;
                    run_32000(); return;
                case 0x32274:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32280;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32280:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x317fc;
                    run_31600(); return;
                case 0x32290:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x3229c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x3229c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x317b4;
                    run_31600(); return;
                case 0x322b0:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x317c4;
                    run_31600(); return;
                case 0x322b8:
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r3;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x31754;
                        run_31600(); return;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x323a0;
                        continue;
                    }
                    r30 = 4 << 16;
                    r18 = r30 + -13752;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x322ec:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x32380;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x3231c:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x322ec;
                        continue;
                    }
                case 0x3232c:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -13752;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31754;
                        run_31600(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32370;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32370:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31754;
                    run_31600(); return;
                case 0x32380:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x3238c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x3238c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x3231c;
                    continue;
                case 0x323a0:
                    /* Next insn is delay slot */ 
                    r30 = 4 << 16;
                    pc=0x3232c;
                    continue;
                case 0x323a8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x323b4;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x323b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x31748;
                        run_31600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x31954;
                    run_31800(); return;
                case 0x323c4:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31748;
                        run_31600(); return;
                    }
                    r2 = r0 + 48;
                    r3 = r0 + 2;
                    addr=r29+488;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+489;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 488;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 2;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31748;
                        run_31600(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x3242c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x3242c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31748;
                    run_31600(); return;
                case 0x3243c:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32448;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32448:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x316f8;
                    run_31600(); return;
                case 0x32458:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32464;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32464:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x316ac;
                    run_31600(); return;
                case 0x32478:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31634;
                        run_31600(); return;
                    }
                    r2 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + 2;
                    pc=0x31630;
                    run_31600(); return;
                case 0x3249c:
                    r5 = r21 + r0;
                case 0x324a0:
                    r4 = readPages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff];
                    r2 = r17 & 15;
                    r2 = r4 + r2;
                    r17 = r17 >>> 4;
                    r4 = r16 << 28;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r17 = r17 | r4;
                    r16 = r16 >>> 4;
                    r5 = r5 + -1;
                    r2 = r16 | r17;
                    r21 = r21 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r5+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x324a0;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x324d4:
                    r2 = r29 - r21;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 484;
                    pc=0x315fc;
                    run_31400(); return;
                case 0x324e0:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r21 + r0;
                        pc=0x315e8;
                        run_31400(); return;
                    }
                    r4 = r21 + r0;
                case 0x324e8:
                    r2 = r17 & 7;
                    r3 = r16 << 29;
                    r17 = r17 >>> 3;
                    r2 = r2 + 48;
                    r4 = r4 + -1;
                    r17 = r17 | r3;
                    r16 = r16 >>> 3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 | r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + -1;
                        pc=0x324e8;
                        continue;
                    }
                    r21 = r21 + -1;
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x324d4;
                        continue;
                    }
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 48;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x324d4;
                        continue;
                    }
                    r21 = r21 + -1;
                    /* Next insn is delay slot */ 
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x324d4;
                    continue;
                case 0x32544:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x325b8;
                        continue;
                    }
                case 0x3254c:
                    r18 = r21 + r0;
                case 0x32550:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r0 + 0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 10;
                    r31=0x32564;
                    pc=0x107ec;
                    run_10600(); return;
                case 0x32564:
                    r4 = r3 + 48;
                    r18 = r18 + -1;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 10;
                    r31=0x32584;
                    pc=0x10218;
                    run_10200(); return;
                case 0x32584:
                    r16 = r2 + r0;
                    r21 = r21 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r3 + r0;
                        pc=0x32550;
                        continue;
                    }
                    r17 = r3 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x325a8;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32550;
                        continue;
                    }
                case 0x325a8:
                    r21 = r21 + -1;
                    r2 = r17 + 48;
                    /* Next insn is delay slot */ 
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x324d4;
                    continue;
                case 0x325b8:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x325a8;
                        continue;
                    }
                    r2 = (r17&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3254c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x325a8;
                    continue;
                case 0x325d4:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x324d4;
                        continue;
                    }
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x324d4;
                        continue;
                    }
                    r2 = r0 + 48;
                    r21 = r29 + 483;
                    /* Next insn is delay slot */ 
                    addr=r29+483;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x324d4;
                    continue;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r3 = r0 + 45;
                    r17 = r0 - r17;
                    r16 = r0 - r16;
                    r2 = ((r0 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 - r2;
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3158c;
                    run_31400(); return;
                case 0x3261c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32660;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r4 + 3;
                case 0x3263c:
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r17 = r2 + r0;
                case 0x32658:
                    /* Next insn is delay slot */ 
                    r16 = r2 >> 31;
                    pc=0x31584;
                    run_31400(); return;
                case 0x32660:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x326a0;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    r2 = r2 << 16;
                    r17 = r2 >> 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    pc=0x32658;
                    continue;
                case 0x326a0:
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r2 + 3;
                    pc=0x3263c;
                    continue;
                case 0x326b0:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 | 8;
                    pc=0x31444;
                    run_31400(); return;
                case 0x326c0:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x326d0:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32714;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x32708:
                    r3 = r0 + r0;
                case 0x3270c:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x31590;
                    run_31400(); return;
                case 0x32714:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32754;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r4 + 3;
                case 0x32734:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x32744:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x32708;
                    continue;
                case 0x32754:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32788;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x32744;
                    continue;
                case 0x32788:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 3;
                    pc=0x32734;
                    continue;
                case 0x32798:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x327a8:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x327e8;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x327e0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 1;
                    pc=0x3270c;
                    continue;
                case 0x327e8:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32828;
                        run_32800(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r2 = r4 + 3;
                case 0x32808:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x32818:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x327e0;
                    run_32600(); return;
                case 0x32828:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3285c;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x32818;
                    continue;
                case 0x3285c:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 3;
                    pc=0x32808;
                    continue;
                case 0x3286c:
                    r2 = 4 << 16;
                    r2 = r2 + -13708;
                case 0x32874:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r2;
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x328dc;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 7;
                    r3 = r0 + -8;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x328b0:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3270c;
                        run_32600(); return;
                    }
                    r2 = r16 | r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3270c;
                        run_32600(); return;
                    }
                    r4 = r4 | 2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                    pc=0x3270c;
                    run_32600(); return;
                case 0x328dc:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3291c;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                case 0x328fc:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x3290c:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x328b0;
                    continue;
                case 0x3291c:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32954;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x3290c;
                    continue;
                case 0x32954:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r4 + 3;
                    pc=0x328fc;
                    continue;
                case 0x32964:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    addr=r4+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    r21 = r29 + 136;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    addr=r29+136;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3298c:
                    r23 = r0 + 1;
                case 0x32990:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x315fc;
                    run_31400(); return;
                case 0x32998:
                    r2 = r0 + -1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32c54;
                        run_32c00(); return;
                    }
                    r2 = r0 + 103;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32c44;
                        run_32c00(); return;
                    }
                    r2 = r0 + 71;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32c44;
                        run_32c00(); return;
                    }
                case 0x329bc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32c34;
                        run_32c00(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r4 + 7;
                case 0x329dc:
                    r3 = r0 + -8;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r2;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r3;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f12 = r3;
                    f13 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x32a1c;
                    pc=0x38000;
                    run_38000(); return;
                case 0x32a1c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a68;
                        continue;
                    }
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x32a58;
                        continue;
                    }
                    r3 = r0 + 45;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x32a58:
                    r2 = 4 << 16;
                    r21 = r2 + -10372;
                case 0x32a60:
                    /* Next insn is delay slot */ 
                    r23 = r0 + 3;
                    pc=0x315fc;
                    run_31400(); return;
                case 0x32a68:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f12 = r3;
                    f13 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x32a84;
                    pc=0x38200;
                    run_38200(); return;
                case 0x32a84:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32a98;
                        continue;
                    }
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r21 = r2 + -10368;
                    pc=0x32a60;
                    continue;
                case 0x32a98:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r29 + 41;
                    r3 = r3 | 256;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = r29 + 508;
                    r2 = r29 + 512;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r4 = readPages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff];
                    r7 = r3 + r0;
                    r6 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r22;
                    r31=0x32ae0;
                    pc=0x33000;
                    run_33000(); return;
                case 0x32ae0:
                    r3 = r0 + 103;
                    if(r22 == r3) {
                        /* Next insn is delay slot */ 
                        r21 = r2 + r0;
                        pc=0x32bf8;
                        continue;
                    }
                    r21 = r2 + r0;
                    r2 = r0 + 71;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32bf8;
                        continue;
                    }
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                case 0x32afc:
                    r2 = r22 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32ba0;
                        continue;
                    }
                case 0x32b08:
                    r2 = r0 + 102;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32b70;
                        continue;
                    }
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r5 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32b5c;
                        continue;
                    }
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r23 = r5 + r0;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32b40;
                        continue;
                    }
                    r23 = r5 + 1;
                case 0x32b40:
                    addr=r29+41;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x315fc;
                        run_31400(); return;
                    }
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x315fc;
                    run_31400(); return;
                case 0x32b5c:
                    if(r5 > 0) {
                        /* Next insn is delay slot */ 
                        r23 = r3 + 1;
                        pc=0x32b40;
                        continue;
                    }
                    r23 = r3 + 1;
                    r2 = r3 - r5;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 2;
                    pc=0x32b40;
                    continue;
                case 0x32b70:
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        r23 = r18 + 2;
                        pc=0x32b40;
                        continue;
                    }
                    r23 = r18 + 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r23 = r5 + r0;
                        pc=0x32b94;
                        continue;
                    }
                    r23 = r5 + r0;
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32b40;
                        continue;
                    }
                case 0x32b94:
                    r2 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 1;
                    pc=0x32b40;
                    continue;
                case 0x32ba0:
                    r5 = r5 + -1;
                    r4 = r29 + 48;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff] = r5;
                    r31=0x32bb4;
                    pc=0x33200;
                    run_33200(); return;
                case 0x32bb4:
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r23 = r3 + r2;
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32bdc;
                        continue;
                    }
                case 0x32bd4:
                    /* Next insn is delay slot */ 
                    r23 = r23 + 1;
                    pc=0x32b40;
                    continue;
                case 0x32bdc:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32b40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x32bd4;
                    continue;
                case 0x32bf8:
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r2 = r5 < -3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32c18;
                        continue;
                    }
                    r2 = r18 < r5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32c2c;
                        continue;
                    }
                case 0x32c18:
                    if(r22 == r3) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 101;
                        pc=0x32c24;
                        continue;
                    }
                    r2 = r0 + 101;
                    r2 = r0 + 69;
                case 0x32c24:
                    /* Next insn is delay slot */ 
                    r22 = r2 + r0;
                    pc=0x32afc;
                    run_32a00(); return;
                case 0x32c2c:
                    /* Next insn is delay slot */ 
                    r22 = r0 + 103;
                    pc=0x32b08;
                    run_32a00(); return;
                case 0x32c34:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 7;
                    pc=0x329dc;
                    run_32800(); return;
                case 0x32c44:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x329bc;
                        run_32800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r18 = r0 + 1;
                    pc=0x329bc;
                    run_32800(); return;
                case 0x32c54:
                    /* Next insn is delay slot */ 
                    r18 = r0 + 6;
                    pc=0x329bc;
                    run_32800(); return;
                case 0x32c5c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r3 | 64;
                    pc=0x31400;
                    run_31400(); return;
                case 0x32c6c:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 108;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x32c94;
                        continue;
                    }
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x313a0;
                    run_31200(); return;
                case 0x32c94:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r4 | 32;
                    pc=0x314f4;
                    run_31400(); return;
                case 0x32ca4:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32d48;
                        continue;
                    }
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32d00;
                        continue;
                    }
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r2 + 3;
                case 0x32cd8:
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    pc=0x312ec;
                    run_31200(); return;
                case 0x32d00:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32d48;
                        continue;
                    }
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r2 + 3;
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x312ec;
                    run_31200(); return;
                case 0x32d48:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r4 + 3;
                    pc=0x32cd8;
                    continue;
                case 0x32d58:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r2 = 4 << 16;
                    r2 = r2 + -13688;
                    r4 = r3 + r0;
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = r2 | 2;
                    r16 = r0 + r0;
                    r3 = r0 + 2;
                    r22 = r0 + 120;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x3270c;
                    run_32600(); return;
                case 0x32da0:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r3 | 32;
                    pc=0x31400;
                    run_31400(); return;
                case 0x32db0:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                        pc=0x32e20;
                        run_32e00(); return;
                    }
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x32dd8:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e10;
                        run_32e00(); return;
                    }
                    r4 = r21 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x32df0;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x32df0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r18 + r0;
                        pc=0x32990;
                        run_32800(); return;
                    }
                    r23 = r18 + r0;
                    r23 = r2 - r21;
                    r2 = r18 < r23 ? 1 : 0;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32990;
                        run_32800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r23 = r18 + r0;
                    pc=0x32990;
                    run_32800(); return;
                case 0x32e10:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x32e18;
                    pc=0x101c0;
                    run_10000(); return;
                case 0x32e18:
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    pc=0x32990;
                    run_32800(); return;
                case 0x32e20:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r21 = r2 + -10364;
                    pc=0x32dd8;
                    run_32c00(); return;
                case 0x32e2c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e40;
                        continue;
                    }
                    r21 = r29 + 136;
                    /* Next insn is delay slot */ 
                    addr=r29+136;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3298c;
                    run_32800(); return;
                case 0x32e40:
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e58;
                        continue;
                    }
                case 0x32e50:
                    /* Next insn is delay slot */ 
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    pc=0x31954;
                    run_31800(); return;
                case 0x32e58:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32e64;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32e64:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x32e50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x31954;
                    run_31800(); return;
                case 0x32e74:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -13688;
                    pc=0x32874;
                    run_32800(); return;
                case 0x32e80:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x32e8c;
                    pc=0x30c00;
                    run_30c00(); return;
                case 0x32e8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x31954;
                        run_31800(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x31368;
                    run_31200(); return;
                case 0x32e9c:
                    r3 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r3+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x312d4;
                        run_31200(); return;
                    }
                    r6 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x32ec4;
                    pc=0x30e00;
                    run_30e00(); return;
                case 0x32ec4:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x31974;
                    run_31800(); return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r29 = r29 + -72;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f21;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    f20 = r7;
                    f21 = r6;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r6 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 3;
                        pc=0x3305c;
                        continue;
                    }
                    r5 = r0 + 3;
                    r2 = r0 + 101;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x331cc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x331cc;
                        continue;
                    }
                case 0x33058:
                    r5 = r0 + 2;
                case 0x3305c:
                    r3 = f20;
                    r2 = f21;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x331bc;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x33074:
                    r7 = f20;
                    r6 = f21;
                    r2 = r29 + 40;
                    r3 = r29 + 44;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r31=0x3309c;
                    pc=0x34200;
                    run_34200(); return;
                case 0x3309c:
                    r8 = r2 + r0;
                    r2 = r0 + 103;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3319c;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3319c;
                        continue;
                    }
                case 0x330b8:
                    r2 = r0 + 102;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        r6 = r8 + r17;
                        pc=0x33150;
                        continue;
                    }
                    r6 = r8 + r17;
                case 0x330c4:
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x330e4;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                case 0x330e4:
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33120;
                        continue;
                    }
                    r7 = r0 + 48;
                    r5 = r3 + 1;
                    r4 = r3 + r0;
                case 0x33104:
                    r3 = r5 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r5;
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x33104;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x33120:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r3 - r8;
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    f20 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r8 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x33150:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33170;
                        continue;
                    }
                case 0x33160:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r6 + r2;
                    pc=0x330c4;
                    continue;
                case 0x33170:
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x33160;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r17;
                    /* Next insn is delay slot */ 
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    pc=0x33160;
                    continue;
                case 0x3319c:
                    r2 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x330b8;
                        continue;
                    }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x33120;
                    continue;
                case 0x331bc:
                    r2 = r0 + 45;
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    /* Next insn is delay slot */ 
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x33074;
                    continue;
                case 0x331cc:
                    /* Next insn is delay slot */ 
                    r17 = r17 + 1;
                    pc=0x33058;
                    continue;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r29 = r29 + -40;
                    r10 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 43;
                        pc=0x332dc;
                        continue;
                    }
                    r2 = r0 + 43;
                case 0x33214:
                    addr=r10+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r29 + 40;
                    r2 = r5 < 10 ? 1 : 0;
                    r8 = r10 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r6 + r0;
                        pc=0x332c0;
                        continue;
                    }
                    r11 = r6 + r0;
                    r9 = 26214 << 16;
                    r9 = r9 | 26215;
                    r7 = r6 + r0;
                case 0x33238:
                    { long hilo = (long)(r5) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r5 >> 31;
                    r7 = r7 + -1;
                    r6 = r6 + -1;
                    r3 = hi;
                    r3 = r3 >> 2;
                    r3 = r3 - r4;
                    r2 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = r2 << 1;
                    r2 = r5 - r2;
                    r2 = r2 + 48;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r3 + r0;
                        pc=0x33238;
                        continue;
                    }
                    r5 = r3 + r0;
                    r6 = r6 + -1;
                    r2 = r3 + 48;
                    r3 = ((r6 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r6+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x332b4;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r8 + r0;
                    r3 = r6 + r0;
                case 0x33294:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r6 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = ((r6 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r3 = r3 + 1;
                    r8 = r8 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x33294;
                        continue;
                    }
                    r4 = r4 + 1;
                case 0x332b4:
                    r2 = r8 - r10;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x332c0:
                    r2 = r0 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r2 = r5 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r8 = r8 + 1;
                    pc=0x332b4;
                    continue;
                case 0x332dc:
                    r5 = r0 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r0 + 45;
                    pc=0x33214;
                    continue;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r6 + r0;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r6 = r7 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 + -1;
                        pc=0x33434;
                        continue;
                    }
                    r2 = r16 + -1;
                    r2 = r0 + r0;
                case 0x33434:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x3344c;
                    pc=0x31000;
                    run_31000(); return;
                case 0x3344c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33460;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x33460:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r4 = readPages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33634;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x33634:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33738;
                        continue;
                    }
                case 0x33644:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                        pc=0x33668;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3367c;
                        continue;
                    }
                case 0x33668:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x33670;
                    pc=0x33800;
                    run_33800(); return;
                case 0x33670:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x336ec;
                        continue;
                    }
                    r3 = r0 + -1;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x3367c:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 & 255;
                    r4 = r3 - r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3371c;
                        continue;
                    }
                case 0x3369c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33704;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x336e8;
                        continue;
                    }
                    r2 = r0 + 10;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x33704;
                        continue;
                    }
                case 0x336e8:
                    r3 = r17 + r0;
                case 0x336ec:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x33704:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x3370c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x3370c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x336e8;
                        continue;
                    }
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x336ec;
                    continue;
                case 0x3371c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x33724;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x33724:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x336ec;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x3369c;
                    continue;
                case 0x33738:
                    /* Next insn is delay slot */ 
                    r31=0x33740;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x33740:
                    /* Next insn is delay slot */ 
                    pc=0x33644;
                    continue;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33830;
                        continue;
                    }
                    r2 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x33830:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3394c;
                        continue;
                    }
                case 0x33840:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r3 = r4 & 65535;
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33940;
                        continue;
                    }
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x338f4;
                        continue;
                    }
                    r5 = r0 + -1;
                    r2 = r3 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33934;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x338a0;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3389c;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x33898;
                    pc=0x2b200;
                    run_2b200(); return;
                case 0x33898:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                case 0x3389c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x338a0:
                    r2 = r0 + -37;
                    r2 = r4 & r2;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x338bc:
                    r2 = r4 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x338c4:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33924;
                        continue;
                    }
                case 0x338cc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33908;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x338f0:
                    r5 = r0 + r0;
                case 0x338f4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x33908:
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3391c;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                case 0x3391c:
                    /* Next insn is delay slot */ 
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    pc=0x338f0;
                    continue;
                case 0x33924:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x3392c;
                    pc=0x2cc00;
                    run_2cc00(); return;
                case 0x3392c:
                    /* Next insn is delay slot */ 
                    pc=0x338cc;
                    continue;
                case 0x33934:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x338bc;
                    continue;
                case 0x33940:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x338c4;
                    continue;
                case 0x3394c:
                    /* Next insn is delay slot */ 
                    r31=0x33954;
                    pc=0x2a400;
                    run_2a400(); return;
                case 0x33954:
                    /* Next insn is delay slot */ 
                    pc=0x33840;
                    continue;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r2 = r0 + 1;
                    pc = 0x33a04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33a08;
                        return;
                    }
                case 0x33a08:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a10:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33a24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33a28;
                        return;
                    }
                case 0x33a28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33a40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33a50:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33a64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33a68;
                        return;
                    }
                case 0x33a68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33a80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33a90:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33aa4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33aa8;
                        return;
                    }
                case 0x33aa8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33ac0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33ac0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33ad0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33ae4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33ae8;
                        return;
                    }
                case 0x33ae8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33b00:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33b10:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33b24;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33b28;
                        return;
                    }
                case 0x33b28:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33b40:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33b50:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33b64;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33b68;
                        return;
                    }
                case 0x33b68:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33b80;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33b80:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33b90:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x33ba4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33ba8;
                        return;
                    }
                case 0x33ba8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33bc0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33bc0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x33c00;
                    run_33c00(); return;
                case 0x33bd0:
                    r2 = r0 + 19;
                    pc = 0x33bd4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33bd8;
                        return;
                    }
                case 0x33bd8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33be0:
                    r2 = r0 + 37;
                    pc = 0x33be4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33be8;
                        return;
                    }
                case 0x33be8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33bf0:
                    r2 = r0 + 38;
                    pc = 0x33bf4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x33bf8;
                        return;
                    }
                case 0x33bf8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r5 = r0 - r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    pc=r31;
                    return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r21 = r4 + r0;
                    r2 = r2 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x34050;
                        run_34000(); return;
                    }
                    r3 = r0 + r0;
                    r18 = r18 + -1;
                    r9 = r5 + 20;
                    r2 = r18 << 2;
                    r17 = r9 + r2;
                    r19 = r4 + 20;
                    r12 = r19 + r2;
                    r3 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r14 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    if(r3!=0) {
                    hi = (int)((r14 & 0xffffffffL) % (r3 & 0xffffffffL)); lo = (int)((r14 & 0xffffffffL) / (r3 & 0xffffffffL));
                    }
                    r22 = r9 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33e74;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x33e74:
                    r16 = lo;
                    r20 = lo;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f5c;
                        continue;
                    }
                    r10 = r0 + r0;
                    r13 = r0 + r0;
                    r8 = r19 + r0;
                    r11 = r9 + r0;
                case 0x33e94:
                    r3 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r4 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    { long hilo = (long)(r2) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 >>> 16;
                    r9 = r9 + 4;
                    r11 = r11 + 4;
                    r2 = lo;
                    r6 = r2 + r13;
                    r2 = r6 >>> 16;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r7 = r3 + r2;
                    r2 = r4 & 65535;
                    r3 = r6 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r10;
                    r4 = r4 >>> 16;
                    r2 = r7 & 65535;
                    r10 = r3 >> 16;
                    r4 = r4 - r2;
                    r2 = r4 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r2 >> 16;
                    r2 = ((r17 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    addr=r8+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r13 = r7 >>> 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x33e94;
                        continue;
                    }
                    r8 = r8 + 4;
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f5c;
                        continue;
                    }
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f58;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f58;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x33f34:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -4;
                        pc=0x33f58;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x33f34;
                        continue;
                    }
                case 0x33f58:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r18;
                case 0x33f5c:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x33f64;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x33f64:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3404c;
                        run_34000(); return;
                    }
                    r20 = r16 + 1;
                    r10 = r0 + r0;
                    r13 = r0 + r0;
                    r9 = r22 + r0;
                    r5 = r19 + r0;
                    r8 = r22 + r0;
                case 0x33f84:
                    r3 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    r6 = r2 + r13;
                    r3 = r3 >>> 16;
                    r2 = r6 >>> 16;
                    r7 = r3 + r2;
                    r2 = r4 & 65535;
                    r3 = r6 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r10;
                    r4 = r4 >>> 16;
                    r2 = r7 & 65535;
                    r10 = r3 >> 16;
                    r4 = r4 - r2;
                    r2 = r4 + r10;
                    r9 = r9 + 4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r2 >> 16;
                    r2 = ((r17 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    r13 = r7 >>> 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x33f84;
                        continue;
                    }
                    r5 = r5 + 4;
                    r2 = r18 << 2;
                    r12 = r19 + r2;
                    r3 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3404c;
                        run_34000(); return;
                    }
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34048;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34048;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x34024:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -4;
                        pc=0x34048;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34024;
                        continue;
                    }
                case 0x34048:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r18;
                case 0x3404c:
                    r3 = r20 + r0;
                case 0x34050:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r19;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r18;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r23;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r22;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r21;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r20;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r17;
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r30 = r4 + r0;
                    r16 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    r18 = r6 + r0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r7 + r0;
                        pc=0x355f4;
                        run_35400(); return;
                    }
                    r19 = r7 + r0;
                case 0x34248:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x355dc;
                        run_35400(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                case 0x34254:
                    r3 = 32752 << 16;
                    r2 = r18 & r3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x35570;
                        run_35400(); return;
                    }
                    f2 = r19;
                    f3 = r18;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x342e0;
                        continue;
                    }
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = 4 << 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r3 + -10352;
                        pc=0x342ac;
                        continue;
                    }
                    r22 = r3 + -10352;
                    r2 = r22 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x342ac:
                    r2 = r22 + r0;
                case 0x342b0:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r30 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r23 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r22 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r21 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r20 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r19 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r17 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r16 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 136;
                    pc=r31;
                    return;
                case 0x342e0:
                    r2 = r29 + 24;
                    r3 = r29 + 28;
                    r4 = r30 + r0;
                    r6 = r18 + r0;
                    r7 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x34300;
                    pc=0x37e00;
                    run_37e00(); return;
                case 0x34300:
                    r23 = r2 + r0;
                    r2 = r18 >>> 20;
                    r21 = r2 & 2047;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x354ec;
                        run_35400(); return;
                    }
                    r2 = 15 << 16;
                    r6 = r18 + r0;
                    r2 = r2 | 65535;
                    r6 = r2 & r6;
                    r3 = 16368 << 16;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = r19 + r0;
                    r6 = r3 | r6;
                    r21 = r21 + -1023;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r0;
                case 0x3433c:
                    f2 = r7;
                    f3 = r6;
                    f1 = readPages[(r28+-32496)>>>12][((r28+-32496)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32492)>>>12][((r28+-32492)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32480)>>>12][((r28+-32480)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32476)>>>12][((r28+-32476)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32488)>>>12][((r28+-32488)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32484)>>>12][((r28+-32484)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f4 = r21;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f5 = readPages[(r28+-32472)>>>12][((r28+-32472)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32468)>>>12][((r28+-32468)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34400;
                        run_34400(); return;
                    }
                    f2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34400;
                        run_34400(); return;
                    }
                    r2 = f2;
                    r2 = r2 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r2 = (r4&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                        pc=0x34454;
                        continue;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    r3 = 4 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + -13216;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34450;
                        continue;
                    }
                    r4 = r4 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r4;
                case 0x34450:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                case 0x34454:
                    r2 = r5 - r21;
                    r16 = r2 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x354dc;
                        run_35400(); return;
                    }
                    r17 = r16 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                case 0x3446c:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x354bc;
                        run_35400(); return;
                    }
                    r17 = r17 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x34488:
                    r12 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = (r12&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344a0;
                        continue;
                    }
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                case 0x344a0:
                    r13 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r20 = r0 + 1;
                    r2 = r13 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x344c0;
                        continue;
                    }
                    r13 = r13 + -4;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r13;
                    r20 = r0 + r0;
                case 0x344c0:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = (r4&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                        pc=0x34508;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r3 = 4 << 16;
                    r2 = r4 << 2;
                    r3 = r3 + -13300;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x34500:
                    r21 = r0 + 18;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                case 0x34508:
                    r2 = (r21&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r0;
                        pc=0x34534;
                        continue;
                    }
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r0;
                    r3 = r0 + r0;
                case 0x3451c:
                    r16 = r16 << 1;
                    r2 = r16 + 20;
                    r2 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x3451c;
                        continue;
                    }
                    r3 = r3 + 1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r3;
                case 0x34534:
                    r5 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x34540;
                    pc=0x36600;
                    run_36600(); return;
                case 0x34540:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r2;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r22 = r2 + r0;
                    r2 = (r4&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34740;
                        run_34600(); return;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34740;
                        run_34600(); return;
                    }
                    r10 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r9 = r4 + r0;
                    r6 = r18 + r0;
                    r7 = r19 + r0;
                    if(r10 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + 2;
                        pc=0x353c4;
                        run_35200(); return;
                    }
                    r4 = r0 + 2;
                    r2 = r10 & 15;
                    r3 = 4 << 16;
                    r2 = r2 << 3;
                    r3 = r3 + -13216;
                    r2 = r2 + r3;
                    r16 = r10 >> 4;
                    f5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r16 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345d0;
                        continue;
                    }
                    f2 = r19;
                    f3 = r18;
                    r1 = 4 << 16;
                    f1 = readPages[(r1+-12984)>>>12][((r1+-12984)>>>2)&0x3ff];
                    f0 = readPages[(r1+-12980)>>>12][((r1+-12980)>>>2)&0x3ff];
                    r16 = r16 & 15;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = r0 + 3;
                    r19 = f0;
                    r18 = f1;
                case 0x345d0:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34608;
                        run_34600(); return;
                    }
                    r2 = 4 << 16;
                    r3 = r2 + -13016;
                case 0x345e0:
                    r2 = r16 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x345fc;
                        continue;
                    }
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                case 0x345fc:
                    r16 = r16 >> 1;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x345e0;
                        run_34400(); return;
                    }
                    r3 = r3 + 8;
                case 0x34608:
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r19 = f4;
                    r18 = f5;
                case 0x34620:
                    r2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3469c;
                        continue;
                    }
                    f1 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3469c;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3469c;
                        continue;
                    }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3472c;
                        continue;
                    }
                    f1 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r5 + -1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                    r4 = r4 + 1;
                    r19 = f0;
                    r18 = f1;
                case 0x3469c:
                    f2 = r4;
                    f4 = r19;
                    f5 = r18;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff];
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = f0;
                    r4 = f1;
                    r4 = r2 + r4;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3517c;
                        run_35000(); return;
                    }
                    f1 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    f2 = r5;
                    f3 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                    r19 = f0;
                    r18 = f1;
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x349b0;
                        run_34800(); return;
                    }
                    f4 = r19;
                    f5 = r18;
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34950;
                        run_34800(); return;
                    }
                case 0x3472c:
                    r22 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r10;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                case 0x34740:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x349d0;
                        run_34800(); return;
                    }
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r4 < 15 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x349d0;
                        run_34800(); return;
                    }
                    r2 = 4 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + -13216;
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34910;
                        run_34800(); return;
                    }
                case 0x34788:
                    r21 = r0 + 1;
                case 0x3478c:
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r3 = f2;
                    { long l = Double.doubleToLongBits(((double)f2)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + 48;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x34864;
                        run_34800(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    f0 = r0;
                    f1 = r0;
                    f6 = r19;
                    f7 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3478c;
                        run_34600(); return;
                    }
                case 0x34824:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x34830;
                    pc=0x36800;
                    run_36800(); return;
                case 0x34830:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r12 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r13 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r12 + 1;
                    writePages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34858;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r22;
                case 0x34858:
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x342b0;
                    run_34200(); return;
                case 0x34864:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34894;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34824;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34824;
                        continue;
                    }
                case 0x34894:
                    r22 = r22 + -1;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 57;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x348c0;
                        continue;
                    }
                case 0x348a8:
                    r3 = r22 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x34824;
                    continue;
                case 0x348c0:
                    r4 = r0 + 57;
                    r3 = r22 + r0;
                case 0x348c8:
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x348f4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x348c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x348a8;
                    continue;
                case 0x348f4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r0 + 48;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x348a8;
                    continue;
                case 0x34910:
                    r12 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r12 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34788;
                        run_34600(); return;
                    }
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    if(r12 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                        pc=0x34950;
                        continue;
                    }
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x349b0;
                        continue;
                    }
                case 0x34950:
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = ~(r0 | r5);
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                case 0x34960:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3496c;
                    pc=0x36800;
                    run_36800(); return;
                case 0x3496c:
                    r4 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34824;
                        continue;
                    }
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3499c;
                        continue;
                    }
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3499c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3499c;
                    pc=0x36800;
                    run_36800(); return;
                case 0x3499c:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x349a8;
                    pc=0x36800;
                    run_36800(); return;
                case 0x349a8:
                    /* Next insn is delay slot */ 
                    pc=0x34824;
                    continue;
                case 0x349b0:
                    r12 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    addr=r12+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r12 + 1;
                    r13 = r13 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r13;
                    pc=0x34960;
                    continue;
                case 0x349d0:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 < 2 ? 1 : 0;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r4;
                        pc=0x34a68;
                        run_34a00(); return;
                    }
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3515c;
                        run_35000(); return;
                    }
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    r4 = r3 - r16;
                    r2 = r3 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                        pc=0x34a38;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r16 = r16 - r3;
                    r5 = r5 + r16;
                    r3 = r3 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r5;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x34a38:
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r21 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35148;
                        run_35000(); return;
                    }
                case 0x34a48:
                    r13 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r13 = r13 + r21;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r13;
                    r31=0x34a60;
                    pc=0x37000;
                    run_37000(); return;
                case 0x34a60:
                    r17 = r17 + r21;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x34a68:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a9c;
                        continue;
                    }
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a9c;
                        continue;
                    }
                    r2 = r20 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r21 = r17 + r0;
                        pc=0x34a88;
                        continue;
                    }
                    r21 = r17 + r0;
                    r21 = r20 + r0;
                case 0x34a88:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = r20 - r21;
                    r2 = r2 - r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r17 = r17 - r21;
                case 0x34a9c:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b1c;
                        continue;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35138;
                        run_35000(); return;
                    }
                    r5 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b04;
                        continue;
                    }
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x34adc;
                    pc=0x37600;
                    run_37600(); return;
                case 0x34adc:
                    r5 = r2 + r0;
                    r6 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r31=0x34af0;
                    pc=0x37200;
                    run_37200(); return;
                case 0x34af0:
                    r16 = r2 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x34b00;
                    pc=0x36800;
                    run_36800(); return;
                case 0x34b00:
                    r23 = r16 + r0;
                case 0x34b04:
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r13 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = r12 - r13;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3511c;
                        run_35000(); return;
                    }
                case 0x34b1c:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x34b28;
                    pc=0x37000;
                    run_37000(); return;
                case 0x34b28:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34b50;
                        continue;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x34b4c;
                    pc=0x37600;
                    run_37600(); return;
                case 0x34b4c:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                case 0x34b50:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ba0;
                        continue;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ba0;
                        continue;
                    }
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r18 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ba0;
                        continue;
                    }
                    r2 = 32752 << 16;
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34ba0;
                        continue;
                    }
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r16 = r0 + 1;
                case 0x34ba0:
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r17 + 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350f0;
                        run_35000(); return;
                    }
                case 0x34bb0:
                    r21 = r2 & 31;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34bc4;
                        continue;
                    }
                    r2 = r0 + 32;
                    r21 = r2 - r21;
                case 0x34bc4:
                    r2 = r21 < 5 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350d0;
                        run_35000(); return;
                    }
                    r13 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = r21 + -4;
                    r13 = r13 + r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r13;
                case 0x34be0:
                    r20 = r20 + r21;
                    r17 = r17 + r21;
                case 0x34be8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c0c;
                        run_34c00(); return;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    r31=0x34c08;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34c08:
                    r23 = r2 + r0;
                case 0x34c0c:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c28;
                        continue;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x34c24;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34c24:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                case 0x34c28:
                    r4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35060;
                        run_35000(); return;
                    }
                case 0x34c38:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35008;
                        run_35000(); return;
                    }
                case 0x34c48:
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34fb4;
                        run_34e00(); return;
                    }
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c74;
                        continue;
                    }
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x34c70;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34c70:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x34c74:
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                        pc=0x34f70;
                        run_34e00(); return;
                    }
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                case 0x34c84:
                    r18 = r19 & 1;
                    r21 = r0 + 1;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    r19 = r22 + r0;
                case 0x34c94:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x34ca0;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x34ca0:
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r2 + 48;
                    r31=0x34cb0;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x34cb0:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x34cc4;
                    pc=0x37c00;
                    run_37c00(); return;
                case 0x34cc4:
                    r17 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r20 = r0 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f5c;
                        run_34e00(); return;
                    }
                case 0x34cd8:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x34ce4;
                    pc=0x36800;
                    run_36800(); return;
                case 0x34ce4:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d0c;
                        continue;
                    }
                    r13 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d0c;
                        continue;
                    }
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f40;
                        run_34e00(); return;
                    }
                case 0x34d0c:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34edc;
                        run_34e00(); return;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d3c;
                        continue;
                    }
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34d3c;
                        continue;
                    }
                    r5 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34edc;
                        run_34e00(); return;
                    }
                case 0x34d3c:
                    if(r20 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34eb4;
                        run_34e00(); return;
                    }
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 1;
                        pc=0x34dd8;
                        continue;
                    }
                    r19 = r19 + 1;
                    r4 = r30 + r0;
                    r5 = r23 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x34d6c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34d6c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x34db8;
                        continue;
                    }
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x34d94;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34d94:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    r31=0x34dac;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34dac:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x34db0:
                    /* Next insn is delay slot */ 
                    r21 = r21 + 1;
                    pc=0x34c94;
                    continue;
                case 0x34db8:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x34dcc;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34dcc:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    pc=0x34db0;
                    continue;
                case 0x34dd8:
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x34de8;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34de8:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    r31=0x34df8;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x34df8:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e7c;
                        run_34e00(); return;
                    }
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r22 = r22 + -1;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 57;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34e2c;
                        continue;
                    }
                case 0x34e14:
                    r3 = r22 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + 1;
                    r2 = r2 + 1;
                case 0x34e24:
                    /* Next insn is delay slot */ 
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x34960;
                    run_34800(); return;
                case 0x34e2c:
                    r4 = r0 + 57;
                    r3 = r22 + r0;
                case 0x34e34:
                    r12 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    if(r22 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x34e60;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x34e34;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x34e14;
                    continue;
                case 0x34e60:
                    r13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r13 = r13 + 1;
                    r2 = r0 + 49;
                    r22 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r13;
                    pc=0x34e24;
                    continue;
                case 0x34e7c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e90;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34e00;
                        continue;
                    }
                case 0x34e90:
                    r4 = r0 + 48;
                    r3 = r22 + r0;
                case 0x34e98:
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x34e98;
                        continue;
                    }
                case 0x34eac:
                    /* Next insn is delay slot */ 
                    r22 = r22 + 1;
                    pc=0x34960;
                    run_34800(); return;
                case 0x34eb4:
                    r12 = r0 + 57;
                    if(r18 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x34ecc;
                        continue;
                    }
                    r2 = r18 + 1;
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x34eac;
                    continue;
                case 0x34ecc:
                    r13 = r0 + 57;
                    r22 = r22 + 1;
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x34e00;
                    continue;
                case 0x34edc:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f1c;
                        continue;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x34ef4;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34ef4:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    r31=0x34f04;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x34f04:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f24;
                        continue;
                    }
                case 0x34f0c:
                    r18 = r18 + 1;
                    r2 = r0 + 58;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34ecc;
                        continue;
                    }
                case 0x34f1c:
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x34eac;
                    continue;
                case 0x34f24:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f1c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x34f0c;
                    continue;
                case 0x34f40:
                    r3 = r0 + 57;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x34ecc;
                        continue;
                    }
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34f1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r18 = r18 + 1;
                    pc=0x34f1c;
                    continue;
                case 0x34f5c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x34f68;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x34f68:
                    /* Next insn is delay slot */ 
                    r20 = r2 + r0;
                    pc=0x34cd8;
                    run_34c00(); return;
                case 0x34f70:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x34f7c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x34f7c:
                    r12 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r2 + 12;
                    r6 = readPages[(r12+16)>>>12][((r12+16)>>>2)&0x3ff];
                    r5 = r12 + 12;
                    r6 = r6 << 2;
                    r6 = r6 + 8;
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r31=0x34f9c;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x34f9c:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x34fac;
                    pc=0x37800;
                    run_37800(); return;
                case 0x34fac:
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    pc=0x34c84;
                    run_34c00(); return;
                case 0x34fb4:
                    r21 = r0 + 1;
                    r16 = r22 + -1;
                case 0x34fbc:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x34fc8;
                    pc=0x33e00;
                    run_33e00(); return;
                case 0x34fc8:
                    r18 = r2 + 48;
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    r2 = r21 < r5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34dd8;
                        run_34c00(); return;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x34ffc;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x34ffc:
                    r23 = r2 + r0;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    /* Next insn is delay slot */ 
                    r21 = r21 + 1;
                    pc=0x34fbc;
                    run_34e00(); return;
                case 0x35008:
                    r3 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = r3 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c48;
                        run_34c00(); return;
                    }
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34950;
                        run_34800(); return;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 5;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x35040;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x35040:
                    r5 = r2 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    r31=0x35050;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x35050:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x349b0;
                        run_34800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x34950;
                    run_34800(); return;
                case 0x35060:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x3506c;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x3506c:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x34c38;
                        run_34c00(); return;
                    }
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r5 = r5 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                    r6 = r0 + 10;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x35094;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x35094:
                    r12 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x350b4;
                        continue;
                    }
                case 0x350a4:
                    r13 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r13;
                    pc=0x34c38;
                    run_34c00(); return;
                case 0x350b4:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x350c8;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x350c8:
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    pc=0x350a4;
                    continue;
                case 0x350d0:
                    r2 = r21 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34be8;
                        run_34a00(); return;
                    }
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = r21 + 28;
                    r2 = r2 + r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    pc=0x34be0;
                    run_34a00(); return;
                case 0x350f0:
                    r12 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = readPages[(r12+16)>>>12][((r12+16)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x35114;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x35114:
                    /* Next insn is delay slot */ 
                    r2 = r17 - r2;
                    pc=0x34bb0;
                    run_34a00(); return;
                case 0x3511c:
                    r4 = r30 + r0;
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                case 0x35128:
                    /* Next insn is delay slot */ 
                    r31=0x35130;
                    pc=0x37600;
                    run_37600(); return;
                case 0x35130:
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    pc=0x34b1c;
                    run_34a00(); return;
                case 0x35138:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    pc=0x35128;
                    continue;
                case 0x35148:
                    r12 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = r12 - r21;
                    /* Next insn is delay slot */ 
                    r21 = r0 + r0;
                    pc=0x34a48;
                    run_34a00(); return;
                case 0x3515c:
                    r13 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = r3 + 1075;
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34a48;
                        run_34a00(); return;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    /* Next insn is delay slot */ 
                    r21 = r3 - r2;
                    pc=0x34a48;
                    run_34a00(); return;
                case 0x3517c:
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x352a4;
                        run_35200(); return;
                    }
                    r12 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r3 = r12 << 3;
                    r2 = r2 + -13216;
                    r3 = r3 + r2;
                    f3 = readPages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff];
                    f2 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    f5 = readPages[(r28+-32464)>>>12][((r28+-32464)>>>2)&0x3ff];
                    f4 = readPages[(r28+-32460)>>>12][((r28+-32460)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r5;
                    f3 = r4;
                    r21 = r0 + r0;
                    r8 = r22 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r5 = f0;
                    r4 = f1;
                case 0x351e0:
                    f0 = r19;
                    f1 = r18;
                    f6 = r19;
                    f7 = r18;
                    r12 = fcsr;
                    r12 = fcsr;
                    r1 = r12 | 3;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r12;
                    r3 = f0;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f6 = r5;
                    f7 = r4;
                    r2 = r3 + 48;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = f0;
                    r18 = f1;
                    r22 = r22 + 1;
                    r8 = r8 + 1;
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34824;
                        run_34800(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34894;
                        run_34800(); return;
                    }
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r2 = r21 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3472c;
                        run_34600(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r5 = f0;
                    r4 = f1;
                    r19 = f6;
                    r18 = f7;
                    /* Next insn is delay slot */ 
                    pc=0x351e0;
                    run_35000(); return;
                case 0x352a4:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    f2 = r5;
                    f3 = r4;
                    r2 = r3 << 3;
                    r3 = 4 << 16;
                    r3 = r3 + -13216;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+-8)>>>12][((r2+-8)>>>2)&0x3ff];
                    f0 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r21 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    r8 = r22 + r0;
                    r5 = f0;
                    r4 = f1;
                case 0x352e4:
                    f0 = r19;
                    f1 = r18;
                    f4 = r19;
                    f5 = r18;
                    r12 = fcsr;
                    r12 = fcsr;
                    r1 = r12 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r12;
                    r3 = f0;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r3 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = f0;
                    r18 = f1;
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 1;
                        pc=0x35360;
                        continue;
                    }
                    r8 = r8 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = r21 + 1;
                    r19 = f0;
                    r18 = f1;
                    /* Next insn is delay slot */ 
                    pc=0x352e4;
                    continue;
                case 0x35360:
                    f3 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    f4 = r5;
                    f5 = r4;
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x34894;
                        run_34800(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3472c;
                        run_34600(); return;
                    }
                    r4 = r0 + 48;
                    r3 = r22 + r0;
                case 0x353a8:
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x353a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r22 + 1;
                    pc=0x34824;
                    run_34800(); return;
                case 0x353c4:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = r0 - r2;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34620;
                        run_34600(); return;
                    }
                    r2 = r20 & 15;
                    r3 = 4 << 16;
                    r2 = r2 << 3;
                    r3 = r3 + -13216;
                    r2 = r2 + r3;
                    f2 = r19;
                    f3 = r18;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r16 = r20 >> 4;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x34620;
                        run_34600(); return;
                    }
                    r2 = 4 << 16;
                    r3 = r2 + -13016;
                case 0x3541c:
                    r2 = r16 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35448;
                        continue;
                    }
                    f4 = r19;
                    f5 = r18;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                case 0x35448:
                    r16 = r16 >> 1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x3541c;
                        continue;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x34620;
                    run_34600(); return;
                case 0x3545c:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x35460:
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x35484;
                        continue;
                    }
                case 0x35470:
                    r21 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    pc=0x34508;
                    run_34400(); return;
                case 0x35484:
                    r12 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r12;
                    pc=0x35470;
                    continue;
                case 0x35490:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x35494:
                    r13 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r13 + r3;
                    r21 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    if(r21 > 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                        pc=0x34508;
                        run_34400(); return;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r21 = r0 + 1;
                    pc=0x34508;
                    run_34400(); return;
                case 0x354bc:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    r3 = r3 - r4;
                    r5 = r0 - r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    pc=0x34488;
                    run_34400(); return;
                case 0x354dc:
                    r16 = r0 - r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r17 = r0 + r0;
                    pc=0x3446c;
                    run_34400(); return;
                case 0x354ec:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    r21 = r4 + 1074;
                    r2 = r21 < 33 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35564;
                        continue;
                    }
                    r3 = r0 - r21;
                    r2 = r4 + 1042;
                    r3 = r18 << (r3&0x1f);
                    r2 = r19 >>> (r2&0x1f);
                    r2 = r3 | r2;
                case 0x35520:
                    f0 = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x35550;
                        continue;
                    }
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x35530:
                    r7 = f2;
                    r6 = f3;
                    r2 = 65040 << 16;
                    r6 = r2 + r6;
                    r2 = r0 + 1;
                    r21 = r21 + -1075;
                    /* Next insn is delay slot */ 
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    pc=0x3433c;
                    run_34200(); return;
                case 0x35550:
                    f1 = readPages[(r28+-32504)>>>12][((r28+-32504)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32500)>>>12][((r28+-32500)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    pc=0x35530;
                    continue;
                case 0x35564:
                    r2 = r0 - r21;
                    /* Next insn is delay slot */ 
                    r2 = r19 << (r2&0x1f);
                    pc=0x35520;
                    continue;
                case 0x35570:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                        pc=0x355d0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r18 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x355d0;
                        continue;
                    }
                    r2 = 4 << 16;
                    r22 = r2 + -13312;
                case 0x3559c:
                    r4 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x342ac;
                        run_34200(); return;
                    }
                    addr=r22+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r22 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x355c0;
                        continue;
                    }
                    r3 = r22 + 3;
                case 0x355c0:
                    r5 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    pc=0x342ac;
                    run_34200(); return;
                case 0x355d0:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r22 = r2 + -10348;
                    pc=0x3559c;
                    continue;
                case 0x355dc:
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    r3 = r0 + 1;
                    r18 = r2 & r18;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x34254;
                    run_34200(); return;
                case 0x355f4:
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    r3 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r2 = r2 << (r3&0x1f);
                    /* Next insn is delay slot */ 
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    r31=0x35614;
                    pc=0x36800;
                    run_36800(); return;
                case 0x35614:
                    /* Next insn is delay slot */ 
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r0;
                    pc=0x34248;
                    run_34200(); return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 114;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35ca8;
                        continue;
                    }
                    r2 = r3 < 115 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c8c;
                        continue;
                    }
                    r2 = r0 + 97;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35c38;
                        continue;
                    }
                case 0x35c28:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x35c38:
                    r8 = r0 + 264;
                    r7 = r0 + 1;
                    r4 = r0 + 520;
                case 0x35c44:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x35c70;
                        continue;
                    }
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x35c80;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x35c80;
                        continue;
                    }
                case 0x35c70:
                    r2 = r7 | r4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r8 + r0;
                    pc=r31;
                    return;
                case 0x35c80:
                    r8 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 2;
                    pc=0x35c70;
                    continue;
                case 0x35c8c:
                    r2 = r0 + 119;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x35c28;
                        continue;
                    }
                    r8 = r0 + 8;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1536;
                    pc=0x35c44;
                    continue;
                case 0x35ca8:
                    r8 = r0 + 4;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x35c44;
                    continue;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35e14;
                    pc=0x38600;
                    run_38600(); return;
                case 0x35e14:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x35e30;
                        continue;
                    }
                    r3 = r0 + r0;
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 & 61440;
                    r2 = r2 ^ 8192;
                    r3 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x35e30:
                    r31 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r2 = 4 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -13276;
                    pc=r31;
                    return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r29 = r29 + -24;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36214;
                    pc=0x36000;
                    run_36000(); return;
                case 0x36214:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3643c;
                        continue;
                    }
                case 0x3640c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x36434;
                        continue;
                    }
                    r2 = r0 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -2;
                        pc=0x36434;
                        continue;
                    }
                    r2 = r0 + -2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                case 0x36434:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x3643c:
                    /* Next insn is delay slot */ 
                    r5 = r29 + r0;
                    pc=0x3640c;
                    continue;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r5 + r0;
                        pc=0x366a4;
                        continue;
                    }
                    r17 = r5 + r0;
                case 0x36624:
                    r2 = r17 << 2;
                    r4 = r2 + r3;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36670;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x36648:
                    writePages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff] = r0;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r0;
                    r4 = r3 + r0;
                case 0x36654:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x36670:
                    r2 = r0 + 1;
                    r18 = r2 << (r17&0x1f);
                    r6 = r18 << 2;
                    r4 = r16 + r0;
                    r6 = r6 + 20;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x3668c;
                    pc=0x38800;
                    run_38800(); return;
                case 0x3668c:
                    r3 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x36654;
                        continue;
                    }
                    r4 = r0 + r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    pc=0x36648;
                    continue;
                case 0x366a4:
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    r31=0x366b0;
                    pc=0x38800;
                    run_38800(); return;
                case 0x366b0:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x36654;
                        continue;
                    }
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x36624;
                    continue;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36828;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x36828:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r7 = r0 + r0;
                    r5 = r5 + 20;
                case 0x36a34:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r3 = r2 & 65535;
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r2 >>> 16;
                    r3 = lo;
                    r3 = r3 + r17;
                    r4 = r3 >>> 16;
                    { long hilo = (long)(r2) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 & 65535;
                    r2 = lo;
                    r2 = r2 + r4;
                    r17 = r2 >>> 16;
                    r2 = r2 << 16;
                    r2 = r2 + r3;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x36a34;
                        continue;
                    }
                    r5 = r5 + 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ab0;
                        continue;
                    }
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = r18 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36ad4;
                        continue;
                    }
                case 0x36a9c:
                    r2 = r18 << 2;
                    r2 = r2 + r19;
                    r18 = r18 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff] = r18;
                case 0x36ab0:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x36ad4:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    r31=0x36ae4;
                    pc=0x36600;
                    run_36600(); return;
                case 0x36ae4:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    r4 = r2 + 12;
                    r6 = r6 + 8;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x36b00;
                    pc=0x33be0;
                    run_33a00(); return;
                case 0x36b00:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x36b0c;
                    pc=0x36800;
                    run_36800(); return;
                case 0x36b0c:
                    /* Next insn is delay slot */ 
                    r19 = r16 + r0;
                    pc=0x36a9c;
                    continue;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x36c18;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = r0 + 16;
                    r4 = r4 << 16;
                case 0x36c18:
                    r2 = 65280 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c30;
                        continue;
                    }
                    r3 = r3 + 8;
                    r4 = r4 << 8;
                case 0x36c30:
                    r2 = 61440 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c48;
                        continue;
                    }
                    r3 = r3 + 4;
                    r4 = r4 << 4;
                case 0x36c48:
                    r2 = 49152 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c60;
                        continue;
                    }
                    r3 = r3 + 2;
                    r4 = r4 << 2;
                case 0x36c60:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x36c7c;
                        continue;
                    }
                    r2 = 16384 << 16;
                    r2 = r4 & r2;
                    r3 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + 32;
                        pc=0x36c80;
                        continue;
                    }
                    r4 = r0 + 32;
                case 0x36c7c:
                    r4 = r3 + r0;
                case 0x36c80:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e4c;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x36e38;
                        continue;
                    }
                    r5 = r0 + r0;
                    r2 = r3 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e40;
                        continue;
                    }
                    r2 = r3 >>> 1;
                    r5 = r0 + 1;
                case 0x36e34:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x36e38:
                    /* Next insn is delay slot */ 
                    r2 = r5 + r0;
                    pc=r31;
                    return;
                case 0x36e40:
                    r2 = r3 >>> 2;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 2;
                    pc=0x36e34;
                    continue;
                case 0x36e4c:
                    r2 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x36e60;
                        continue;
                    }
                    r6 = r0 + r0;
                    r6 = r0 + 16;
                    r3 = r3 >>> 16;
                case 0x36e60:
                    r2 = r3 & 255;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e74;
                        continue;
                    }
                    r6 = r6 + 8;
                    r3 = r3 >>> 8;
                case 0x36e74:
                    r2 = r3 & 15;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e88;
                        continue;
                    }
                    r6 = r6 + 4;
                    r3 = r3 >>> 4;
                case 0x36e88:
                    r2 = r3 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36e9c;
                        continue;
                    }
                    r6 = r6 + 2;
                    r3 = r3 >>> 2;
                case 0x36e9c:
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x36eb8;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    r6 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 32;
                        pc=0x36e38;
                        continue;
                    }
                    r5 = r0 + 32;
                case 0x36eb8:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r5 = r6 + r0;
                    pc=0x36e38;
                    continue;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3701c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x3701c:
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r2 = r18 < r19 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r6 + r0;
                        pc=0x3724c;
                        continue;
                    }
                    r20 = r6 + r0;
                    r18 = r19 + r0;
                    r19 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r16 = r6 + r0;
                    r20 = r5 + r0;
                case 0x3724c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r17 = r18 + r19;
                    r2 = r2 < r17 ? 1 : 0;
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37268;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x37268:
                    /* Next insn is delay slot */ 
                    r31=0x37270;
                    pc=0x36600;
                    run_36600(); return;
                case 0x37270:
                    r25 = r2 + 20;
                    r22 = r17 << 2;
                    r24 = r25 + r22;
                    r21 = r2 + r0;
                    r2 = ((r25 & 0xffffffffL) < (r24 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r25 + r0;
                        pc=0x372a4;
                        continue;
                    }
                    r9 = r25 + r0;
                    r3 = r25 + r0;
                case 0x37290:
                    r9 = r9 + 4;
                    r2 = ((r9 & 0xffffffffL) < (r24 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 4;
                        pc=0x37290;
                        continue;
                    }
                    r3 = r3 + 4;
                case 0x372a4:
                    r2 = r18 << 2;
                    r24 = r16 + 20;
                    r6 = r20 + 20;
                    r14 = r24 + r2;
                    r2 = r19 << 2;
                    r18 = r6 + r2;
                    r2 = ((r6 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r25 + r0;
                        pc=0x37408;
                        run_37400(); return;
                    }
                    r16 = r25 + r0;
                    r15 = r6 + r0;
                case 0x372cc:
                    r2 = readPages[(r15+0)>>>12][((r15+0)>>>2)&0x3ff];
                    r12 = r2 & 65535;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37360;
                        continue;
                    }
                    r9 = r24 + r0;
                    r10 = r16 + r0;
                    r11 = r0 + r0;
                    r7 = r16 + r0;
                    r8 = r24 + r0;
                case 0x372f4:
                    r3 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r5 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    { long hilo = (long)(r2) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 >>> 16;
                    r4 = r5 & 65535;
                    r5 = r5 >>> 16;
                    r9 = r9 + 4;
                    r8 = r8 + 4;
                    r10 = r10 + 4;
                    r2 = lo;
                    r2 = r2 + r4;
                    r2 = r2 + r11;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r2 >>> 16;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    r3 = r3 + r5;
                    r5 = r3 + r11;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r11 = r5 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x372f4;
                        continue;
                    }
                    r7 = r7 + 4;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r11;
                    r2 = readPages[(r15+0)>>>12][((r15+0)>>>2)&0x3ff];
                case 0x37360:
                    r12 = r2 >>> 16;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x373f4;
                        continue;
                    }
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r9 = r24 + r0;
                    r10 = r16 + r0;
                    r11 = r0 + r0;
                    r8 = r5 + r0;
                    r13 = r24 + r0;
                    r7 = r16 + r0;
                case 0x37388:
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r3 = r8 >>> 16;
                    r2 = r4 & 65535;
                    { long hilo = (long)(r2) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 >>> 16;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r9 + 4;
                    r10 = r10 + 4;
                    r13 = r13 + 4;
                    r2 = lo;
                    r2 = r2 + r3;
                    r2 = r2 + r11;
                    { long hilo = (long)(r4) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r7 = r7 + 4;
                    r11 = r2 >>> 16;
                    r2 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    r8 = r2 + r0;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r4 = lo;
                    r4 = r4 + r3;
                    r5 = r4 + r11;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r5 >>> 16;
                        pc=0x37388;
                        continue;
                    }
                    r11 = r5 >>> 16;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r5;
                case 0x373f4:
                    r6 = r6 + 4;
                    r2 = ((r6 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r15 = r15 + 4;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x372cc;
                        run_37200(); return;
                    }
                    r16 = r16 + 4;
                case 0x37408:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        r10 = r25 + r22;
                        pc=0x37448;
                        continue;
                    }
                    r10 = r25 + r22;
                    r10 = r10 + -4;
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37448;
                        continue;
                    }
                    r3 = r10 + r0;
                case 0x37428:
                    r17 = r17 + -1;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x37448;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37428;
                        continue;
                    }
                case 0x37448:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r17;
                    r2 = r21 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r29 = r29 + -40;
                    r3 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + r0;
                        pc=0x37700;
                        continue;
                    }
                    r17 = r6 + r0;
                case 0x37630:
                    r17 = r17 >> 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37698;
                        continue;
                    }
                    r18 = readPages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x376e4;
                        continue;
                    }
                case 0x3764c:
                    r2 = r17 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x376bc;
                        continue;
                    }
                case 0x37658:
                    r17 = r17 >> 1;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37698;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3767c;
                        continue;
                    }
                case 0x37674:
                    /* Next insn is delay slot */ 
                    r18 = r2 + r0;
                    pc=0x3764c;
                    continue;
                case 0x3767c:
                    r4 = r20 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x3768c;
                    pc=0x37200;
                    run_37200(); return;
                case 0x3768c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    pc=0x37674;
                    continue;
                case 0x37698:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x376bc:
                    r5 = r19 + r0;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x376cc;
                    pc=0x37200;
                    run_37200(); return;
                case 0x376cc:
                    r16 = r2 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x376dc;
                    pc=0x36800;
                    run_36800(); return;
                case 0x376dc:
                    /* Next insn is delay slot */ 
                    r19 = r16 + r0;
                    pc=0x37658;
                    continue;
                case 0x376e4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 625;
                    r31=0x376f0;
                    pc=0x37000;
                    run_37000(); return;
                case 0x376f0:
                    writePages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff] = r2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    pc=0x3764c;
                    continue;
                case 0x37700:
                    r2 = 4 << 16;
                    r2 = r2 + -13228;
                    r3 = r3 << 2;
                    r3 = r3 + r2;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3771c;
                    pc=0x36a00;
                    run_36a00(); return;
                case 0x3771c:
                    /* Next insn is delay slot */ 
                    r19 = r2 + r0;
                    pc=0x37630;
                    continue;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = r5 + r0;
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r6 >> 5;
                    r2 = r16 + r2;
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r2 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r2 = r3 < r18 ? 1 : 0;
                    r21 = r4 + r0;
                    r17 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37860;
                        continue;
                    }
                case 0x37850:
                    r3 = r3 << 1;
                    r2 = r3 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x37850;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x37860:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x37868;
                    pc=0x36600;
                    run_36600(); return;
                case 0x37868:
                    r19 = r2 + r0;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + 20;
                        pc=0x37890;
                        continue;
                    }
                    r4 = r2 + 20;
                    r3 = r16 + r0;
                    r2 = r4 + r0;
                case 0x3787c:
                    r3 = r3 + -1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x3787c;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x37890:
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r6 = r20 + 20;
                    r2 = r2 << 2;
                    r17 = r17 & 31;
                    r9 = r6 + r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r6 + r0;
                        pc=0x37938;
                        continue;
                    }
                    r3 = r6 + r0;
                    r2 = r0 + 32;
                    r5 = r2 - r17;
                    r8 = r0 + r0;
                    r3 = r6 + r0;
                    r7 = r4 + r0;
                case 0x378c0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r2 = r2 << (r17&0x1f);
                    r2 = r2 | r8;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r8 = r2 >>> (r5&0x1f);
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 4;
                        pc=0x378c0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r8;
                        pc=0x378fc;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r8;
                    r18 = r18 + 1;
                case 0x378fc:
                    r2 = r18 + -1;
                    writePages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r20 + r0;
                    r31=0x37910;
                    pc=0x36800;
                    run_36800(); return;
                case 0x37910:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x37938:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r3 = r3 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 4;
                        pc=0x37938;
                        continue;
                    }
                    r4 = r4 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x378fc;
                    continue;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r2 + r0;
                        pc=0x37a5c;
                        continue;
                    }
                    r6 = r2 + r0;
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r7 = r4 + r3;
                    r2 = r5 + 20;
                    r3 = r2 + r3;
                    r6 = r7 + r0;
                case 0x37a30:
                    r6 = r6 + -4;
                    r3 = r3 + -4;
                    r5 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = r7 + -4;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x37a64;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37a30;
                        continue;
                    }
                    r6 = r0 + r0;
                case 0x37a5c:
                    /* Next insn is delay slot */ 
                    r2 = r6 + r0;
                    pc=r31;
                    return;
                case 0x37a64:
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x37a74;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = r0 + 1;
                case 0x37a74:
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    pc=0x37a5c;
                    continue;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r18 = r6 + r0;
                    r31=0x37c30;
                    pc=0x37a00;
                    run_37a00(); return;
                case 0x37c30:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d94;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x37d80;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x37c40:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x37c4c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x37c4c:
                    r15 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r16;
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r11 = r17 + 20;
                    r6 = r18 + 20;
                    r3 = r13 << 2;
                    r2 = r2 << 2;
                    r12 = r15 + 20;
                    r16 = r11 + r3;
                    r14 = r6 + r2;
                    r9 = r0 + r0;
                    r7 = r12 + r0;
                    r10 = r11 + r0;
                    r8 = r6 + r0;
                case 0x37c88:
                    r5 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r4 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r2 = r5 & 65535;
                    r3 = r4 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r9;
                    r5 = r5 >>> 16;
                    r4 = r4 >>> 16;
                    r9 = r3 >> 16;
                    r5 = r5 - r4;
                    r2 = r5 + r9;
                    r6 = r6 + 4;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r2 >> 16;
                    r2 = ((r6 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    r11 = r11 + 4;
                    r10 = r10 + 4;
                    r12 = r12 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x37c88;
                        continue;
                    }
                    r7 = r7 + 4;
                    r2 = ((r11 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d30;
                        continue;
                    }
                    r4 = r12 + r0;
                    r5 = r11 + r0;
                case 0x37cf4:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r11 = r11 + 4;
                    r3 = r2 & 65535;
                    r3 = r3 + r9;
                    r9 = r3 >> 16;
                    r2 = r2 >>> 16;
                    r2 = r2 + r9;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r2 >> 16;
                    r2 = ((r11 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 4;
                    r12 = r12 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 4;
                        pc=0x37cf4;
                        continue;
                    }
                    r4 = r4 + 4;
                case 0x37d30:
                    r12 = r12 + -4;
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d5c;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x37d48:
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r13 = r13 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37d48;
                        continue;
                    }
                case 0x37d5c:
                    writePages[(r15+16)>>>12][((r15+16)>>>2)&0x3ff] = r13;
                case 0x37d60:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r15 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x37d80:
                    r15 = r17 + r0;
                    r16 = r0 + 1;
                    r17 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r15 + r0;
                    pc=0x37c40;
                    continue;
                case 0x37d94:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x37da0;
                    pc=0x36600;
                    run_36600(); return;
                case 0x37da0:
                    r15 = r2 + r0;
                    r2 = r0 + 1;
                    writePages[(r15+16)>>>12][((r15+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r15+20)>>>12][((r15+20)>>>2)&0x3ff] = r0;
                    pc=0x37d60;
                    continue;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r29 = r29 + -56;
                    r5 = r0 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r21 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r17 = r7 + r0;
                    r31=0x37e3c;
                    pc=0x36600;
                    run_36600(); return;
                case 0x37e3c:
                    r18 = r2 + r0;
                    r20 = r2 + 20;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r16 & r2;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    r16 = r2 & r16;
                    r19 = r16 >>> 20;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                        pc=0x37e74;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = 16 << 16;
                    r2 = r3 | r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                case 0x37e74:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37f58;
                        continue;
                    }
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r31=0x37e88;
                    pc=0x36e00;
                    run_36e00(); return;
                case 0x37e88:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 + r0;
                        pc=0x37f48;
                        continue;
                    }
                    r5 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 - r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 >>> (r5&0x1f);
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                case 0x37eb8:
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r3 - r2;
                    r3 = r2 + r0;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                case 0x37ed4:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x37f20;
                        continue;
                    }
                    r2 = r19 + r5;
                    r3 = r0 + 53;
                    r2 = r2 + -1075;
                    r3 = r3 - r5;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r3;
                case 0x37ef4:
                    r2 = r18 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x37f20:
                    r2 = r5 + -1074;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r3 << 2;
                    r2 = r2 + r20;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r3 << 5;
                    r31=0x37f3c;
                    pc=0x36c00;
                    run_36c00(); return;
                case 0x37f3c:
                    r16 = r16 - r2;
                    /* Next insn is delay slot */ 
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    pc=0x37ef4;
                    continue;
                case 0x37f48:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    pc=0x37eb8;
                    continue;
                case 0x37f58:
                    /* Next insn is delay slot */ 
                    r4 = r29 + 20;
                    r31=0x37f60;
                    pc=0x36e00;
                    run_36e00(); return;
                case 0x37f60:
                    r5 = r2 + r0;
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 32;
                    pc=0x37ed4;
                    continue;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r5 = f12;
                    r4 = f13;
                    r3 = 32767 << 16;
                    r2 = r0 - r5;
                    r2 = r2 | r5;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r2 = r2 >>> 31;
                    r3 = r3 | r2;
                    r4 = 32752 << 16;
                    r3 = r4 - r3;
                    r2 = r0 - r3;
                    r3 = r3 | r2;
                    r3 = r3 >>> 31;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r2 - r3;
                    pc=r31;
                    return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r5 = f12;
                    r4 = f13;
                    r2 = 32767 << 16;
                    r3 = r0 - r5;
                    r3 = r3 | r5;
                    r2 = r2 | 65535;
                    r2 = r2 & r4;
                    r3 = r3 >>> 31;
                    r2 = r2 | r3;
                    r4 = 32752 << 16;
                    r2 = r4 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r2 >>> 31;
                    pc=r31;
                    return;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r2 = r4 & 3;
                    r6 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 & 255;
                        pc=0x384c8;
                        continue;
                    }
                    r5 = r5 & 255;
                    r10 = r0 + r0;
                    r3 = r0 + r0;
                case 0x38418:
                    r2 = r10 << 8;
                    r3 = r3 + 1;
                    r10 = r2 | r5;
                    r2 = (r3&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38418;
                        continue;
                    }
                    r4 = r6 + r0;
                    r8 = 65278 << 16;
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r8 = r8 | 65279;
                    r2 = r6 + r8;
                    r3 = ~(r0 | r6);
                    r7 = 32896 << 16;
                    r2 = r2 & r3;
                    r7 = r7 | 32896;
                    r2 = r2 & r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x384c8;
                        continue;
                    }
                    r2 = r6 ^ r10;
                    r3 = r2 + r8;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x384c8;
                        continue;
                    }
                    r9 = r8 + r0;
                    r8 = r7 + r0;
                    r7 = r4 + r0;
                case 0x38488:
                    r7 = r7 + 4;
                    r6 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r2 = r6 + r9;
                    r3 = ~(r0 | r6);
                    r2 = r2 & r3;
                    r2 = r2 & r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x384c8;
                        continue;
                    }
                    r2 = r6 ^ r10;
                    r3 = r2 + r9;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38488;
                        continue;
                    }
                case 0x384c8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38508;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x38508;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x384e8:
                    r6 = r6 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 1;
                    r3 = r2 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38508;
                        continue;
                    }
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x384e8;
                        continue;
                    }
                case 0x38508:
                    r2 = r2 & 255;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x3851c;
                        continue;
                    }
                case 0x38514:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x3851c:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x38514;
                    continue;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32552)>>>12][((r28+-32552)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38620;
                    pc=0x33b50;
                    run_33a00(); return;
                case 0x38620:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    r19 = r0 + -4;
                    r16 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x38838;
                    pc=0x2e200;
                    run_2e200(); return;
                case 0x38838:
                    r2 = 4 << 16;
                    r18 = readPages[(r2+-11640)>>>12][((r2+-11640)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r3 & r19;
                    r31=0x38854;
                    pc=0x2d600;
                    run_2d600(); return;
                case 0x38854:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x38928;
                        continue;
                    }
                    r17 = r2 + r0;
                    r3 = r2 + -8;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        r16 = r2 & r19;
                        pc=0x38914;
                        continue;
                    }
                    r16 = r2 & r19;
                case 0x38870:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x38878;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x38878:
                    r6 = r16 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38900;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + r0;
                        pc=0x388c8;
                        continue;
                    }
                    r3 = r17 + r0;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + 8;
                        pc=0x388c8;
                        continue;
                    }
                    r3 = r17 + 8;
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r0;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + 16;
                        pc=0x388c8;
                        continue;
                    }
                    r3 = r17 + 16;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r0;
                    r3 = r17 + 24;
                case 0x388c8:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                case 0x388d8:
                    r2 = r17 + r0;
                case 0x388dc:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x38900:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x3890c;
                    pc=0x33bf0;
                    run_33a00(); return;
                case 0x3890c:
                    /* Next insn is delay slot */ 
                    pc=0x388d8;
                    continue;
                case 0x38914:
                    r2 = ((r21 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38870;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r21 + r0;
                    pc=0x38870;
                    continue;
                case 0x38928:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x38930;
                    pc=0x2e400;
                    run_2e400(); return;
                case 0x38930:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x388dc;
                    continue;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData("5\030M\0269IHe1@\000\000\000\001*s0YlSQ\001Tb4Yf&#\025F -[n\007#%^n9W$\003c\031Rl2KM&\023%N2\037\002D\002\001\001^r\020\010\r&\023%N22\031,2\002m^p:\032-vsM: \036\031mF{\011Bl/\\nG\023\025Bm\037\010\007G\003\005Ne/\\nG\023\025Bm\037\002A\"\001\001.h2[D\006K9lo5Y,B\003]Rt4\010\014\022\003MRn3[\014R\003\031Rl2K\004\006KP@a:\035\014VkAhs\020\035\rr\003ABr9Y$\006KP@a9BD\002\003\004@n7\\MV\0130@j1\032,s\021\001Li6\031%b\002%\\v7ZlV!\001ni:\032\004\007#]^ 3\032-F+LX 4]\004\007#IJa:\034d\007#!J\n\020\010\014fKIft\020\030.2\003QPe\020\031mF{\011Bl\020\034lV;5Jn:\034eB\003\005\\d\020\035\r\006)\001fe1[mf!\001Bs\020\035\r\006)\001fe3[,VsP\024 \020\034nG\023\025Bm\020\031Mw\021\001B 8\030.'#%Fu6\030.\"\003ABg2KD\005#!Rs\020\032.2\003Ufe3\035-B\003\031^r\020\031/\006\0135Rn4[LpQ\000@e6XLV#\021Jd\020\034nG\023\025Bm9KA Q\000@a;\030-\026c\005Dl2H\rw\003QRo7\034g Q\000@ \020\013-\002\0014Zh2[\016\000KQPi9H\016W\033\005Ne\020\034nVk5Br<BD\002\001\000@-8H\005RkEji2]\004\002\001\000@ 9].\007\003IJs9H\014FK\005Nn7\\nFK\014@o:]\016\007+P\024 \020\010\004\002kX@-\026]LW\023\011^s2H\004\002\003MJt\020\035\r\006)\001le9\030Mw\033%hy\020\033\014W3\025X\n\020\010\004\002\0015H \026K,G+5` \020\010\004\002\001\001`r4[NB\003QPe\020\034nG\023UFt:\\LR\003=L :\032\014R\003)Di3LD\0063%Xe\005\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@r0]\r\006+H@t4\030-b\003\025pp6\032,6KQXy\020\031\014V\033=Hi7\031a\"\001\000@ \020\010\004\002i5le9\034m\026{8@ \020\034\016&{\035da6H\rf\0135J 0[LB\003YJr9Z-vq\001Rn3\033n&k\005hi7[A\"\001\000@ \020\010\004\002i5Pa9Z\004\002\001\000@ \020\034\016&K9h 0H\r\006\013MP 7YD\007#!J 2\031,6{\021Jd\020\031\rv\033UZe7\035\001\"\001\000@ \026[d\003c\031Rl2OD\002\001\000@ \020\034lVs\020@d2Xmv#\025H 7].G\003Uh :\033d\003c\031Rl2OA\"\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\021\014V3\005jl:\034d\007#<@t4\031$\007#!J 4[N\007+P@w4]\r\002\003\004@d4YLf+IJn:\002D\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ 2^\016F+9fi7[Eb\002ABs9H\004ri\034@f7\\D\007\033QHo:]\005`Q\000@ \020\013.B\001qhy8\031'b\001\000@ \020\010\014f{IFe\020\030$\007\003\005dt4XnVc\005d 7].G\003Uh 3\032-F)\001Lo9\033,\027 (@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\007#!J 7[MGI\001fu8\034\rw\023QJd\020\033n\007#%^n\020\032.2\001\035`b6Ia P\000\000\000\000\022\014\027\033 @o3\010\014F+\r^d2Y\004\006#=Fu6Y-g!h@\000\000\031.'\023=d 7\\\014Vs%\\g\020\011.0P\000\000\000)[n'\023dX 9Y,vk\025\\t\020\031\016Vk@@n7]\004\007K\025h 4[.\006c\025Ze7\035\014V (\000\000\000\000\016Vs\005Dl2H\016Fy\001Bl6\033l6\013QJ 4\030.6A\001ft0]\014PP\000\000V4\017n\0273\021^::\016@\000\003U\\r2Xmv;9Rz2Y\004\006{Ahi7[G\"\0014Z%9B@\000\003U\\r2Xmv;9Rz2Y\004\006{Ahi7[G\"\0014Jc\005\000\000\000\003U\\k7\033nvq\001Ze9\\l\026;\024\000(9Y,vk\025\\t\020\014\017\002)@dx\024@\000\000\000\001Tb4Yf&#\025F \022\\d\002+L@%9B@\000\002\031\002T S\004\004*I$O)\000\0146{UXd7\011nB\003\005Xl7Xl\027#\024@m2[-w\023d@f7\\D\006{Uhp:]\013v3%Xe7\030-V((\000\000\000\033,\026[\025>o:]\016\007+Q>f4[\014Vs\005Ze\020\030l\026c1Jd\020\035m\027# @n7H\014WCQJn9Z-vq\004\024\000:[N7+A`o9\035\014V!\001^u:\034\016W!\001Lo9\033,\027!8\024\0009X.fK9N 2\031,6{\021Jd\020\034\014\026;\024@a9H\004r+LN\n\000\000\000\000\002A\036S$V\011EJ}\006O)\024HT\032P\000%9ND\006{Ahi7[D\007\023\025bu4\\LW\031\001Bn\020\030.&;UZe7\035\004\002i4@%1B@\000\001\025f:\020\033n\007#%^n\020\030\005U9\000Js\023H\014F{\025fn\023]\004\006\0131Xo;H\014\026q\001Br3]-V+9h\n\000\000\000\002+Lt 7\\\016FK=\\ 0\011.29\001de8]-\027\023\025f 0[D\006\013INu6Y-g (\000\000\000\011.3Q\001^p:\032-vq\001@-+H\004W\031\034@i9H\014\026k\011Rg:[nW\030(\000\000\000\000\004W\031h@i6\033\014V;\005X 7\\\016FK=\\ \026K$\002+\014\024\000\000\000\004W\031h@i7\035L\026c%H 7\\\016FK=\\ \026K$\002+\014\024\000\000\000\004W\031h@o8\035\r\026{8@`\022XdW\031\034@d7Y.6q\035h 0[\rF{\\@a7\010\014\027\023\035jm2[N@P\000\000\000\000\011.3Q\001^p:\032-vq\001@-\026I.29\001Ho2\\mb;P@a6\033\rw9\001Bn\020\030.&;UZe7\035\001 \000\000\000\000\022\\g\"\003U\\r2Xmv;9Rz2Y\004\006{Ahi7[D\006\001\025F%9Ia \001\025f:\020\035-g\023\025Fo3[M\027S\025H 7\\\016FK=\\ 0\013%R+LN\n\000\011.3Q\001^p:\032-vq\001@%9Id\006KL@a6XM\026;U^u9B@\000\000\001Tb4Yf%{\025dr7\\G\"\003\025dr7\\D\006K8@g2[LW\023\005hi7\031d\006+Ido9\010\0167#IRn3@\000\000\003%\\i:\032,\026a\001Fo7\035\014WCP@a6\033\rv\033\005hi7[D\0063\005Rl2Y\004\020\000\001Li6\031$\006C\025Bd2\\D\006K9Hi1X.F+L@a\020\011,B\003ABg2H\014F{\rjm2[N@\000\000\000\0003\032-F)\001Pe0Y\014W\021\001Rn2\032,6\013QJs\020\034lW\013UJn:\032,\026a\001^r3X-fKiBt4[m`\000\000\000f4[\014R\003!Ja2\031.\"\003%\\d4Xl\027#\025f 9\030-f#=Z-0Xl6+Mf 7\\Lv\0139Rz0]\r\026{8\000\000\000\000\014fK1J 4\031,\026#\025d 4[LFK\rBt2\\d\006\011\001fi7\031mF)\001`a3Y$\006#=Fu6Y-g \000\000\000\000\034LW\033\025dv2Y\004\006\023%hs\020\n\006\"i\\R 7YD\0063%Xe\020\032\014V\013\021Jr\020\031MF\013\035f 0\\LR\0039^t\020\036LW\023<@(\030\036\004S\001Ip)\000\000\011f{P@a\020\022H$J\034d 3\032-F)\001Pe0Y\014W\020\001\016a9\030L\026;\024@b2^-vs\020@e7\031\004\006{\030@f4[\014P\000\000\000\00107\000\000\013\013\030\000\000Xr@\000\005EL\000\000,9 \000\002d \032L&K\034d 2\031,6{\021Jr\020\021H\025\"\005\030 \"TJ$zHt \022\\`\000\000\000@(9Y,vk\025\\t\020\014\017\002)@dx\024@\000\000\003MJg6Y-g!\000Jd\020\032.2\003\005fs7Xm\026\013QJd\020\035m\027# @p0YlR\001\025H\000\000\000\0166+\035Ze7\035\004\002+\020@r2YLW\023L@t7H\0166+\035Ze7\035\004\002+\020\000j1\032,s\022}`a9\034lU{MJg6Y-g\"}Pe0Y\014W\021 R 1X-Fc\025H ;Z.FA\001Rn9],f3%Fi2[NB\003\021Bt0@\000\007+9Pa7\031\rF+\020@n2XlW\033MBr<H\014WCQJn9Z-vq\001fe3[,VsP@t<\\\014R\001Ap%\030\016\017\000\000\000\000u7\032\014\026s\021Xe2\010\014WCQJn9Z-vq\001fe3[,VsP\000e<\035\014VsMRo7\010\0166+\035Ze7\035\004\006KL@m0\\M6+\020@'7\031,6+Mfa9\036$r\003\011jt\020\033Mw!\000Nr2\\lW\023YJr2Y\004r\003\r^n:\034L\027\023d@t7H\0167\003\025F\000\000\000\n6+\035Ze7\035\004\002+\020X 3\033\014\026;Lz%<\013\004\007#e`e\036I,Ba\001Ha:\030+vc\025\\g:\032\007R+\020\000\000\000\035-fC\005\\d6\031,B\003MJg6Y-g!\001hy8\031$\002;ABt:\031.&q\001Hi1]\r\026{9Br<I`\007+9Pa7\031\rF+\020@s2YmV+9h :\036.\006)\000Ni7\035\014W\0235Jd4X.F)\001Pa6\031NF{9J 9\031,vK=\\'\000\000\000\007+9Pa7\031\rF+\020@s2YmV+9h :\036.\006)\000Ni6[,V#%Bt2H\r\006\0131Lt7[LR\003IJg4[mb8\000\000u7\032\014\026s\021Xe2\010\0166+\035Ze7\035\004\007#e`e\020\011m\026k5Jd4X.F)\001Xo9\\mF+Mf 4\030-F3Q^n2H\016&+\035Ro7\011`\007+9Pa7\031\rF+\020@s2YmV+9h :\036.\006)\000Ni7\035\014W\0235Jd4X.F)\001Ne7\031.&K\014@r2Ym\026{8N\000\000\000\000\006+9H 7YD\0063%Xe\000\035-fC\005\\d6\031,B\003MJg6Y-g!\001hy8\031$\002;Ado3\032-F)\034\000\000\000\000\016Vs!Bn2\033\014V!\001ha1\033\014R\003MJg6Y-g \001jn5[Mw;8@s2YmV+9h :\036.\006)\000Jd\000\000\000\030T \000\001F\005\000\000\0140(\000\000c\002@\000\006\0250\000\0001A \000\003\nX\000\000\030U@\000\001F\005\000\000\0140(\000\000c\002@\000\006\030\024\000\0001A \000\003\014\n\000\000\030`P\000\001F\005\000\000\014+\020\000\000c\002@\000\006\030\024\000\0001A \000\003\nv\000\000\030`P\000\001EA\000\000\014,8\000\000c\002@\000\006\030\024\000\0001A \000\003\014\n\000\000\030`P\000\001F\005\000\000\0140(\000\000c\002@\000\006\030\024\000\0001A \000\003\014\n\000\000\030`P\000\001EM\000\000\0140(\000\000bi@\000\006\026L\000\00016 \000\003\014\n\000\000\030[\020\000\001EY\000\000\0140(\000\000c\002@\000\006\030\024\000\0001A \000\003\013>\000\000\030\\P\000\001Ek\000\000\014/\010\000\000b|@\000\006\027|\000\0001A \000\003\014\n\000\000\030`P\000\001F\005\000\000\0140(\000\000c\002@\000\006\030\024\000\0001A \000\003\014\036\034lV;5Jn:\010\016F{<@s4\033n' \000\000\0008\030,v)\000Jd\020\032-V\013\035J 4\\d\002+\021p%2\010\005\002+\021p%2\010\016\007\0034R\000\000\031L\026K1Jd\020\035\rr\003\005Xl7Xl\027#\024@b:YLf+H@f7\\D\007\003\005Ne\020\032-V\013\035J\000\000\000\000\006\0131Xo1X.F+\020@%2\036\004V!\001`a3Y$\006K5Bg2H\005\002+\020@b<]\014W\031$\000\000\000\002-V\013aRm:[$\007\033Qdi8\031$\007\033%te\035\010\004V \000\000\000\000\034\014\026;\024@%2\010\r\026k\005Ne\020\032.2\001\025Hx\022Y\004\002A\025H 8\034\rRH\001`a3Y$\002+\020@i6X,v)\001Rs\020\011,GA\025H \024\035-f[9^w7\010\016&+LR\000\000\000\000\006+ahr0H\014F\013QB 4[D\007\033\025Nm2[N@\000\000\000h2Z,vCP@i9H\016VsM`e1Z,fK\025H 1\035.B\003ABg2H\r\027\031\001\\o:\010\rV\013IVe9H\014\027\031\001ft9\032.\006+\020\000u7\031/\007\003\025Ft2Y\004\007\003\005Ne\020\032-f3<@s2YmV+9h,\020\033,\027\023-Rn3H\016\007\023\025li7].2\003ABg2H\014fK9Rs4\031,@\000\000\000\0002[LB\003=L 9]\016&KAJ 9Y,vk\025\\t\020\035m\027# @n7[EW\003=fi:\032.f)\001Jn2\010\016&{\\@a2\035L\026s\rJ \024\033LW9\001Jn2\010\016&{\\@%2\010\016g\031\001Fu9\034LVsP@e7\031\004\007\023=n \022Y\005\020\000\001Jn2\010\rv1\001ft9\032.\006)h@a2\035L\026s\rRn3H\014Vs\020@r7]d\007#<@%2\000\000\0043%Xe\020\032\014\027\031\001Bn\020\032-g3\005Xi2\010\0166+\035Ze7\035\004\006#\005ha\020\033\014Vs\035hh\020H\nG\023eRn3H\016Fy\001He1[lF)\001js4[Lr\003QPe\020\030.f\013%Xa1\033\014R\003\021Bt0K@\006+9H 7YD\007\003\005Ne\020\033,\027\023-Jr\020\031Mw\021\001`a3Y$\002+\020@d7Y.6q\035h 6X.F\033 @c:\\N&+9h 8\030,v)\001\\u6XLW\021\000Jd\000\031-f!\001^f\020\034\014\026;\024@%2\000\000\006;I^w4[Lr\003ABg2H\014'+\031Le9\010\016Fy\000Jd\020\034Mw;L@t7H\014\026\033\r^m7Y\014\027#\024@n2]d\007\033Qdi8\031 \007\003\005Ne\020\011,B\003IJt:\\Mf+\020@t7H\016FC\024@c6\032,VsP\000\0005\030M\0269I>r2[\014V\013MJ_8\030,v)\001Fa6\033\014V!\001^n\020\035-f[9^w7\010\016\006\013\035J\000\000\000\016\006\013\035J \022Y\004\007\023\025Xe0\\lV!\001Dy\020\035\r\006)\001Fl4Y-g \000\000s<[,&{0@d4XnFK=\\a9\036$\007\033AJc4YM\026+\020@i7\035L\026c%H 4\035,f35Bn\020\035\014\026\0231J\000\000\000\0167K5Do6\010\014FK\rhi7[L\027\023d@u9Y.2\003\rjs:\033mR\002\021\020 4\035,f35Bn\020\035\014\026\0231J \024\023K\024I$\000\000\000\000\0167K5Do6\010\014FK\rhi7[L\027\023d@u9Y.2\003\rjs:\033mR\002\021. 4\035,f35Bn\020\035\014\026\0231J \024\023K\024I$\000\000\000\000\0167K5Do6\010\014FK\rhi7[L\027\023d@u9Y.2\003\rjs:\033mR\002\011\032S$VHR\003!jf3\033,\026q\001ha1\033\014R\001!\034Y$J \000\000\000\000s<[,&{0@d4XnFK=\\a9\036$\007+MJs\020\030nW\033Q^m\020\024HT2\005\016G\020\032\016V3\031Za7\010\016F\013\011Xe\020\n\011eJ$R\000\000\000\000\007\033eZb7[\004\006#%Ft4[mf\013Ir,\020\031MF\013\035f=\022L\006GA0@%2\010\014WCA^r:\031,B\003Mrm9K\004\002+\020@n2]d\007\033eZs\000\000\000\000\003\r^u7\035\014V!\000Jd\020\034o\026k\011^l\020\031\r\026\033QRo7\030.&K\025f 1\035.B\003\011ji6\031\004\006\011\001Xi9]\004\007;%hh\020\011,Bp(\000\000\000\034lV;5Jn:\010\rV\013IVs\020\030M\027#5Bp\020\030mv#%\\g\020\030mvsQJx:\010\014\027\031\001de:\030-\026s\025H \024\023K\024I$\000\000\000\024lV;5Jn:\010\016F{<@s4\033n' \000\000\0001\032.Fk\005` 1[lFK9N 1[mg#\025pt\020\032.2\003Ufe2\010\005\004re\022)\020\034o\026k\011^l\020\031\014\027#\004@l4ZlVcd@t7H\014&)\001Na9\030L\026;\024B\000\000\000\n4\"!*F#\010\r\027\031\001te9\033eB\003\011jt\020\030mvsQda9\036$\007#<@s8\031,2\002M\010H*QHd\"\\@i9H\rf{P\\\000\000\000\n4\"!*F#\010\r\027\031\001te9\033eB\003\011jt\020\030mvsQda9\036$\007#<@s8\031,2\002M\010H*QHd\" @i9H\rf{P\\\000\000\000\014F+\r^d4[Lr\003!Ji3Z\016B\003\rXa9\\d\002+\020@w4]\r\002\001\025H 9^-W\031\001He1[lF+\020\000\000\000\030,v;IJg0]\014R\003Mrm1\033mB\003\r^d4[Lr\001 Jd\020\032-g\033QBn1Y.2H\000\000d2Xmv#\025H 9^-V\023=X \022Y\004\006{\030@%2\010\005\002+\021p%2\n \004{Uh 7YD\006k\025Zo9\036$\006\033IJa:\032-f9\001fy6XMva\001Rm0YlP\002=jt\020\033lb\0035Jm7\\O\022\003\rde0]\r\026s\034@t2^\016B\003IJg4[mb\003ABr0[.0\000\000\000O:]\004\006{\030@m2[-w\023d@a6\033\rv\033\005hi7\031d\007\033eZb7[\004\006#%Ft4[mf\013Ir\000\000\023nW!\001^f\020\033,Vk=dy\020\030-Fc=Fa:\032-f9\001Hi1]\r\026{9Br<H\014\027\023IBy\000\000\000\007\033eZb7[\004\006KL@a\020\034LV3%\\e6Y-g!\001^f\020\032,B\001\025H ;Z.FA\001hh2H\016&+\031Rn2[,VsP@a8\034\rFK\025H 0]\004\002A\025H,\022Y\005\020\000\001de3\032-f+5Jn:\010\016&+\031Jr2[L6+L@u7\032mf{]\\ 9^-V\023=X \022Y\000\006K9la6\032,B\0039jm1\031.\"\003=L 9^-V\023=Xs\020\033n\"\002=\036B\020\032-b\003\005Ng9\031,v\013QJ 3[\017\027\003 \000I7\035L\026c%H )V)U:%\010T$\010\016f\0131je\020\n\004V!$@a:\010\0167K5Do6\010\004V \000\000\000\000\010\011tz\010@s4Ymf\0131f 2[LB\003=L 4\031-\026;!h 1[\014\027\033L@%2\000\016'+9Xe7\031nFA\001ho7H\rF\013INe\020\032-b\003\025pp7\\NB\003Mrm1\033mB\003QBb6\031$\002A\025H \037\010\004V!\000Z \022Y\005\020P\000\000r2X,FK9N \022Y\017\002+\020@u7\030mvkAde9\\lV!\001Di:\033,\027\001\001Lo9\010\004V!\001fy6XMvcL@(\022Y\004\006\023ehe9J \007\023\025Bd4[Lr\001\025Hx\022Y\004\006\033=Xl2XnFKYJ 1\032.Fk\005` 3\033n\"\001\025H 9^-V\023=Xs\020\n\004V!\001Dy:\031.2H\000\000\0002\\N&{H@d2Xmv#%\\g\020\023)U\021\001Di:\033,\027\001\001Rm0YlR\010\000\000\000\000\030mw+1H 7\033nB\003\005Xl7Xl\027#\024@c7[\rF+\rhi;\031$\006\023%hm0\\\004\006K5Bg2H \006+Ido9\010\014F+\r^d4[Lr\003MRz2H\rv1\001Fo6\033\014V\033QRv2H\014&KQZa8\010 \000\000\001\034o\020\023it\021\001fi3[L\026c1Rn3H\014Vs\020@o3\010\r\006+%Nh:\010\0146c\005fs\020\011,@\000\000\000\000$[Nf\0131Rd\020\022\0104B\025\022G$\025\004\0073\005Xu2@\000\006+Ido9\010\rw\021\001\036O!\010\014F+\r^d4[Lr\003!Ji3Z\016B\003\rXa9\\d\006#\025Xt0H\005\002+\020R\n\000\000\r\007+\031Lm0[D\006\033=He2\010\0167K5Do6\010\014FK\rhi7[L\027\023d\000c7]-F!\001\\o:\010\014\026c1^c0]\014R\003Mho9\030,v)\001Lo9\010\0167K5Do6\010\016vK\021hh9@\000\000\000\001fy6XMva\001Xi9]\004\006\033=\\t0Z-g\031\000Jd\020\031mGKAPs\020\032-b\001\025H 2\032,7#%^n0\\M\026+L\000\000\000\032\016V3\031Za7\010\0146{\021Jd\020\035\014WCP@r2Ym\026{8\000\000\000\010\004\007\023\025Bd\020\034NVs\r^d2I,B\0031Jn3]\r\002\001\025H\000\000\010\004\007\023\025Bd\020\034NVs\r^d2I,B\003\005h 4[LF+`@%2\010\005\006c\025\\g:\032\004\002+\020@r0[Lv)\000Jd\024@\000\000\003\r^u6\031\rb;P@a6\033\rv\033\005he\020\034LV3\025de7\030lR\003%Za3Y \000\000\001fy6XMva\001Rd\020\033nW!\001^f\020\034L\026s\035J!\020\n\004V!<Jd\024@\0146{UXd\020\033Mw!\001Fo7\034nG\023UFt\020\024o\026k\011^l\020\022(B\003!jf3\033,\026q\001ha1\033\014R\010\000\000\000\000\034NVs1Jn3]\r\002\003\025pt2[LG\031\000Jd\020\031-g#IRe9H\014&+e^n2\010\016FC\024@e7\031\004\006{\030@s<[,&{0@i2\010\016F\013\011Xe\020@\014W\023I^r\020\031\014V\033=Hi7\031d\007\033eZb7[\004\006K\020@t0XMF)h@r:[D\006c\025\\g:\032\004\007;%hh\020\033Mr\003\005\\t2XlV#\025\\t\020@\000\006+Ido9\010\016&+\005Hi7\031d\007\033eZb7[\004\004J\020@h:YLfk\005\\ :\030,&c\024B\000\000\034NVs1Jn3]\r\002\003\r^d2\\d\006#<@n7]\004\006\033=le9\010\016FC\024@a;\030-\026c\005Dl2H\0167K5Do6\010\0166+P\000\000\000\033,Vk=dy\020\030-Fc=Fa:\032-vq\001La4[\016W\023\024@r2X,FK9N 9^-V\023=X $Q\004\006CULf6X-b\003QBb6\031$\020\000\001Jr9\033n\"\003\r^n9]\016'+\rhi7\031d\007\033eZb7[\004\006K\020@r:[L6{\021J :\030,&c\024B\000:\031/\007!\001de3Z-vq\001Pe0Y\014W\021\001Ll0Yn2\001Ap%\030\r\017\000\003QJx:\010\016&+\035Ro7\010\0167\003\025Fi3\032,V!\001Rn;\030-FK\020@F)H\r\007+\031Lm0[D\007#\005Dl2@\000\007#\025pt\020\034LV;%^n\020\035.6+L@c:\\nF{4@F)H\r\007+\031Lm0[D\007#\005Dl2H\005\004re\022)\000\000\016F+ah 9\031,vK=\\ 9\\\014V\033%Li2Y\004\006K9la6\032,B\002I\010W\020\032\016V3\031Za7\010\016F\013\011Xe\000\035\014WCP@r2Ym\026{8@u9Y.2\003\rjs:\033mR\002I\010W\020\032\016V3\031Za7\010\016F\013\011Xe\020\n\011eJ$R\000:\031/\007!\001de3Z-vq\001fp2Xm\0263%Jd\020\032-g3\005Xi2\010\n$\" @h:YLfk\005\\ :\030,&c\024\000t2^\016B\003IJg4[mb\003Ufe9H\0147+Mho6H\n$\" @h:YLfk\005\\ :\030,&c\024@('\026)\022H\001he<\035\004\007\023\025Ni7[D\007\033AJc4YM\026+\020@i7\035L\026c%H )\021\013\002\003!jf3\033,\026q\001ha1\033\014P\003QJx:\010\016&+\035Ro7\010\016W\033\025f 1].7#=Z )\021\013\002\003!jf3\033,\026q\001ha1\033\014R\001!\034Y$J \007#\025pt\020\034LV;%^n\020\034n\006+\rRf4Y,B\003%\\v0[\r\026!\001$D,H\r\007+\031Lm0[D\007#\005Dl2@\016F+ah 9\031,vK=\\ :\\lW\031\001Fu9]\rvi\001$D,H\r\007+\031Lm0[D\007#\005Dl2H\005\004re\022)\000\035\014WCP@r2Ym\026{8t \022Y\004\007A\000Jd\020\020\004\002A\025H,\022Y\005\022\001\025H 9^-V\023=Xs\000\000\000\007#\025pt\020\034LV;%^n\020\034LV3\025ds\020\035\rr\0039^ 9^-V\023=X 2\032,7#%^n0\\M\026+LB\000\000\000\016Vs\005Dl2H\016Fy\001Li7\031\004\006\0131X 9\031,f+IJn1Y,B\003Mrm1\033mB\003\021Rc:\032-vs\005di2\\d\020\000\001Fo6\\\rw\033%\\g\020\011,GA\025H 2\031,6{\021Jd\020\035\014WCP@r2Ym\026{8@o7\035\rr\003ABg2H\014\027!\000P%2\013\004\002+\020R\000\000\000\0146{UXd7\011nB\003\005Xl7Xl\027#\024@t2^\016B\003IJg4[mb\003%Za3Y \007+9Bb6\031$\007#<@f4[LB\003\031Rr9]\004\007\023\025Le9\031-f\033\025H 9^-V\023=X 2\032,7#%^n0\\O\022\010\000\000u7\030,&c\024@t7H\016&+Qdi;\031$\007\033eZb7[\004\006#%Ft4[mf\013IRe9H$\007\003IJv4[nW\031\001`a9\034m\026s\034@e9\034Mw\021|\000\000:\031/\007!\001de3Z-vq\001Pu3\031MV\0138@f6\030,w\031\001Di:\010\006\023)\001Rs\020\034lW!0@c7[NG\023\005dy\020\035\rr\003M`e1@\000\000\003QJx:\010\016&+\035Ro7\010\016W\033\025f 1].7#=Z )\024i\025R\024@h:YLfk\005\\ :\030,&c\024@('\026)\022H\000\000\000:\031/\007!\001de3Z-vq\001js2\\d\006\033Uft7[$\004\"P@h:YLfk\005\\ :\030,&c\024@('\026)\022H\000\000t2^\016B\003IJg4[mb\003Ufe9H\0147+Mho6H\010E\031\001Pu3\031MV\0138@t0XMF)\000PN,R%\020\000\001de9Y.'3\025H 1\032.B\001Dj 7YD\007#\025pt\020\034LV;%^n\020\032\016V3\031Za7\010\014fc\005Ns\020\032.2\0039^t\020\036LW\023<\000\000\000\000\016F+ah 9\031,vK=\\ 4\030.2\002M\004D)Shd2M\nT\020\011,@\000\000\000S2YmV+9h :\033mr\003MPo9\035\000\000\000\001Nb0]\0132+\021: \036H\004V \000\000\0002\031,6{\021J_3Y-f+IRc/\\LV;%^n\035\010\011TjHz%2\013\004\004:\011(E&T\011D\nQ\n=\022Y\004\004re\022\000\000\000\000\006;\025\\e9\032,2\003IJg4[mcQ\000Jd\020\036\004\002+\020@@\020\n\004V!0@%2\n%B\003\031Xa3\\d\003i\000J0\031\036\000\000\000\000\000s2YmV+9h 3\033\014\026;L@=\020\011&\003\023`\000\000\000\000\n6+\035Ze7\035\004\007#=^ 9Z\rw\023P\000\000\000\031l&\013Pt \022Y\005B\001\025H\000\000\000\000\006\0131Xo1X.F+\020@%2\010\017\002\001\025H 4[,\026;\024@b:YLf+H@f7\\D\007\023\025Ni7[D\006#\025Fo2\031$\007\023\025fu6\035\0160\000\000\000\000:[L\026\0231J :\033d\006\0131Xo1X.F)\001Ne7\031.&K\014@i6X,v(\000\000\000\000\023)U\021\001Rs\020\014%B\003\011jt\020\021h%\"\025\032P&\020*D)\001Rs\020\033Mw!\000`\000\000\000\0146{UXd\020\033Mw!\001Li7\031\004\007\023\025Le9\034LV!\001ho\020\034lV;5Jn:\010\004V \000\000\0003Y-f+IRc\020\034LV;%^n\035\010\004V!\001p \022Y\004\004\001\000P%2\013\004\002+\020R,\020\031MF\013\035f \036H\004S\001Ip\000\000\000\000\002\002\035$T\"S*\004b\005(E\000\034lV;5Jn:\010\014fc\005Ns\020\017$\002)@dx\020\011.2+L\000\000\000\024lV;5Jn:\010\016F{<@s4\033n' \000\000\0003\\L\027!Dt \024\011,Ba\000Jd\024H\014w\023\005h2\035\010\005\002+\020X \022Y\005\020\003\031^u7\031\004\007\023\025Le9\031-f\033\024@b4]\rV\013@@i7\010\0166+\035Ze7\035\004\002+\020\000\000\000\000\014\026c1^c0]\014V!\000Jd\020\036\004\002+\020@i6X,v)\001Du3\031LW\021\001Lo9\010\016&+\035Ro7\010\014F+\r^d2H\016&+Mjl:\034`\000\000\000\000d2Xmv#%\\g\020\031lVs\025di1H\016&+\031Rn2[,VsP@r2Ym\026{8@w4]\r\002\003=Lf9Y.B\001\025H,\022^\005@Q\000@G)\025\010TjA\030A*\021'R+\020X *\024\010u\022=\034=\022Y\005B\002I\0021\036J\004V!0Jd\024H\n$\011Hz(\022Y\005B+\020R\n\000\000\0146{5`o9Z-f9\000Jd<\011,B\003\021Jc7Y\014V!\001de3\032-f+5Jn:\010\016&+\035Ro7\010\rvsQ^ 8\030,v)\001Bt\020\n\004V!0@%2\n \006#\025Fo2\031+w\023\025Li7\031-V+9h_9\031,vK=\\:\020\035\017\027\003%Fa6\010\016\007\023\025Hi1]\r\026{8@c7Y\r\026s\034@N,R \007+9Bb6\031$\007#<@a6\033\rv\033\005he\020\034LV3%\\e6Y-g!\001Rm0YlP\003\r^u6\031\004\006s=h 3\032-f!\001de3\031.&+9Fe\020\030M\027#5Bp\020@\000\000\000\001de9Y.'3\025H 9Y,vk\025\\t\020\031MF\013\034@b4]\0162\003\005de\020\033Mvq5te9\033`\000\010\000\000\014\000D\000\000`\000:\000\004\000\003`\000 \000-\000\002\000\002p\000\020\000\013\000\000p\000X\000\007\000\005`\0008\000.\000\003@\005p\000 \0000\000\002\000\000h\000\014\000\006@\000`\0004\000\006\000\003 \0000\000(\000\003@\002@\000\034\000!\000\002\000\002\020\000\020\000\021@\001\000\001\020\000\010\000\011 \000@\000L\000\004\000\0020\000\034\000\023\000\001`\001x\000\020\000\020\000\001\000\000\004\000\006\000\000 \0000\000\002\000\003\000\000\020\000\030\000\014\000\001@\000`\000\014\000\006\000\000`\0000\000\006\000\r \000@\000l\000\004\000\003 \000\034\000\032\000\001`\0028\000\020\000\024\000\001\000\001$\000\010\000\n@\000@\000V\000\004\000\005@\000 \000\025\000\001`\001(\000\016\000\016\000\000p\000p\000\007\000\017 \000@\000|\000\004\000\007p\000 \000\000\000\002\000\024\000\000\020\001@\000\001\000\000(\000\005\000\002@\000(\000\024\000\002@\001 \000\024\000\n\000\001 \000P\000\n\000\005\000\000P\000(\000\005\000\002`\000(\000\026\000\002@\0010\000\024\000\013\000\001 \000X\000\n\000\005@\000P\000,\000\005\000\002`\000(\0006\000\003@\0030\000\034\000;\000\002\000\003`\000\020\001\020\000\001\020\011\010\000\011\000\004@\0008\000$\000\003@\003\000\000\034\000\030\000\001`\003\010\000\020\000\031\000\001\000\001L\000\010\000\r\000\000@\0002\000\003@\003\020\000\034\0007\000\002\000\003@\000\020\000\034@\001\000\001h\000\010\0000\000\0000\003\000\000\003\000\030\000\000\030\001@\000\001@h\000\000\014\006@\000\000`4\000\000\006\003 \000\0000\007\000\000\004\000@\000\000 \002$\000\002 (\000\000\020\002 \000\001\000\011\030\000\011\000J\000\000H\004T\000\004@%@\000$\002.\000\002 \020\000\000\016\001\000\000\000p\000\010\000\004\000\000@\000 \000\004\000\002\000\000 \000\020\000\002\000\001\000\000\020\000\010\000\001\000\000@\000\010\000\004\000\000@\000 \000\004\000\002\000\000 \000\020\000\002\000\001\000\000\020\000\010\000\001\000\000@\000\010\000\004\000\000@\000 \000\006\000\002\000\0000\000\020\000\003\000\001\000\000\030\000\010\000\001@\000@\000\014\000\004\000\000`\000 \000\006\000\002\000\0000\000\020\000\003\000\001\000\000\030\000\010\000\001@\000@\000\014\000\004\000\000`\000 \000\006\000\002\000\0000\000\020\001\000\000\001 \010\000\000\n\000@\000\000P\004\000\000\005\000 \000\000(\002\000\000\002@\020\000\000\024\001\000\000\001 \000@\000\n\000\004\000\000P\000 \000\005\000\002\000\000(\000\020\000\002@\001\000\000\024\000\010\000\001 \000@\000\n\000\004@\000P\000$\000\005\000\002 \000(\000\022\000\002@\001\020\000\024\000\011\000\001 \000H\000\n\000\004@\000P\000@\000\006\000\004\000\0000\000 \000\003\000\002\000\000\030\000\021\000\001@\001\010\000\014\000\010@\000`\000D\000\006\000\001\000\000 \000\010\000\002\000\000@\000\020\000\004\000\001\000\000 \000\010\000\002\000\000@\000\020\000\004\000\001\000\000 \000\010\000\002\000\000@\000\020\000\004\000\001\000\000 \000\010\000\002\000\000@\000\020\000\004\000\001\000\000 \000\010\000\002\000\000P\000\020\000\005\000\001\000\000(\000\010\000\002@\000@\000\024\000\004\000\001 \000 \000\n\000\002\000\000P\000\020\000\005\000\001\000\000(\000\010\000\002@\000@\000\024\000\004\000\001 \000 \000\n\000\002\000\000P\000\020\000\005\000\001\000\000p\000\014\000\007\000\000`\0008\000\006\000\003@\0000\000\036\000\003\000\001p\000\030\000\017\000\001@\000x\000\014\000 \000\000P\002\000\000\005\000\020\000\000(\001\000\000\002@\010\000\000\024\000@\000\001 \004\000\000\n\000 \000\000P\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\016\000\002\000\000p\000\020\000\007\000\001\000\0008\000\010\000\003@\000@\000\034\000\004\000\001`\000 \000\016\000\002\000\000p\000\020\000\007\000\001\000\0008\000\010\000\003@\000@\000\034\000\004\000\001`\000 \000\016\000\002\000\000p\000\023\177~\000\000\177\177p\000\007\177\177@\000\017\177|\000\000\177\177`\000\007\177~\000\000?\177p\000\003\177\177\000\000\037\177x\000\001\177\177@\000\017\177|\000\000\177\177`\000\007\177~\000\000?\177p\000\003\177\177\000\000\037\177h\000\010\007\000\000\00008\000\000\003\003p\000\000  \000\000\002\002\010\000\000\020\021\000\000\001\001\014\000\000\010\011\000\000\000@:\000\000\003\003P\000\000\030\036\000\000\001Ap\000\000\014\022@\000\001\001\030\000\000\010\011`\000\000@P\000\000\004\002p\000\000\010\030\000\000\000AH\000\000\004\r@\000\000 ,\000\000\002\003\000\000\000\020\032\000\000\001\001`\000\000\010\017\000\000\000A\000\000\000\004\010@\000\000 H\000\000\002\004`\000\000\020(\000\000\001\002P\000\000\010\026\000\000\000@\020\000\0000\001 \000\003 \016\000\000\030\001\000\000\001@\000(\000\007\000\002`\0008\004@\000\006\000\001@\000\034\000\011\000\001@\000H\000\014\000\004\000\000`\000 \000\006\000\001`\000(\000\016\000\002@\000p\000\024\000\007\000\001 \0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\002@\000@\000\024\000\004\000\001 \000 \000\n\000\002\000\000P\000\020\000\005\000\001\000\000(\000\010\000\002@\000@\000\004\000\003\000\000 \000\030\000\002\000\001@\000\020\000\014\000\001\000\000`\000\010\000\006\000\000@\0000\000\004\000\003\000\000 \000\030\000\002\000\001@\000\020\000\014\000\001\000\000`\000\010\000\006\000\000@\0000\000\004\000\003\000\000 \000\030\000\010\000\001@\000@\000\014\000\004\000\000`\000 \000\006\000\002\000\0000\000\020\000\003\000\001\000\000\030\000\010\000\001@\000@\000\014\000\004\000\000`\000 \000\006\000\002\000\0000\000\020\000\003\000\001\000\000\030\000\010\000\001@\000@\000\014\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`\000\020\000\006\000\001\000\0000\000\010\000\003\000\000@\000\030\000\004\000\001@\000 \000\014\000\002\000\000`p\000\011\177\177\000\000O\177|\000\000\177\177`\000\007\177~\000\000?\177p\000\003\177\177\000\000\037\177x\000\001\177\177@\000\017\177|\000\000\177\177`\000\007\177~\000\000?\177p\000\003\177\177\000\000\037\177x\000\001\177~@\000P8\000\000\004\003@\000\000 \037\000\000\002B\000\000\000\024\020@\000\001!\010\000\000\n\010`\000\000PH\000\000\005\003P\000\000 \035\000\000\002\001p\000\000\020\017\000\000\001\001\024\000\000\n\011@\000\000PN\000\000\005\005\000\000\000(\000$\000\001@\002 \000\014\000\022\000\000`\001\020\000\006\000\011\000\0000\000H\000\003\000\004@\000\030\000$\000\001@\006@\000\024\0004\000\001 (\000\000\014\002`\000\000`\030\000\000\006\001P\000\0000\000n\000\002@\006p\000\024\0008\000\001 \003@\000\n\005\000\000\000`*\000\000\006\002`\000\0000\027\000\000\003\000\0070\000\024\000;\000\001 \003`\000\n\000\036\000\000P0\000\000\006\003\020\000\0000\0000\000\002\000\003\000\000\020\000\030\000\001\000\001@\000\010\000\014@\000@\000d\000\004\000\006 \000 \0002\000\002\001P\000\000\030\r@\000\001@\024\000\000\n\001 \000\000P\014\000\000\005\000`\000\000(\007\000\000\002@8\000\000\024\004\000\000\001@$\000\000\014\000\032@\000P\001T\000\005\000\r@\000(\000l\000\002@p\000\000\030\007@\000\001@@\000\000\014\004 \000\000`$\000\000\006\0020\000\0000\001\000\000\001@\010\000\000\014\000@\000\000`\004\000\000\006\000 \000\0000\002\000\000\003\000\020\000\000\030\001\000\000\001@\001P\000\004\000\r\000\000 \000h\000\002\000\006@\000\020\0004\000\001\000\003 \000\010\000\032\000\000@\001P\000\004\000\r\000\000 \000h\000\002\000\006@\000\020\0004\000\001\000\003 \000\010\000\032\000\000@\001P\000\004\000\r\000\000 \0018\000\010\000\013@\000@\001H\000\005\000\014`\000(\000X\000\002@\005P\000\024\000.\000\001 \002x\000\n\000\034@\000P\001h\000\005\000\017 \000(\004\000\000\002@\002\000\000\014\000\020\000\000`\001\000\000\006\000\010\000\0000\000D\000\003\000\004 \000\030\000\"\000\001@\002\020\000\014\0000\000\001 \003\010\000\n\000\037\000\000P\001|\000\005\000\007@\000(\000>\000\002@\004\000\000\024\000!\000\001 \002@\000\n\000\024@\000P\000X\000\004\000\005@\000 \000\034\000\000@\001`\000\004\000\016\000\000 \000p\000\002\000\007\000\000\020\0008\000\001\000\003@\000\010\000\034\000\000@\001`\000\004\000\016\000\000 \000p\000\002\000\007\000\000\020\0008\000\001\000\003@\000\010\000\034\000\000@\001`\000\004\000\017\000\000@\000x\000\004\000\007@\000 \000<\000\002\000\003`\000\020\000\036\000\001\000\001p\000\010\000\017\000\000@\010\000\000\n\000`\000\000P\000h\000\005\000\006`\000(\0008\000\002@\003P\000\024\000\023\000\001\000\001\030\000\010\000\n\000\000@\000P\000\004\000\010@\000(\000F\000\002@\004@\000\024\000%\000\001 \0020\000\n\000\023@\000P\000T\000\004\000\005 \000 \000T\000\002@\0050\000\024\000\000\000\000`\000\000\000\006\000\000\000\0000\000\000\000\003\000\000Hn`\000\004Gn\000\000$E\000\000\002$Y\000\000\022(Xc7]-F!\001\\o:\010\014\026c1^c0]\014R\003%Za3Y$\006#\005ha\020\030NV3\031Jr\020H\0132+\020@b<]\014W\032t\024\000\000\000\0146{UXd\020\033Mw!\001Bl6\033l6\013QJ 4[,\026;\024@s:\034NV\033Qjr2@\000\006\033=jl2\010\rf{P@r2\\m\027S\024@i6X,v)\001Du3\031LW\021\004\000\0005\030M\0269I>i6X,v*}de9Z/&)\001Fa6\033\014V!\001ni:\032\004\006\011\001Hi3\031LW\023\025\\t\020\035m\026#QP \024\023K\024I$\000\0008\030MR\003ABr9Z-f9\001Jr9\033n P\000\000u7\031/\007\003\025Ft2Y\004\006+9H 7YD\007\003\011Z 3\032-F)8\024\000\000\000\000\006\033=jl2\010\rf{P@a6\033\rv\033\005he\020\011,GA\025H 4[,\026;\024@f7\\D\007\003\011Z 3\032-F((\000\000\000\000\0146{UXd7\011nB\003IJa2\010\016\006\0234@i6X,v)\001Hi6Y-g\033%^n9B@\006+9H-7YEV3%Xe\020\034\014\027\023MRn3H\016\006\0234@h2X,F+H\024\0007\033nB\003\004@b4[L\027\023d@p1\033$\0063%Xe\027\002@\005\001P\024%2\010\004V (\000\000\000\035-f\013\011Xe\020\035\rr\003=`e7\010\004r+LN 3\033n\"\003]di:\032-f8\001jn0XMF)\001ho\020\033n\006+8@'\022\\dr\003\031^r\020\034LV\013\021Rn3B@\000\000\000\000A)Pi\024I\001Fo6[,VsP@d0]\014\020\000\000N%9Ia\0229\025f'\000\000\000\007+9Bb6\031$\007#<@d:\\\rFK\rBt2H\0146{5Ze7\035\004\007\033Qdi7\031`\000\003U\\a1\033\014R\003Q^ 9\031.6KiJ 6Y.F\013\021Bt0H\0167#Ijc:\035.&(\001jn2^\016\006+\rhe2\010\014Vs\020@o3\010\0146{5Ze7\035\004\007\033\025Nm2[N@\000\000\000u7\030,&c\024@t7H\014\026c1^c0]\014R\003\r^m6Y-g!\001ft9\035,7#Ude\000\000\000\000\003U\\h0[LFc\025H :[M\026\033=He\020\030mvk5Jn:\010\0166+\035Ze7\035\000\000\000\001,\001\000`&@\010\014\016\030\000@!0V\004\016\017\002H \021H\010B#\022\025@\020\014\001(\001\007B)\000\010\004\0148\000@`s\000\004\002\033\022\000 qHp\002\001\014\005@\021\000a,\001\000`\n@\010|\002Q\000@#t@\004\006\001\034\000 \020\031P\002\007\000L\000\020\010\034P\001\001AD@\010\004\004\"\000C`!`\004\002\016\014\000 0pX\002\001\001\005\000\0208\010$\001\000AB\020\010\014\014\n`@  N\004~\002\004( \023p\024B\003\037\001\010\020\010\010\005!\003@@\"\010\004\014\001 @``\010D\002\002\000!!p\020\001\022\001\007\000\004P\0308\000\025\000@@\000H\034\004\000\002@ `\000\004\000\006+\000 \000\000\000\000\000\000@\000\000\000\020\000\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\000\020\000\000\000\000\030\000\000\000\010\000\000\000\010@\000\000\000\000\000\000\000\000A\177\177\177\177p\000\000\000\003\000\000\000\002\000\000\002\001\010\000\000\000\000\000\000\000\000\001 \000\035z8\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000 \000\000\000\006\000\000\000\000\000\000\000\000\002\000\000\000\000 \000\000\000\001@\000\000\000\014\000\000\000\001 \000\000\000\014\000\000\000\0010\000\000\000\000\000\000\000\002\007\177\177\177\177@\000\000\000\030\000\000\000\010\000\000\000\001\026\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000 \000\003_9\000\000\000\000\020\000\000\000\001\017\177\177~\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\020\000\000\000\003\000\000\000\000\000\000\000\000\001\000\000\000\000\020\000\000\000\000`\000\000\000\006\000\000\000\000P\000\000\000\006\000\000\000\000X\000\000\000\004\000\000\000\001\003\177\177\177?`\000\000\000\016\000\000\000\004\000\000\000\000K\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\022\000\001oj\000\000\000\000\001\000\000\000\000\000\000\000\000\000@\000\000\000\010\000\000\000\000\000\000\000\000\004\000\000\000\0000\000\000\000\000\000\000\000\000\030\000\000\000\002\000\000\000\000\014\000\000\000\001\000\000\000\000\n\000\000\000\000`\000\000\000\014\000\000\000\000\000\000\000\000\020?\177\177\177|\000\000\000\001 \000\000\000@\000\000\000\011@\000\000\000\000\000\000\000\0008\000\007?d\000\000\000\000\034\000\000\000\002\037\177\177|\002\000\000\000\000\020\000\000\000\000\000\000\000\000\010\000\000\000\001\000\000\000\000\000\000\000\000\000@\000\000\000\006\000\000\000\000\000\000\000\000\003\000\000\000\000 \000\000\000\001@\000\000\000\020\000\000\000\001 \000\000\000\014\000\000\000\001@\000\000\000\007\000\000\000\002\007\177\177\177\000\000\000\000\000\030\000\000\000\010\000\000\000\001\030\000\000\000\000\000\000\000\000\010\000\000x\002@\000\000\000\002@\000\000\000+\177\177|\000\000\000\000\000\010\000\000\000\001\037\177\177x\000\000\000\000\000 \000\000\000\004?\177\177p\000\000\000\000\001\000\000\000\000\017\177\177\177`\000\000\000\000\005\000\000\000\0007\177\177\177@\000\000\000\000\024\000\000\000\001?\177\177\177\000\000\000\000\000@\000\000\000\005\177\177\177~\000\000\000\000\001\000\000\000\000\034\000\000\000\000\000\000\000\000\006\000\000\000\000p\000\000\001\000\000\000\000\000\030\000\000\000\004\000\000\000\010\000\000\000\000\001\000\000\000\000\022\000\000\000@\000\000\000\000\004\000\000\000\000P\000\000\004\000\000\000\000\000\030\000\000\000\010\037\177\177_~\000\000\000\000`\000\000\000 \000\000\001\000\000\000\000\000\000\000\000\000\0008\000\003`%\000\000\000\000\010\000\000\000\001\037\177\177x\000\000\000\000\000\030\000\000\000\004?\177\177p\000\000\000\000\001\000\000\000\000\017\177\177\177`\000\000\000\000\005\000\000\000\0007\177\177\177@\000\000\000\000\024\000\000\000\001?\177\177\177\000\000\000\000\000@\000\000\000\005\177\177\177~\000\000\000\000\002\000\000\000\000\024\000\000\000\000\000\000\000\000\n\000\000\000\000P\000\000\000 \000\000\000\000(\000\000\000\003\000\000\000\002\000\000\000\000\001\000\000\000\000\016\000\000\000\020\000\000\000\000\003\000\000\000\000@\000\000\001\000\000\000\000\000\014\000\000\000\002 \000\000\010\000\000\000\000\0000\000\000\000\n\000\000\000@\000\000\000\000\002@\000\000\001\003\177\177}\177`\000\000\000\n\000\000\000\004\000\000\000\020\000\000\000\000\000\000\000\000\000\007@\000<\n \000\000\000\002\000\000\000\000\007\177\177\177~\020\000\000\000\011\000\000\000\000\017\177\177\177|@\000\000\000 \000\000\000\000?\177\177\177v\000\000\000\001\020\000\000\000\000\177\177\177\177h\000\000\000\003@\000\000\000\003\177\177\177\177@\000\000\000\010\000\000\000\000\017\177\177\177\177\000\000\000\000\020\000\000\000\000@\000\000\000\000\000\000\000\001 \000\000\000\000\000\000\000\000 \000\000\000\006\000\000\000\000\000\000\000\000\001@\000\000\000\014\000\000\000\001\000\000\000\000\010\000\000\000\000`\000\000\000\001\000\000\000\001 \000\000\000\002\000\000\000\000\020\000\000\000\005@\000\000\000\010\000\000\000\000P\000\000\000&\000\000\000\000(\000\000\000\003\000\000\000\002\030\000\000\000\001 \000\000\000\016\000\000\000\020`\000\000\000\006\000\000\000\0008\000\000\001\003\000\000\000\000\034\000\000\000\002\000\000\000\006\014\000\000\000\000`\000\000\000\n\000\000\000(0\000\000\000\004@\000\000\001\003\177\177\177|\000\000\000\000\022\000\000\000\004\000\000\000\r\006\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000*\000\001pA\000\000\000\000\010\000\000\000\000'\177\177\177p@\000\000\000$\000\000\000\000_\177\177\177b\000\000\000\001\000\000\000\000\002\177\177\177\177(\000\000\000\004@\000\000\000\007\177\177\177~ \000\000\000\016\000\000\000\000\037\177\177\177{\000\000\000\000 \000\000\000\000\177\177\177\177t\000\000\000\000`\000\000\000\003\177\177\177\177p\000\000\000\003\000\000\000\000\010\000\000\000\000@\000\000\000\024\000\000\000\000 \000\000\000\006\000\000\000\000`\000\000\000\001\000\000\000\000(\000\000\000\001@\000\000\000\024\000\000\000\001`\000\000\000\014\000\000\000\000 \000\000\000'\000\000\000\000 \000\000\000\002@\000\000\001,\000\000\000\001\000\000\000\000\014\000\000\000\0110\000\000\000\005\000\000\000\0008\000\000\000E@\000\000\000\024\000\000\000\002\000\000\000\004\026\000\000\000\000`\000\000\000\010\000\000\000 X\000\000\000\003@\000\000\000$\000\000\001B`\000\000\000\014\000\000\000\0010\000\000\n\013\000\000\000\000H\000\000\000\020?\177\177\177\000\000\000\000\002 \000\000\000@\000\000\003!0\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\005@\000\036\014 \000\000\000\000p\000\000\000\004\177\177\177~X\000\000\000\004\000\000\000\000\003\177\177\177~`\000\000\000\016\000\000\000\000\017\177\177\177|\000\000\000\000(\000\000\000\000?\177\177\177t\000\000\000\000@\000\000\000\005\177\177\177\177`\000\000\000\005\000\000\000\000\000\000\000\000\001\000\000\000\000\030\000\000\000\000\000\000\000\000\006\000\000\000\000p\000\000\000\000\000\000\000\000 \000\000\000\004\000\000\000\000\000\000\000\000\001 \000\000\000\004\000\000\000\000`\000\000\000\006\000\000\000\000(\000\000\000\002@\000\000\002\030\000\000\000\001@\000\000\000\n\000\000\000\014`\000\000\000\006\000\000\000\0000\000\000\000C\000\000\000\000\030\000\000\000\001`\000\000\003\014\000\000\000\000`\000\000\000\010\000\000\000\0240\000\000\000\003\000\000\000\000$\000\000\001\021@\000\000\000\014\000\000\000\001 \000\000\010F\000\000\000\0008\000\000\000\005@\000\000B\030\000\000\000\002\000\000\000\000A\177\177\177} \000\000\000\010\000\000\000\002\000\000\000\020#\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\025\000\000xB \000\000\000\000@\000\000\000\000\000\000\000\000 \000\000\000\004\000\000\000\000\020\000\000\000\002\000\000\000\000 \000\000\000\000\000\000\000\000\014\000\000\000\001\000\000\000\000\002\000\000\000\000P\000\000\000\005\000\000\000\000\010\000\000\000\003@\000\000\000\024\000\000\000\000@\000\000\000\022\000\000\000\000`\000\000\000\002\000\000\000\000h\000\000\000\003@\000\000\000\010\000\000\000\004 \000\000\000\016\000\000\000\0000\000\000\000\025\000\000\000\0008\000\000\000\002\000\000\000\000t\000\000\000\001`\000\000\000\n\000\000\000\005P\000\000\000\007\000\000\000\0000\000\000\000&@\000\000\000\034\000\000\000\010\000\000\000\002\032\000\000\000\000\000\000\000\000\r\000\000xR`\000\000\000\000@\000\000\000\000\000\000\000\000 \000\000\000\004\000\000\000\000\000\000\000\000\002\000\000\000\000\030\000\000\000\000@\000\000\000\014\000\000\000\001 \000\000\000\000\000\000\000\000P\000\000\000\005\000\000\000\000\010\000\000\000\003\000\000\000\000\030\000\000\000\000 \000\000\000\020\000\000\000\000p\000\000\000\000\000\000\000\000P\000\000\000\003@\000\000\000\004\000\000\000\002`\000\000\000\016\000\000\000\000 \000\000\000\r\000\000\000\0008\000\000\000\001@\000\000\000D\000\000\000\001`\000\000\000\010\000\000\000\003\020\000\000\000\010\000\000\000\000(\000\000\000\024@\000\000\000 \000\000\000\010\000\000\000\001\022\000\000\000\000\000\000\000\000\r\000\000x] \000\000\000\000@\000\000\000\000\000\000\000\000 \000\000\000\006\000\000\000\000\000\000\000\000\002\000\000\000\000 \000\000\000\000\000\000\000\000\014\000\000\000\001 \000\000\000\000\000\000\000\000@\000\000\000\004\000\000\000\000\010\000\000\000\002@\000\000\000\014\000\000\000\000`\000\000\000\016\000\000\000\000`\000\000\000\001\000\000\000\000x\000\000\000\003\000\000\000\000\010\000\000\000\004 \000\000\000\014\000\000\000\0000\000\000\000\025\000\000\000\0000\000\000\000\002\000\000\000\000t\000\000\000\001@\000\000\000\n\000\000\000\005P\000\000\000\007\000\000\000\0000\000\000\000&@\000\000\000\034\000\000\000\010\000\000\000\002\032\000\000\000\000\000\000\000\000\r\000\000xg`\000\000\000\001@\000\000\000\003\177\177\177\177@\000\000\000\006\000\000\000\000\017\177\177\177\177\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\000\006\000\000\000\000\020\000\000\000\003\000\000\000\0000\000\000\000\001\000\000\000\000\000\000\000\000\010\037\177\177\177~\000\000\000\000\000\000\000\000 \000\000\000\000\030\000\000\000\000\000\000\000\000\034\000\003cI\000\000\000\000\016\000\000\000\000O\177\177\177h\000\000\000\0000\000\000\000\001?\177\177\177`\000\000\000\001 \000\000\000\003\177\177\177\177@\000\000\000\004\000\000\000\000\007\177\177\177\177\000\000\000\000\014\000\000\000\000\037\177\177\177~\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\001@\000\000\000\000\000\000\000\000 \000\000\000\010\000\000\000\000\000\000\000\000\002\000\000\000\000(\000\000\000\000@\000\000\000\014\000\000\000\001@\000\000\000\004\000\000\000\000P\000\000\000\007\000\000\000\000 \000\000\000\004@\000\000\000\034\000\000\000\010\037\177\177\177N\000\000\000\000p\000\000\000 \000\000\000\001H\000\000\000\000\000\000\000\0004\000\003ca\0146{9ft9\035,7#%\\g\020\032\016V3\031Za7\010\016F\013\011Xe\020\033\rv9\001fi=\031$\002+\020\000\0009\030-b\003=Lf\020\035\r\006)\001Jn2\010\rv1\001hh2H\014VsQdi2\\d\007#\005Dl2H$\002A\025H \037\017$\002+\020R\000\000\000\000\006\033=jl2\033Dw!\001Bl6\033l6\013QJ 9]\rw\023\005Ne\020\031Mw\021\001Pu3\031MV\0138@h4\\nF{\035dan\005\002A\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\"\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\000 \020\010\004\002\001\000@ \020\010\020\010\004\002\001\000@ A P(\024\n`0\030\014\006\003\001@`0\030\014\006\003\001ADu3H\r\026q\001lf8\034M\026sQL:\020\030L\026!\001Da9Y \000\000\000`1\031\014fC)Xn8\034P($\032\021\nF\000\000\000\000\001@b2\031M\006S1\\p90XL6#\025L\000\000\000\000\000\000\014'\\\000\000eb`\000\006.\026\000\0001\037P\000\003\027\013\000\000\0318X\000\001KE@\000\014\\,\000\000eb`\000\006.\026\000\0001  \000\003\n\023\000\000\0318X\000\001E\007\000\000\014(T\000\000eb`\000\006\024t\000\0001'p\000\003\n?\000\000\030Sx\000\001E\037@\000\014)|\000\000bO`\000\006\024~\000\0001'p\000\003\n?\000\000\0318X\000\001KE@\000\014\\,\000\000eb`\000\006.\026\000\0002q0\000\003\027\013\000\000\0318X\000\001KE@\000\014\\,\000\000bS`\000\006)L\000\0002q0\000\003\024f\000\000\0318X\000\001KE@\000\014\\,\000\000eb`\000\006&X\000\0002q0\000\003\027\013\000\000\031\033\000\000\001KE@\000\014\\,\000\000eb`\000\006.\026\000\0002q0\000\003\023f\000\000\0318X\000\001KE@\000\014Pl\000\000eb`\000\006.\026\000\0002q0\000\003\027\013\000\000\0318X\000\001KE@\000\014\\,\000\000eb`\000\006.\026\000\0002q0\000\003\024Y\000\000\030U\030\000\001J3\000\000\014S\030\000\000e\031@\000\006,.\000\0001*0\000\003\027\013\000\000\0318X\000\001K\r@\000\014\\,\000\000eJ \000\006&h\000\0002j`\000\003\026h\000\000\0318X\000\001K6\000\000\014\\,\000\000dz@\000\006.\026\000\0002q0\000\003\027\035\011\026s\031Rn4]\017\020\000\000\000\000\000\000hP\000\000\006E\000\000\0005\"p\000\003*$\000\000\032Q@\000\001U\022@\000\017/l\000\000z\177\000\000\007Wx\000\000=?@\000\003k|\000\000\036_`\000\001u~\000\000\017/p\000\000z\177\000\000\007Wx\037ow{}~\177?_`\000\000\000\n\000\000\000\003\020\000\000\000}\037|\000\000\000\000\000\000\000\020\004@\000\000\000\000\000\000\010\005H\000\000\000\000\000\000\004\004=\000\000\000\000\000\000\002\003\007\010\000\000\000\000\000\001\001x5\000\000\000\000\000\000A\027!\020\000\000\000\000\000 Xb-\000\000\000\000\000\0202}<\020\000\000\000\000\010\034n5J\000\000\000\000\004\020\n@_\020\000\000\000\002\010nH;:\000\000\000\001\004m\r%\024 \000\000\000BQ\014\023N*\000\000\000!5WL z \000\000\020aF_TL4\000\000\0104\016\rr7p \000\004\033XhWBv\024\000\002\016WA6Yil@\001\007a,9\014\011\011t\000D\nkcWEV\030@\"\022c.&[Eo(\021\020\017\006<\014MjdHK)4\005GpR^d')pC<v3[\"\r\003C<M|\010\000\001\r\023\\-6P+8.M\034\023`>I\177su- NtGd`\035\031\035\"T~u~s_O\000\000\010\010\004\003\001@`0 \020\010\004\002\001\000@ \024\n\005\002A P(\024\n\005\002A P(\024\n\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`pxf96);
    private static final int[] _data4 = decodeData("\000\000\000\000\000\000\007\n\006\000\000=4@\000\000\000\000\000\000\000\000\000\000\000\000\n`\000\017-\030\000\000\000\000\000\000\000\000\000\000\000\000\003 \000\003k(\000\000\000\000\000\000\000\000\000\000\000\000\000q\000\000zj@\000\000\000\001\000\000\000\000\000\000\000\000\035@\000\036Z`\000\000\000\000\000\000\000\000\000\000\000\000\006 \000\007V\\\000\000\000\000\000\000\000\000\000\000\000\000\001Z\000\001uX\000\000\000\000\001\000\000\000\000\000\000\000\0007@\000=6 \000\000\000\000 \000\000\000\000\000\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001=\000\000\000\013p\000\000\000_@\000\000\000\000\000\000\000\000\000\000\000\007Q4\000\000=\016\020\000\003i\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017.daj^4$4s\033;n`\000\ni \000\000\036J\020\000\001tQ\000\000\017%\020\000\000z)\000\000\007RL\000\000=\024`\000\003i(\000\000\036J@\000\001tU\000\000\017%(\000\000z+\000\000\007RX\000\000=\025`\000\003i.\000\000\036K\000\000\001tX\000\000\017%H\000\000z,@\000\007Rh\000\000=\026@\000\003i6\000\000\036K0\000\001t\\\000\000\017%`\000\000z.@\000\007Rt\000\000=\027@\000\003i<\000\000\036Kp\000\001t_\000\000\017&\000\000\000z0\000\000\007S\004\000\000=\030 \000\003iD\000\000\036L \000\001tc\000\000\017&\030\000\000z2\000\000\007S\020\000\000=\031 \000\003iJ\000\000\036L`\000\001tf\000\000\017&8\000\000z3@\000\007S \000\000=\032\000\000\003iR\000\000\036M\020\000\001tj\000\000\017&P\000\000z5@\000\007S,\000\000=\033\000\000\003iX\000\000\036MP\000\001tm\000\000\017&p\000\000z7\000\000\007S<\000\000=\033`\000\003i`\000\000\036N\000\000\001tq\000\000\017'\010\000\000z9\000\000\007SH\000\000=\034`\000\003if\000\000\036N@\000\001tt\000\000\017'(\000\000z:@\000\007SX\000\000=\035@\000\003in\000\000\036Np\000\001tx\000\000\017'@\000\000z<@\000\007Sd\000\000=\036@\000\003it\000\000\036O0\000\001t{\000\000\017'`\000\000z>\000\000\007St\000\000=\037 \000\003i|\000\000\036O`\000\001t\177\000\000\017'x\000\000z@\000\000\007T\000\000\000=  \000\003j\002\000\000\036P \000\001u\002\000\000\017(\030\000\000zA@\000\007T\020\000\000=!\000\000\003j\n\000\000\036PP\000\001u\006\000\000\017(0\000\000zC@\000\007T\034\000\000=\"\000\000\003j\020\000\000\036Q\020\000\001u\011\000\000\017(P\000\000zE\000\000\007T,\000\000=\"`\000\003j\030\000\000\036Q@\000\001u\r\000\000\017(h\000\000zG\000\000\007T8\000\000=#`\000\003j\036\000\000\036R\000\000\001u\020\000\000\017)\010\000\000zH@\000\007TH\000\000=$@\000\003j&\000\000\036R0\000\001u\024\000\000\017) \000\000zJ@\000\007TT\000\000=%@\000\003j,\000\000\036Rp\000\001u\027\000\000\017)@\000\000zL\000\000\007Td\000\000=& \000\003j4\000\000\036S \000\001u\033\000\000\017)X\000\000zN\000\000\007Tp\000\000=' \000\003j:\000\000\036S`\000\001u\036\000\000\017)x\000\000zO@\000\007U\000\000\000=(\000\000\003jB\000\000\036T\020\000\001u\"\000\000\017*\020\000\000zQ@\000\007U\014\000\000=)\000\000\003jH\000\000\036TP\000\001u%\000\000\017*0\000\000zS\000\000\007U\034\000\000=)`\000\003jP\000\000\036U\000\000\001u)\000\000\017*H\000\000zU\000\000\007U(\000\000=*`\000\003jV\000\000\036U@\000\001u,\000\000\017*h\000\000zV@\000\007U8\000\000=+@\000\003j^\000\000\036Up\000\001u0\000\000\017+\000\000\000zX@\000\007UD\000\000=,@\000\003jd\000\000\036V0\000\001u3\000\000\017+ \000\000zZ\000\000\007UT\000\000=- \000\003jl\000\000\036V`\000\001u7\000\000\017+8\000\000z\\\000\000\007U`\000\000=. \000\003jr\000\000\036W \000\001u:\000\000\017+X\000\000z]@\000\007Up\000\000=/\000\000\003jz\000\000\036WP\000\001u>\000\000\017+p\000\000z_@\000\007U|\000\000=0\000\000\003k\000\000\000\036X\020\000\001uA\000\000\017,\020\000\000za\000\000\007V\014\000\000=0`\000\003k\010\000\000\036X@\000\001uE\000\000\017,(\000\000zc\000\000\007V\030\000\000=1`\000\003k\016\000\000\036Y\000\000\001uH\000\000\017,H\000\000zd@\000\007V(\000\000=2@\000\003k\026\000\000\036Y0\000\001uL\000\000\017,`\000\000zf@\000\007V4\000\000=3@\000\003k\034\000\000\036Yp\000\001uO\000\010\004\002\001",0x20c);
    private static final int[] _data5 = decodeData(";\031.'\033%^n\000\032\014Vc@\000\000\000\000\016\027+%Jt\000\000\000\0073\025db7\\lP\003\021jm8\000\000\000\000\001Pa9Z\000\000\000\000\000o:]\016\007+P\000\0003\033n&k\005h\000\000\011.2\001\025f\n\000\000\006\002qDbp9\031 \007\023\010\000\000\027\034\014&h\000\000\000\000\013 \000\000\000J0\031\036\000\000\000\000\000W TIdJ9\016\000\"\021(%*\034\000\000\000\032-f3<\000\000\000\000\rw+P\001\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000@\000\000\001|Z-\000\000\000\000\000\000\001\027%\020F h(4\n\020\025\n\004:I\036N\000\000\000\000\000\003~\177\037Gap8\014\002\000@0\034\017\007cy~\022Y\000\000\003]D\000\000\034L \000\000\000\003k~\0100\000\000\000\000\001s`\000\000\010\000\000\177\177\177\177y@\000\000\000\013@\000\000\001\022n3\000\011f\n8\000(7\035-Fa$\000\000\000\000\000\000\001@\000\000\000\023L\024p\001\003p\000\000\000\000\000\000\000?|\000\000\000\000\000\000\000\037tPz;\r^C0OxhQ\"\026`d,g}\032\020&PO^?3\177@\000\000\000\000\000\000\002\000H\000\000\000\000\000\000\001\000\034\000\000\000\000\000\000\000@\n\000\000\000\000\000\000\000\037x\000\000\000\000\000\000\000\000\000\000\000\004\\\000\000\000\000\000\000\000\000C\000\000\000\000\010\004\002\001",0x5a);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public Jbig2dec() {
        super(4096,65536);
        initPages(_data1,0x38a00,false);
        initPages(_data2,0x38a08,false);
        initPages(_data3,0x39000,true);
        initPages(_data4,0x3ce58,false);
        initPages(_data5,0x3d690,false);
        clearPages(0x3d7f8,0xb);
        clearPages(0x3d828,0x12);
    }

    protected int entryPoint() { return 0x10e00; }
    protected int heapStart() { return 0x3d870; }
    protected int gp() { return 0x45690; }
    public static void main(String[] args) throws Exception {
        Jbig2dec me = new Jbig2dec();
        int status = me.run("Jbig2dec",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("jbig2_image_resize",new Integer(0x25a00));
        symbols.put("jbig2_comment_unicode",new Integer(0x26a00));
        symbols.put("jbig2_region_find_referred",new Integer(0x21a00));
        symbols.put("jbig2_decode_text_region",new Integer(0x1ce00));
        symbols.put("jbig2_decode_refinement_region",new Integer(0x22200));
        symbols.put("memmove",new Integer(0x2e000));
        symbols.put("getopt_long",new Integer(0x15a00));
        symbols.put("snprintf",new Integer(0x2f200));
        symbols.put("getenv",new Integer(0x2c800));
        symbols.put("jbig2_parse_segment_header",new Integer(0x18400));
        symbols.put("jbig2_page_info",new Integer(0x19400));
        symbols.put("jbig2_sd_list_referred",new Integer(0x1b400));
        symbols.put("jbig2_metadata_free",new Integer(0x26800));
        symbols.put("jbig2_image_clone",new Integer(0x25600));
        symbols.put("getpagesize",new Integer(0x33bd0));
        symbols.put("SHA1_Transform",new Integer(0x12200));
        symbols.put("memcpy",new Integer(0x33be0));
        symbols.put("SHA1_Init",new Integer(0x13c00));
        symbols.put("jbig2_sd_release",new Integer(0x1b000));
        symbols.put("jbig2_image_get_pixel",new Integer(0x25000));
        symbols.put("jbig2_arith_new",new Integer(0x26e00));
        symbols.put("malloc",new Integer(0x2ce00));
        symbols.put("isatty",new Integer(0x35e00));
        symbols.put("vsnprintf",new Integer(0x33400));
        symbols.put("jbig2_huffman_get_bits",new Integer(0x28e00));
        symbols.put("jbig2_image_write_pbm",new Integer(0x26000));
        symbols.put("jbig2_arith_int_ctx_new",new Integer(0x27400));
        symbols.put("jbig2_arith_int_decode",new Integer(0x27200));
        symbols.put("jbig2_release_huffman_table",new Integer(0x29000));
        symbols.put("jbig2_alloc",new Integer(0x16600));
        symbols.put("fflush",new Integer(0x29a00));
        symbols.put("jbig2_comment_ascii",new Integer(0x26200));
        symbols.put("SHA1_Update",new Integer(0x13e00));
        symbols.put("jbig2_huffman_get",new Integer(0x27e00));
        symbols.put("jbig2_image_set_pixel",new Integer(0x25200));
        symbols.put("jbig2_sd_count_referred",new Integer(0x1b200));
        symbols.put("SHA1_Final",new Integer(0x14000));
        symbols.put("strtol",new Integer(0x30a00));
        symbols.put("strrchr",new Integer(0x30600));
        symbols.put("isinf",new Integer(0x38000));
        symbols.put("jbig2_parse_segment",new Integer(0x18a00));
        symbols.put("fstat",new Integer(0x38600));
        symbols.put("fprintf",new Integer(0x2aa00));
        symbols.put("jbig2_complete_page",new Integer(0x19c00));
        symbols.put("jbig2_find_segment",new Integer(0x19000));
        symbols.put("jbig2_arith_iaid_decode",new Integer(0x27a00));
        symbols.put("fseek",new Integer(0x2b800));
        symbols.put("jbig2_arith_iaid_ctx_free",new Integer(0x27c00));
        symbols.put("jbig2_data_in",new Integer(0x16000));
        symbols.put("memchr",new Integer(0x2de00));
        symbols.put("jbig2_free",new Integer(0x16800));
        symbols.put("jbig2_arith_int_ctx_free",new Integer(0x27600));
        symbols.put("jbig2_image_write_pbm_file",new Integer(0x25e00));
        symbols.put("strncmp",new Integer(0x30200));
        symbols.put("strncpy",new Integer(0x30400));
        symbols.put("realloc",new Integer(0x2e600));
        symbols.put("jbig2_page_add_result",new Integer(0x1a000));
        symbols.put("jbig2_free_segment",new Integer(0x18e00));
        symbols.put("jbig2_image_clear",new Integer(0x25c00));
        symbols.put("memcmp",new Integer(0x14400));
        symbols.put("jbig2_decode_generic_region",new Integer(0x1ea00));
        symbols.put("jbig2_parse_extension_segment",new Integer(0x18800));
        symbols.put("jbig2_error",new Integer(0x15c00));
        symbols.put("jbig2_huffman_skip",new Integer(0x28800));
        symbols.put("fread",new Integer(0x2b000));
        symbols.put("jbig2_get_int32",new Integer(0x16c00));
        symbols.put("strdup",new Integer(0x2fe00));
        symbols.put("jbig2_end_of_stripe",new Integer(0x19a00));
        symbols.put("fopen",new Integer(0x2a800));
        symbols.put("memset",new Integer(0x33bf0));
        symbols.put("main",new Integer(0x11200));
        symbols.put("fclose",new Integer(0x29800));
        symbols.put("jbig2_global_ctx_free",new Integer(0x17400));
        symbols.put("strcmp",new Integer(0x2fc00));
        symbols.put("jbig2_build_huffman_table",new Integer(0x28000));
        symbols.put("jbig2_word_stream_buf_free",new Integer(0x17800));
        symbols.put("jbig2_ctx_new",new Integer(0x15e00));
        symbols.put("atexit",new Integer(0x29200));
        symbols.put("jbig2_huffman_advance",new Integer(0x28a00));
        symbols.put("jbig2_arith_decode",new Integer(0x26c00));
        symbols.put("jbig2_image_compose_unopt",new Integer(0x24600));
        symbols.put("jbig2_realloc",new Integer(0x16a00));
        symbols.put("jbig2_image_release",new Integer(0x25800));
        symbols.put("jbig2_huffman_offset",new Integer(0x28c00));
        symbols.put("isnan",new Integer(0x38200));
        symbols.put("fputc",new Integer(0x2ac00));
        symbols.put("jbig2_immediate_generic_region",new Integer(0x1ee00));
        symbols.put("jbig2_release_page",new Integer(0x1a400));
        symbols.put("localeconv",new Integer(0x36200));
        symbols.put("jbig2_ctx_free",new Integer(0x17000));
        symbols.put("jbig2_image_compose",new Integer(0x24c00));
        symbols.put("fwrite",new Integer(0x2c600));
        symbols.put("jbig2_get_int16",new Integer(0x16e00));
        symbols.put("jbig2_end_of_page",new Integer(0x19e00));
        symbols.put("jbig2_arith_iaid_ctx_new",new Integer(0x27800));
        symbols.put("jbig2_text_region",new Integer(0x1dc00));
        symbols.put("exit",new Integer(0x29600));
        symbols.put("jbig2_symbol_dictionary",new Integer(0x1a600));
        symbols.put("jbig2_page_out",new Integer(0x1a200));
        symbols.put("atoi",new Integer(0x29400));
        symbols.put("strlen",new Integer(0x101c0));
        symbols.put("jbig2_make_global_ctx",new Integer(0x17200));
        symbols.put("strchr",new Integer(0x38400));
        symbols.put("fputs",new Integer(0x2ae00));
        symbols.put("jbig2_refinement_region",new Integer(0x21c00));
        symbols.put("jbig2_image_new",new Integer(0x25400));
        symbols.put("jbig2_get_region_segment_info",new Integer(0x19200));
        symbols.put("jbig2_decode_generic_mmr",new Integer(0x22c00));
        symbols.put("jbig2_huffman_new",new Integer(0x28600));
        symbols.put("_call_helper",new Integer(0x101d8));
        symbols.put("jbig2_word_stream_buf_new",new Integer(0x17600));
        symbols.put("vfprintf",new Integer(0x31000));
        symbols.put("free",new Integer(0x2d000));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}
